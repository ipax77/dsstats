//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace dsstats.localization {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class DsstatsLoc {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        public DsstatsLoc() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("dsstats.localization.DsstatsLoc", typeof(DsstatsLoc).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Automatic Replay Detection.
        /// </summary>
        public static string Automatic_Replay_Detection {
            get {
                return ResourceManager.GetString("Automatic Replay Detection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The app automatically identifies and decodes new replays in folders specified in the &quot;Settings&quot; screen if the application is open. .
        /// </summary>
        public static string Automatic_Replay_Detection_detail {
            get {
                return ResourceManager.GetString("Automatic Replay Detection detail", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Community Support.
        /// </summary>
        public static string Community_Support {
            get {
                return ResourceManager.GetString("Community Support", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Join our online community for additional assistance, updates, and discussions related to the app..
        /// </summary>
        public static string Community_Support_detail {
            get {
                return ResourceManager.GetString("Community Support detail", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Comparing Stats.
        /// </summary>
        public static string Comparing_Stats {
            get {
                return ResourceManager.GetString("Comparing Stats", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Explore player and commander stats locally or, with consent, compare them online with other players for a comprehensive gaming analysis..
        /// </summary>
        public static string Comparing_Stats_detail {
            get {
                return ResourceManager.GetString("Comparing Stats detail", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Consent for Upload.
        /// </summary>
        public static string Consent_for_Upload {
            get {
                return ResourceManager.GetString("Consent for Upload", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To upload replays to the website, you must grant consent in the &apos;Settings&apos; page. Once consented, decoded replays will be automatically uploaded, or you can manually press the &apos;Upload&apos; button on the &apos;Home&apos; screen..
        /// </summary>
        public static string Consent_for_Upload_detail {
            get {
                return ResourceManager.GetString("Consent for Upload detail", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Decoding Process .
        /// </summary>
        public static string Decoding_Process_ {
            get {
                return ResourceManager.GetString("Decoding Process ", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The initial decoding may take some time, typically 30-60 minutes per 1,000 replays. The duration depends on the number of replays and your hardware capabilities..
        /// </summary>
        public static string Decoding_Process_detail {
            get {
                return ResourceManager.GetString("Decoding Process detail", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Decoding Replays.
        /// </summary>
        public static string Decoding_Replays {
            get {
                return ResourceManager.GetString("Decoding Replays", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To utilize the app&apos;s features, you need to decode StarCraft 2 replays, extracting raw data from SC2Replay files. Initiate decoding by selecting the &quot;New Replays&quot; button on the top row or the &quot;Decode&quot; button on the &quot;Home&quot; screen..
        /// </summary>
        public static string Decoding_Replays_detail {
            get {
                return ResourceManager.GetString("Decoding Replays detail", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Decoding Speed.
        /// </summary>
        public static string Decoding_Speed {
            get {
                return ResourceManager.GetString("Decoding Speed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Post the initial decoding, individual replays can be processed swiftly, ranging from 3-10 seconds based on the game duration..
        /// </summary>
        public static string Decoding_Speed_detail {
            get {
                return ResourceManager.GetString("Decoding Speed detail", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Getting started.
        /// </summary>
        public static string Getting_started {
            get {
                return ResourceManager.GetString("Getting started", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Optimizing Decoding.
        /// </summary>
        public static string Optimizing_Decoding {
            get {
                return ResourceManager.GetString("Optimizing Decoding", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You can enhance decoding speed by configuring the number of CPU cores in the &quot;Settings&quot; screen. Note that during initial decoding, these cores will be heavily utilized..
        /// </summary>
        public static string Optimizing_Decoding_detail {
            get {
                return ResourceManager.GetString("Optimizing Decoding detail", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Pause and Resume Functionality.
        /// </summary>
        public static string Pause_and_Resume_Functionality {
            get {
                return ResourceManager.GetString("Pause and Resume Functionality", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Decoding can be paused at any time, and the app will resume from the last position upon restarting. .
        /// </summary>
        public static string Pause_and_Resume_Functionality_detail {
            get {
                return ResourceManager.GetString("Pause and Resume Functionality detail", resourceCulture);
            }
        }
    }
}
