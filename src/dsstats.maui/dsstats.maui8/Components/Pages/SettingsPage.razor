@page "/settings"

@using CommunityToolkit.Maui.Storage;
@using Microsoft.Extensions.Localization
@using dsstats.localization
@using dsstats.maui8.Services;
@using dsstats.shared.Interfaces
@inject ConfigService configService
@inject IFolderPicker folderPicker
@inject IFilePicker filePicker
@inject NavigationManager NavigationManager
@inject IToastService toastService
@inject BackupService backupService
@inject IStringLocalizer<DsstatsLoc> Loc;
@inject IRemoteToggleService remoteToggleService
@implements IDisposable

<PageTitle>Config</PageTitle>

<div class="mt-3">
    <EditForm EditContext="editContext">
        <div>
            <div class="d-inline-block p-2 bgchart border rounded">
                <div class="form-check form-switch">
                    <label class="form-check-label">
                        @Loc["Upload Replays to {0}", "dsstats.pax77.org"] <a href="https://dsstats.pax77.org">Link</a>
                        <InputCheckbox class="form-check-input" @bind-Value="options.UploadCredential" />
                    </label>
                </div>
                <div class="form-check form-switch">
                    <label class="form-check-label">
                        @Loc["Auto decode - detect new replays and start decoding after each game"]
                        <InputCheckbox class="form-check-input" @bind-Value="options.AutoDecode" />
                    </label>
                </div>
                <div class="form-check form-switch">
                    <label class="form-check-label">
                        @Loc["Check for updates on App start"]
                        <InputCheckbox class="form-check-input" @bind-Value="options.CheckForUpdates" />
                    </label>
                </div>
                <label class="col-form-label">
                    <InputNumber class="form-control" @bind-Value="options.CPUCores" style="max-width: 150px;"></InputNumber>
                    @Loc["CPU Cores - used for decoding new replays (available CPU-Cores: {0})", Environment.ProcessorCount]
                </label>
            </div>
        </div>
        <div>
            <div class="d-inline-block p-2 bgchart border rounded mt-2">
                <div class="table-responsive tableFixHead">
                    <table class="tptable table table-sm w-auto">
                        <thead class="user-select-none">
                            <tr>
                                <th colspan="6">@Loc["SC2Profiles (deactivate the profiles that should not be decoded and uploaded)"]</th>
                            </tr>
                            <tr>
                                <th>Name</th>
                                <th>Id</th>
                                <th>Realm</th>
                                <th>Region</th>
                                <th>Folder</th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody class="text-nowrap">
                            @foreach (var profile in profiles)
                            {
                                bool ignore = options.IgnoreProfiles.Contains(profile);
                                <tr class="@(ignore ? "table-danger" : "")" @onclick="e => DeOrActivateProfile(profile, ignore)">
                                    <td><span class="text-warning fw-bold d-block">@profile.Name</span></td>
                                    <td>@profile.PlayerId.ToonId</td>
                                    <td>@profile.PlayerId.RealmId</td>
                                    <td>@profile.PlayerId.RegionId</td>
                                    <td>@profile.Folder</td>
                                    <td>
                                        <button type="button" class="@(ignore ? "btn btn-sm btn-success" : "btn btn-sm btn-outline-danger")"
                                            @onclick:stopPropagation @onclick="e => DeOrActivateProfile(profile, ignore)">
                                            @(ignore ? Loc["Activate"] : Loc["Deactivate"])
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
        <div>
            <div class="d-inline-block p-2 bgchart border rounded mt-2">
                <div class="table-responsive tableFixhead">
                    <table class="tptable table table-sm w-auto">
                        <thead>
                            <tr>
                                <th>@Loc["Custom folders with replays to be decoded and uploaded"]</th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var folder in options.CustomFolders)
                            {
                                <tr>
                                    <td><span class="text-warning">@folder</span></td>
                                    <td><span class="bi bi-x-lg text-danger pointer" @onclick="e => RemoveFolder(folder)"></span></td>
                                </tr>
                            }
                        </tbody>
                        <tfoot>
                            <tr>
                                <td colspan="2">
                                    <button type="button" class="btn btn-sm btn-primary" @onclick="e => PickFolder()">@Loc["Add Folder"]</button>
                                </td>
                            </tr>
                        </tfoot>
                    </table>
                </div>
            </div>
        </div>
        <div>
            <div class="d-inline-block p-2 bgchart border rounded mt-2">
                <label class="col-form-label">
                    @Loc["Replay Start Name"]
                    <InputText class="form-control" style="max-width: 400px;" @bind-Value="options.ReplayStartName"></InputText>
                    <small>@Loc["Replay Start Name desc"]</small>
                </label>
            </div>
        </div>
        @if (options.IgnoreReplays.Count > 0)
        {
            <div>
                <div class="d-inline-block p-2 bgchart border rounded mt-2">
                    <h4>@Loc["Replays on Ignore list (skipped during decoding and uploading)"]</h4>
                    <div class="tableFixHead table-responsive" style="max-height: 600px; overflow: auto;">
                        <table class="tptable table table-sm w-auto">
                            <thead>
                                <tr>
                                    <th>Replay</th>
                                    <th></th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var replayPath in options.IgnoreReplays)
                                {
                                    <tr>
                                        <td>@replayPath</td>
                                        <td>
                                            <button type="button" class="btn btn-sm btn-outline-warning"
                                                @onclick="e => RemoveIgnoreReplay(replayPath)">
                                                @Loc["UnIgnore"]
                                            </button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                    <div>
                        <button type="button" class="btn btn-outline-warning"
                                @onclick="RemoveAllIgnoreReplays">
                            @Loc["Reset Ignorelist"]
                        </button>
                    </div>
                </div>
            </div>
        }
    </EditForm>
</div>

<div>
    <div class="d-inline-block p-2 bgchart border rounded mt-2">
        <label class="col-form-label">
            @Loc["App folder"]
            <input type="text" style="min-width: 800px;" class="form-control" disabled value="@Path.GetDirectoryName(ConfigService.ConfigFile)" />
        </label>
    </div>
</div>
<div class="sticky-bottom mt-2 mb-4">
    <div class="row">
        <div class="col-auto">
            <div class="btn-group">
                <button type="button" class="btn btn-success" @onclick="SaveSettings">@Loc["Save"]</button>
                <button type="button" class="btn btn-warning" @onclick="Undo">@Loc["Undo"]</button>
                <button type="button" class="btn btn-danger" @onclick="HardReset">@Loc["Reset"]</button>
            </div>
        </div>
        <div class="col-auto">
            <div class="btn-group">
                <button type="button" class="btn btn-primary" @onclick="Backup">@Loc["Backup"]</button>
                <button type="button" class="btn btn-dark" @onclick="Restore">@Loc["Restore"]</button>
            </div>
        </div>
        <div class="col-auto">
            @if (isLoading)
            {
                <div class="spinner-border spinner-border-sm text-danger" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            }
        </div>
    </div>
</div>


@code {
    private AppOptions options = null!;
    EditContext editContext = null!;
    private bool hasChanges;
    private string addName = string.Empty;
    bool isLoading;

    List<Sc2Profile> profiles = new();

    protected override void OnInitialized()
    {
        options = configService.AppOptions with { };
        profiles = configService.AppOptions.Sc2Profiles.OrderBy(o => o.Name).ToList();
        editContext = new(options);
        editContext.OnFieldChanged += FieldChanged;
        NavigationManager.LocationChanged += LocationChanged;
        remoteToggleService.CultureChanged += CultureChanged;
    }

    private void FieldChanged(object? sender, FieldChangedEventArgs e)
    {
        if (e.FieldIdentifier.FieldName == nameof(AppOptions.CPUCores)
            && options.CPUCores > Environment.ProcessorCount)
        {
            options.CPUCores = Environment.ProcessorCount;
        }
        hasChanges = true;
    }

    private async void LocationChanged(object? sender, LocationChangedEventArgs e)
    {
        if (!hasChanges)
        {
            return;
        }

        if (Application.Current != null && Application.Current.MainPage != null)
        {
            bool answer = await Application.Current.MainPage
                .DisplayAlert(Loc["Setting changes not saved!"],
                    Loc["Would you like to save the changes, now?"], Loc["Yes"], Loc["No"]);
            if (answer)
            {
                SaveSettings();
            }
        }
    }

    private void CultureChanged(object? sender, EventArgs e)
    {
        InvokeAsync(() => StateHasChanged());
    }

    private async Task PickFolder(CancellationToken cancellationToken = default)
    {
        var result = await folderPicker.PickAsync(cancellationToken);
        if (result.IsSuccessful)
        {
            options.CustomFolders.Add(result.Folder.Path);
            await InvokeAsync(() => StateHasChanged());
            hasChanges = true;
        }
        else
        {

        }
    }

    private void RemoveFolder(string folder)
    {
        options.CustomFolders.Remove(folder);
        hasChanges = true;
    }

    private void DeOrActivateProfile(Sc2Profile profile, bool ignore)
    {
        if (ignore)
        {
            options.IgnoreProfiles.Remove(profile);
        }
        else
        {
            options.IgnoreProfiles.Add(profile);
        }
        hasChanges = true;
    }

    private void RemoveIgnoreReplay(string replayPath)
    {
        configService.RemoveReplaysFromIgnoreList([replayPath]);
        options.IgnoreReplays.Remove(replayPath);
    }

    private void RemoveAllIgnoreReplays()
    {
        configService.RemoveReplaysFromIgnoreList(options.IgnoreReplays);
        options.IgnoreReplays.Clear();
    }

    private void Undo()
    {
        options = configService.AppOptions with { };
        hasChanges = false;
        toastService.ShowSuccess(Loc["Settings changes undone."]);
    }

    private void HardReset()
    {
        configService.InitOptions();
        options = configService.AppOptions with { };
        hasChanges = true;
        toastService.ShowWarning(Loc["Settings reset to default."]);
    }


    private void SaveSettings()
    {
        configService.UpdateConfig(options);
        hasChanges = false;
        toastService.ShowSuccess(Loc["Settings saved."]);
    }

    public async Task Backup()
    {
        isLoading = true;
        await InvokeAsync(() => StateHasChanged());
        var result = await backupService.Backup();

        if (result == BackupResult.Success)
        {
            toastService.ShowSuccess(Loc["Backup successful."]);
        }
        else if (result == BackupResult.Canceled)
        {
            toastService.ShowInfo(Loc["Backup canceled."]);
        }
        else
        {
            toastService.ShowError(Loc["Backup failed."]);
        }

        isLoading = false;
        await InvokeAsync(() => StateHasChanged());

    }

    public async Task Restore()
    {
        var pickResult = await filePicker.PickAsync(new PickOptions()
        {
            PickerTitle = "Select dsstats backup file",
        });
        if (pickResult is not null)
        {
            var result = await backupService.Restore(pickResult.FullPath);
            if (result == RestoreResult.Success)
            {
                toastService.ShowSuccess(Loc["Backup restore successful."]);
                editContext.OnFieldChanged -= FieldChanged;
                options = configService.SetupConfig() with { };
                configService.UpdateConfig(options);
                editContext = new(options);
                editContext.OnFieldChanged += FieldChanged;
                await InvokeAsync(() => StateHasChanged());
            }
            else if (result == RestoreResult.Canceled)
            {
                toastService.ShowInfo(Loc["Backup restore canceled."]);
            }
            else
            {
                toastService.ShowError(Loc["Backup restore failed."]);
            }
        }
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= LocationChanged;
        editContext.OnFieldChanged -= FieldChanged;
        remoteToggleService.CultureChanged -= CultureChanged;
    }
}
