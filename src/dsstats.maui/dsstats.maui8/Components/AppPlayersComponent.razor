@using System.Collections.Frozen
@using System.Globalization
@using dsstats.maui8.Services
@using dsstats.shared
@inject DsstatsService dsstatsService

<div class="d-flex" style="max-width: 80vw; overflow-x: auto;">
    @if (infos is not null)
    {
        foreach (var info in infos.Take(5))
        {
            var playerId = new PlayerId(info.Key.ToonId, info.Key.RealmId, info.Key.RegionId);
            <div class="card d-inline-block bg-transparent pointer border boder-secondary rounded @(ActivePlayer == playerId ? "border-3 border-primary" : "")"
                 @onclick="e =>RequestPlayer(playerId)" style="min-width: 210px;">
                <div class="card-header bgchart2">
                    <h5 class="text-warning">@info.Key.Name @Data.GetRegionString(info.Key.RegionId)</h5>
                </div>
                <div class="card-body bgchart">
                    <div class="table-responsive tableFixHead">
                        <table class="tptable table table-sm">
                            <thead>
                                <tr>
                                    <th>Type</th>
                                    <th>Pos</th>
                                    <th>Rating</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var rating in info.Value.OrderBy(o => o.Value.RatingType))
                                {
                                    <tr>
                                        <td>@rating.Key</td>
                                        <td>
                                            <span class="text-truncate text-danger"
                                                  style="display: block; width: 40px;">
                                                #@rating.Value.LocalPos
                                            </span>
                                        </td>
                                        <td><span class="text-warning fw-bold">@rating.Value.LocalRating.ToString("N2", CultureInfo.InvariantCulture)</span></td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        }
        @if (infos.Count > 5)
        {
            @if (!showAll)
            {
                <div>
                    <button type="button" class="btn btn-sm btn-outline-light bgchart" @onclick="e => showAll = !showAll">Show all</button>
                </div>
            }
            else
            {
                foreach (var info in infos.Skip(5))
                {
                    var playerId = new PlayerId(info.Key.ToonId, info.Key.RealmId, info.Key.RegionId);
                    <div class="card d-inline-block bg-transparent pointer border rounded @(ActivePlayer == playerId ? "border-3 border-warning" : "")"
                         @onclick="e =>RequestPlayer(playerId)" style="min-width: 210px;">
                        <div class="card-header bgchart2">
                            <h5 class="text-warning">@info.Key.Name @Data.GetRegionString(info.Key.RegionId)</h5>
                        </div>
                        <div class="card-body bgchart">
                            <div class="table-responsive tableFixHead">
                                <table class="tptable table table-sm">
                                    <thead>
                                        <tr>
                                            <th>Type</th>
                                            <th>Pos</th>
                                            <th>Rating</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var rating in info.Value.OrderBy(o => o.Value.RatingType))
                                        {
                                            <tr>
                                                <td>@rating.Key</td>
                                                <td>
                                                    <span class="text-truncate text-danger"
                                                          style="display: block; width: 40px;">
                                                        #@rating.Value.LocalPos
                                                    </span>
                                                </td>
                                                <td><span class="text-warning fw-bold">@rating.Value.LocalRating.ToString("N2", CultureInfo.InvariantCulture)</span></td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                }
                <div>
                    <button type="button" class="btn btn-sm btn-outline-light bgchart" @onclick="e => showAll = !showAll">Hide all</button>
                </div>
            }
        }
    }
</div>


@code {
    [Parameter]
    public EventCallback<PlayerId> OnPlayerRequested { get; set; }

    [Parameter, EditorRequired]
    public PlayerId ActivePlayer { get; set; } = default!;

    FrozenDictionary<RequestNames, Dictionary<RatingType, AppPlayerRatingInfo>>? infos = null;
    bool showAll;

    protected override void OnInitialized()
    {
        _ = GetRatings();
        base.OnInitialized();
    }

    public void UpdatePlayer(PlayerId playerId)
    {
        ActivePlayer = playerId;
        _ = GetRatings();
    }

    private async Task GetRatings()
    {
        infos = await dsstatsService.GetAppPlayers();

        // DEBUG
        // Dictionary<RequestNames, Dictionary<RatingType, AppPlayerRatingInfo>> debugInfos = [];
        // for (int i = 0; i < 20; i++)
        // {
        //     debugInfos.Add(new($"Test{i}", i, 1, 1), new() { { RatingType.Cmdr, new() { RatingType = RatingType.Cmdr, LocalPos = 1, LocalRating = 1000.0 } } });
        // }
        // infos = debugInfos.ToFrozenDictionary();

        await InvokeAsync(() => StateHasChanged());
    }

    private void RequestPlayer(PlayerId playerId)
    {
        ActivePlayer = playerId;
        OnPlayerRequested.InvokeAsync(ActivePlayer);
        StateHasChanged();
    }
}
