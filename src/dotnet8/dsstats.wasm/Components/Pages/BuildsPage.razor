@page "/builds"
@using dsstats.shared
@inject NavigationManager NavigationManager

<PageTitle>dsstats - builds</PageTitle>

<dsstats.razorlib.Builds.BuildsComponent Request="Request" OnRequestChanged="RequestChanged" />

@code {
    [SupplyParameterFromQuery]
    public string? Tp { get; set; }

    [SupplyParameterFromQuery]
    public string? Int { get; set; }

    [SupplyParameterFromQuery]
    public string? Vs { get; set; }

    [SupplyParameterFromQuery]
    public string? Bp { get; set; }

    [SupplyParameterFromQuery]
    public string? From { get; set; }

    [SupplyParameterFromQuery]
    public string? To { get; set; }
    [SupplyParameterFromQuery]
    public string[]? Pls { get; set; }

    BuildRequest Request = new() 
    {
        RatingType = RatingType.Cmdr,
        TimePeriod = TimePeriod.Past90Days,
        Interest = Commander.Abathur,
        Breakpoint = Breakpoint.Min10,
        FromRating = 1600,
        ToRating = 2500
    };

    protected override void OnInitialized()
    {
        SetRequest();
        base.OnInitialized();
    }

    private void SetRequest()
    {
        if (!String.IsNullOrEmpty(Tp) 
            && Enum.TryParse(typeof(TimePeriod), Tp, out var timePeriodObj) 
            && timePeriodObj is TimePeriod timePeriod)
        {
            Request.TimePeriod = timePeriod;
        }

        if (!String.IsNullOrEmpty(Int)
            && Enum.TryParse(typeof(Commander), Int, out object? interestObj)
            && interestObj is Commander interest)
        {
            Request.Interest = interest;
        }

        if (!String.IsNullOrEmpty(Vs)
            && Enum.TryParse(typeof(Commander), Vs, out object? versusObj)
            && versusObj is Commander versus)
        {
            Request.Versus = versus;
        }

        if (!String.IsNullOrEmpty(Bp)
            && Enum.TryParse(typeof(Breakpoint), Bp, out object? bpObj)
            && bpObj is Breakpoint bp)
        {
            Request.Breakpoint = bp;            
        }

        if (!String.IsNullOrEmpty(From)
            && int.TryParse(From, out int from)
            && from % 50 == 0)
        {
            Request.FromRating = from;
        }

        if (!String.IsNullOrEmpty(To)
            && int.TryParse(To, out int to)
            && to % 50 == 0)
        {
            Request.ToRating = to;
        }

        if (Pls is not null)
        {
            foreach (var pl in Pls.Take(5))
            {
                var playerId = Data.GetPlayerId(pl);
                if (playerId is not null)
                {
                    Request.PlayerNames.Add(new("", playerId.ToonId, playerId.RegionId, playerId.RealmId));
                }
            }
        }
    }

    private void RequestChanged(BuildRequest request)
    {
        Dictionary<string, object?> queryDic = new();

        queryDic.Add("Tp", request.TimePeriod.ToString());
        queryDic.Add("Int", request.Interest.ToString());
        queryDic.Add("Vs", request.Versus.ToString());
        queryDic.Add("Bp", request.Breakpoint.ToString());
        if (request.PlayerNames.Count > 0)
        {
            queryDic.Add("Pls", request.PlayerNames
                .Select(s => Data.GetPlayerIdString(new(s.ToonId, s.RealmId, s.RegionId)))
                .ToArray());
            queryDic.Add("From", null);
            queryDic.Add("To", null);
        }
        else
        {
            queryDic.Add("Pls", null);
            queryDic.Add("From", request.FromRating.ToString());
            queryDic.Add("To", request.ToRating.ToString());
        }

        NavigationManager.NavigateTo(
            NavigationManager.GetUriWithQueryParameters(
                new Dictionary<string, object?>(queryDic)
            )
        );
    }
}