@page "/settings"

@using CommunityToolkit.Maui.Storage;
@using dsstats.maui.Services;
@inject ConfigService configService
@inject IFolderPicker folderPicker
@inject NavigationManager NavigationManager
@inject IToastService toastService
@implements IDisposable

<PageTitle>Config</PageTitle>

<div class="mt-3">
    <EditForm EditContext="editContext">
        <div>
            <div class="d-inline-block p-2 bgchart border rounded">
                <div class="form-check form-switch">
                    <label class="form-check-label">
                        Upload Replays to <a href="https://dsstats.pax77.org">https://dsstats.pax77.org</a>
                        <InputCheckbox class="form-check-input" @bind-Value="options.UploadCredential" />
                    </label>
                </div>
                <div class="form-check form-switch">
                    <label class="form-check-label">
                        Auto decode - detect new replays and start decoding after each game
                        <InputCheckbox class="form-check-input" @bind-Value="options.AutoDecode" />
                    </label>
                </div>
                <div class="form-check form-switch">
                    <label class="form-check-label">
                        Check for updates on App start
                        <InputCheckbox class="form-check-input" @bind-Value="options.CheckForUpdates" />
                    </label>
                </div>
                <label class="col-form-label">
                    <InputNumber class="form-control" @bind-Value="options.CPUCores" style="max-width: 150px;"></InputNumber>
                    CPU Cores - used for decoding new replays (available CPU-Cores: @Environment.ProcessorCount)
                </label>
            </div>
        </div>
        <div>
            <div class="d-inline-block p-2 bgchart border rounded mt-2">
                <div class="table-responsive tableFixHead">
                    <table class="tptable table table-sm w-auto">
                        <thead class="user-select-none">
                            <tr>
                                <th colspan="6">SC2Profiles (deactivate to exclude from decoding/uploading)</th>
                            </tr>
                            <tr>
                                <th>Name</th>
                                <th>Id</th>
                                <th>Realm</th>
                                <th>Region</th>
                                <th>Folder</th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody class="text-nowrap">
                            @foreach (var profile in profiles)
                            {
                                bool ignore = options.IgnoreProfiles.Contains(profile);
                                <tr class="@(ignore ? "table-danger" : "")" @onclick="e => DeOrActivateProfile(profile, ignore)">
                                    <td><span class="text-warning fw-bold d-block">@profile.Name</span></td>
                                    <td>@profile.PlayerId.ToonId</td>
                                    <td>@profile.PlayerId.RealmId</td>
                                    <td>@profile.PlayerId.RegionId</td>
                                    <td>@profile.Folder</td>
                                    <td>@(ignore ? "Active" : "Deactivated")</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
        <div>
            <div class="d-inline-block p-2 bgchart border rounded mt-2">
                <div class="table-responsive tableFixhead">
                    <table class="tptable table table-sm w-auto">
                        <thead>
                            <tr>
                                <th>Custom Replay folders to include for decoding/uploading</th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var folder in options.CustomFolders)
                            {
                                <tr>
                                    <td><span class="text-warning">@folder</span></td>
                                    <td><span class="bi bi-x-lg text-danger pointer" @onclick="e => RemoveFolder(folder)"></span></td>
                                </tr>
                            }
                        </tbody>
                        <tfoot>
                            <tr>
                                <td colspan="2">
                                    <button type="button" class="btn btn-sm btn-primary" @onclick="e => PickFolder()">Add Folder</button>
                                </td>
                            </tr>
                        </tfoot>
                    </table>
                </div>
            </div>
        </div>
        <div>
            <div class="d-inline-block p-2 bgchart border rounded mt-2">
                <label class="col-form-label">
                    Replay Start Name
                    <InputText class="form-control" style="max-width: 400px;" @bind-Value="options.ReplayStartName"></InputText>
                    <small>The beginning of the filename of the Direct Strike replays - The default value is "Direct Strike" but might be different depending on your language</small>
                </label>
            </div>
        </div>
    </EditForm>
</div>
<div>
    <div class="d-inline-block p-2 bgchart border rounded mt-2">
        <label class="col-form-label">
            App folder
            <input type="text" style="min-width: 800px;" class="form-control" disabled value="@Path.GetDirectoryName(ConfigService.ConfigFile)" />
        </label>
    </div>
</div>
<div class="sticky-bottom mt-2">
    <div class="btn-group">
        <button type="button" class="btn btn-success" @onclick="SaveSettings">Save</button>
        <button type="button" class="btn btn-warning" @onclick="Undo">Undo</button>
        <button type="button" class="btn btn-danger" @onclick="HardReset">Reset</button>
    </div>
</div>


@code {
    private AppOptions options = null!;
    EditContext editContext = null!;
    private bool hasChanges;
    private string addName = string.Empty;

    List<Sc2Profile> profiles = new();

    protected override void OnInitialized()
    {
        options = configService.AppOptions with { };
        profiles = configService.AppOptions.Sc2Profiles.OrderBy(o => o.Name).ToList();
        editContext = new(options);
        editContext.OnFieldChanged += FieldChanged;
        NavigationManager.LocationChanged += LocationChanged;
    }

    private void FieldChanged(object? sender, FieldChangedEventArgs e)
    {
        if (e.FieldIdentifier.FieldName == nameof(AppOptions.CPUCores)
            && options.CPUCores > Environment.ProcessorCount)
        {
            options.CPUCores = Environment.ProcessorCount;
        }
        hasChanges = true;
    }

    private async void LocationChanged(object? sender, LocationChangedEventArgs e)
    {
        if (!hasChanges)
        {
            return;
        }

        if (Application.Current != null && Application.Current.MainPage != null)
        {
            bool answer = await Application.Current.MainPage.DisplayAlert("Setting changes not saved!", "Would you like to save the changes, now?", "Yes", "No");
            if (answer)
            {
                SaveSettings();
            }
        }
    }

    private async Task PickFolder(CancellationToken cancellationToken = default)
    {
        var result = await folderPicker.PickAsync(cancellationToken);
        if (result.IsSuccessful)
        {
            options.CustomFolders.Add(result.Folder.Path);
            await InvokeAsync(() => StateHasChanged());
            hasChanges = true;
        }
        else
        {

        }
    }

    private void RemoveFolder(string folder)
    {
        options.CustomFolders.Remove(folder);
        hasChanges = true;
    }

    private void DeOrActivateProfile(Sc2Profile profile, bool ignore)
    {
        if (ignore)
        {
            options.IgnoreProfiles.Remove(profile);
        }
        else
        {
            options.IgnoreProfiles.Add(profile);
        }
        hasChanges = true;
    }

    private void Undo()
    {
        options = configService.AppOptions with { };
        hasChanges = false;
        toastService.ShowSuccess("Settings changes undone.");
    }

    private void HardReset()
    {
        configService.InitOptions();
        options = configService.AppOptions with { };
        hasChanges = true;
        toastService.ShowWarning("Settings reset to default");
    }


    private void SaveSettings()
    {
        configService.UpdateConfig(options);
        hasChanges = false;
        toastService.ShowSuccess("Settings saved.");
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= LocationChanged;
        editContext.OnFieldChanged -= FieldChanged;
    }
}
