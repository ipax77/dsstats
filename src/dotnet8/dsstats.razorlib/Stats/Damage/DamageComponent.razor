@using Microsoft.JSInterop;
@using System.Globalization;
@using dsstats.shared;
@using dsstats.shared.Interfaces;
@inherits StatsComponent
@inject IDamageService damageService
@inject IJSRuntime JSRuntime
@implements IDisposable

<style>
    .check-label:hover {
        color: white !important;
        background-color: #adb5bd !important;
        border-color: white !important;
    }
</style>

<CascadingValue Value="Request">
    <StatsRequestComponent OnRequestChanged="e => LoadData()" />
    <CascadingValue Value="IsLoading">
        <StatsFilterComponent OnRequestChanged="e => LoadData()" />
    </CascadingValue>
</CascadingValue>

<div class="row mt-2">
    <div class="col-auto">
        <div class="btn-group bgchart" role="group" aria-label="bptogglegroup">
            @foreach (Breakpoint bp in Enum.GetValues(typeof(Breakpoint)))
            {
                @if (bp == Breakpoint.None)
                {
                    continue;
                }
                <input type="radio" class="btn-check" name="bptoggle" id="@($"bp{bp}")"
                    checked="@(Breakpoint == bp)"
                    autocomplete="off" @onchange="e => SetBreakpoint(e, bp)">
                <label class="btn btn-outline-light check-label" for="@($"bp{bp}")">
                    @(bp == Breakpoint.All ? "Game End" : $"{bp}")
                </label>
            }
        </div>
    </div>
    <div class="col-auto">
        <div class="btn-group bgchart" role="group" aria-label="dttogglegroup">
            @foreach (DamageChartType dt in Enum.GetValues(typeof(DamageChartType)))
            {
                <input type="radio" class="btn-check" name="dttoggle" id="@($"dt{dt}")"
                       checked="@(DamageChartType == dt)"
                       autocomplete="off" @onchange="e => SetChartType(e, dt)">
                <label class="btn btn-outline-warning check-label" for="@($"dt{dt}")">@dt</label>
            }
        </div>
    </div>
</div>
@if (response != null)
{
    <div class="border rounded border-secondary bgchart"
         style="min-width: 750px; width: 70vw; height: calc(70vw * @(chartHeightCalc.ToString(CultureInfo.InvariantCulture))); min-height: @(chartMinHeight)px;">
        <DamageChart @ref="damageChart" Request="Request"
                     Breakpoint="Breakpoint"
                     DamageChartType="DamageChartType"
                     Response="response"
                     TableOrders="tableOrders" />
    </div>
}
<div class="mt-2 bgchart d-inline-block p-1" style="max-width: 70vw; min-width: 750px;">
    <p class="text-warning">
        This damage bar chart presents a comprehensive view of the average damage output for various commanders at specific game breakpoints (5 minutes, 10 minutes, 15 minutes, and the game's conclusion) based on the army killed value.
        Each bar represents a commander's damage output, allowing you to assess their performance at different stages of a match.
    </p>
</div>
<div class="mt-2 bgchart d-inline-block p-1" style="max-width: 70vw; min-width: 750px;">
    <p class="text-warning">
        When you select one specific commander, the chart transforms to showcase the damage output of all commanders in comparison to the selected one.
        This interactive feature enables you to directly compare the damage output of different commanders against your chosen commander, helping you identify the relative strengths and weaknesses in damage output.
    </p>
</div>
<div class="mt-2">
    @if (response != null)
    {
        <CascadingValue Value="Request">
            <CascadingValue Value="tableOrders">
                <CascadingValue Value="Breakpoint">
                    <DamageTable @ref="damageTable" Response="response" OnOrderChanged="OrderChanged"></DamageTable>
                </CascadingValue>
            </CascadingValue>
        </CascadingValue>
    }
</div>

@code {
    [Parameter, EditorRequired]
    public Breakpoint Breakpoint { get; set; }

    [Parameter, EditorRequired]
    public DamageChartType DamageChartType { get; set; }

    CancellationTokenSource cts = new();
    SemaphoreSlim ss = new(1, 1);

    DamageResponse? response = null;
    DamageTable? damageTable;
    DamageChart? damageChart;

    TableOrder tableOrder = new()
        {
            Property = nameof(DamageEnt.Commander),
            Ascending = true
        };

    List<TableOrder> tableOrders = new();

    int chartMinHeight = 600;
    double chartHeightCalc = 0.75;
    WindowDimension windowDimension = new();

    protected override void OnInitialized()
    {
        tableOrders.Add(tableOrder);
        SetOrder();
        base.OnInitialized();
    }

    //protected override async Task OnAfterRenderAsync(bool firstRender)
    //{
    //    if (firstRender)
    //    {
    //        windowDimension = await JSRuntime.InvokeAsync<WindowDimension>("getWindowDimension");
    //    }
    //    await base.OnAfterRenderAsync(firstRender);
    //}

    private void SetChartHeight()
    {
        int commanders = Request.RatingType == RatingType.Std || Request.RatingType == RatingType.StdTE ? 3 : 17;
        chartMinHeight = commanders > 3 ? 500 : 300;
        chartHeightCalc = commanders > 3 ? 0.55 : 0.35;
    }

    private void SetOrder()
    {
        tableOrder.Property = DamageChartType switch
        {
            DamageChartType.Damage => nameof(DamageEnt.AvgKills),
            DamageChartType.MVP => nameof(DamageEnt.MvpPercentage),
            DamageChartType.Army => nameof(DamageEnt.ArmyValue),
            _ => nameof(DamageEnt.Commander)
        };
    }

    private void SetChartType(ChangeEventArgs e, DamageChartType chartType)
    {
        DamageChartType = chartType;
        SetOrder();
        damageTable?.Update();
        if (response != null)
        {
            damageChart?.SetupChart(Request, Breakpoint, DamageChartType, response, tableOrders);
        }
        OnRequestChanged.InvokeAsync(Request);
    }

    public override async Task LoadData(bool init = false)
    {
        await ss.WaitAsync();
        try
        {
            SetChartHeight();
            IsLoading = true;
            await InvokeAsync(() => StateHasChanged());
            response = await damageService.GetDamage(Request, cts.Token);

            damageChart?.SetupChart(Request, Breakpoint, DamageChartType, response, tableOrders);
            damageTable?.SetTable(response);

            IsLoading = false;
            await InvokeAsync(() => StateHasChanged());
        }
        finally
        {
            ss.Release();
        }
        await base.LoadData();
    }

    private void OrderChanged()
    {
        if (response != null)
        {
            damageChart?.SetupChart(Request, Breakpoint, DamageChartType, response, tableOrders);
        }
    }

    private void SetBreakpoint(ChangeEventArgs e, Breakpoint breakpoint)
    {
        Breakpoint = breakpoint;
        if (response != null)
        {
            damageChart?.SetupChart(Request, Breakpoint, DamageChartType, response, tableOrders);
        }
        OnRequestChanged.InvokeAsync(Request);
        // damageTable?.Update();
    }

    public void Dispose()
    {
        cts.Cancel();
        cts.Dispose();
        ss.Dispose();
    }
}
