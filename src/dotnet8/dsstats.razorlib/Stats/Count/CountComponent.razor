@using dsstats.razorlib.Services
@using dsstats.shared
@using dsstats.shared.Interfaces
@inherits StatsComponent
@inject ICountService countService

<CascadingValue Value="Request">
    <StatsRequestComponent OnRequestChanged="e => LoadData()" />
    <CascadingValue Value="IsLoading">
        <StatsFilterComponent OnRequestChanged="e => LoadData()" />
    </CascadingValue>
</CascadingValue>

@if (Response is not null)
{
    <div class="mt-2">

        <div class="row">
            <div class="col-auto">
                <div class="card boder-secondary pointer">
                    <div class="card-header bgchart2">
                        <span class="fw-bold">Replays</span>
                    </div>
                    <div class="card-body bgchart" style="padding: 5px !important;">
                        <div class="text-center">
                            <span class="text-warning fw-bold" style="font-size: 1.4rem;">
                                @HelperService.GetBigNumberString(Response.Replays)
                            </span>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-auto">
                <div class="card boder-secondary pointer">
                    <div class="card-header bgchart2">
                        <span class="fw-bold">LeaverReplays</span>
                    </div>
                    <div class="card-body bgchart" style="padding: 5px !important;">
                        <div class="d-flex justify-content-center">
                            <div>
                                <span class="text-danger small">
                                    @HelperService.GetPercentageString(Response.LeaverReplays, Response.Replays)
                                </span>
                            </div>
                            <div class="ms-1">
                                <span class="text-warning fw-bold" style="font-size: 1.4rem;">
                                    @HelperService.GetBigNumberString(Response.LeaverReplays)
                                </span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-auto">
                <div class="card boder-secondary pointer">
                    <div class="card-header bgchart2">
                        <span class="fw-bold">Quits</span>
                    </div>
                    <div class="card-body bgchart" style="padding: 5px !important;">
                        <div class="d-flex justify-content-center">
                            <div>
                                <span class="text-danger small">
                                    @HelperService.GetPercentageString(Response.Quits, Response.Replays)
                                </span>
                            </div>
                            <div class="ms-1">
                                <span class="text-warning fw-bold" style="font-size: 1.4rem;">
                                    @HelperService.GetBigNumberString(Response.Quits)
                                </span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-auto">
                <div class="card boder-secondary pointer">
                    <div class="card-header bgchart2">
                        <span class="fw-bold">∅ Duration</span>
                    </div>
                    <div class="card-body bgchart" style="padding: 5px !important;">
                        <div class="text-center">
                            <span class="text-warning fw-bold" style="font-size: 1.4rem;">
                                @TimeSpan.FromSeconds(Response.Duration).ToString(@"mm\:ss")
                            </span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row mt-2">
        <div class="col-auto">

            <CountTable @ref="countTable" Response="Response" />
        </div>
        <div class="col-auto">
            <div class="border rounded border-secondary bgchart"
                 style="min-width: 400px; width: 40vw; height: 40vw; min-height: 400px;">
                <CountChart @ref="countChart" Response="Response" />
            </div>
        </div>
    </div>
}

@code {
    CountResponse? Response = null;

    CountTable? countTable;
    CountChart? countChart;

    public override async Task LoadData(bool init = false)
    {
        IsLoading = true;
        await InvokeAsync(() => StateHasChanged());
        Response = await countService.GetCount(Request);
        IsLoading = false;
        countTable?.SetTable(Response);
        countChart?.SetupChart(Response);
        await InvokeAsync(() => StateHasChanged());
        await base.LoadData(init);
    }
}
