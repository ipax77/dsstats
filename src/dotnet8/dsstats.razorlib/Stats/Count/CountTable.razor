@using System.Globalization;
@using dsstats.shared;
@using dsstats.razorlib.Services;
@using dsstats.shared.Extensions

<div class="table-responsive tableFixHead">
    <table class="tptable table w-auto">
        <thead>
            <tr>
                <CascadingValue Value="TableOrders">
                    <th class="pointer" @onclick="e => SetOrder(e, nameof(CountEnt.Commander))">
                        <SortArrow Property="@nameof(CountEnt.Commander)">
                            @nameof(WinrateEnt.Commander)
                        </SortArrow>
                    </th>
                    <th class="pointer" @onclick="@(e => SetOrder(e, "Percentage"))">
                        <SortArrow Property="Percentage">
                            %
                        </SortArrow>
                    </th>
                    <th class="pointer" @onclick="@(e => SetOrder(e, nameof(CountEnt.Matchups)))">
                        <SortArrow Property="@nameof(CountEnt.Matchups)">
                            @nameof(CountEnt.Matchups)
                        </SortArrow>
                    </th>
                    <th class="pointer" @onclick="e => SetOrder(e, nameof(CountEnt.Replays))">
                        <SortArrow Property="@nameof(CountEnt.Replays)">
                            @nameof(CountEnt.Replays)
                        </SortArrow>
                    </th>

                </CascadingValue>
            </tr>
        </thead>
        <tbody>
            @foreach (var ent in GetSortedList())
            {
                <tr>
                    <td>
                        <div class="d-flex">
                            <div class="@($"preload-{ent.Commander.ToString().ToLower()}") commander-image"></div>
                            <div><span>@ent.Commander</span></div>
                        </div>
                    </td>
                    <td>@HelperService.GetPercentageString(ent.Matchups, sum)</td>
                    <td>@ent.Matchups</td>
                    <td>@ent.Replays</td>
                </tr>
            }
        </tbody>
    </table>
</div>


@code {
    [Parameter, EditorRequired]
    public CountResponse Response { get; set; } = null!;

    List<TableOrder> TableOrders = new()
    {
        new() { Property = nameof(CountEnt.Replays) }
    };

    int sum = 0;
    protected override void OnInitialized()
    {
        sum = Response.CountEnts.Sum(s => s.Matchups);
        base.OnInitialized();
    }

    public void SetTable(CountResponse response)
    {
        Response = response;
        sum = Response.CountEnts.Sum(s => s.Matchups);
        StateHasChanged();
    }

    private void SetOrder(MouseEventArgs e, string property)
    {
        var tableOrder = TableOrders.FirstOrDefault();
        if (tableOrder == null)
        {
            tableOrder = new()
                {
                    Property = property,
                    Ascending = false
                };
        }
        else
        {
            if (tableOrder.Property == property)
            {
                tableOrder.Ascending = !tableOrder.Ascending;
            }
            else
            {
                tableOrder.Property = property;
                tableOrder.Ascending = false;
            }
        }
    }

    private List<CountEnt> GetSortedList()
    {
        var query = Response.CountEnts.AsQueryable();

        foreach (var order in TableOrders)
        {
            if (order.Property == "Percentage")
            {
                if (order.Ascending)
                {
                    query = query.OrderBy(o => o.Matchups / (double)sum);
                }
                else
                {
                    query = query.OrderByDescending(o => o.Matchups / (double)sum);
                }
            }
            else
            {
                if (order.Ascending)
                {
                    query = query.AppendOrderBy(order.Property);
                }
                else
                {
                    query = query.AppendOrderByDescending(order.Property);
                }
            }
        }
        return query.ToList();
    }
}
