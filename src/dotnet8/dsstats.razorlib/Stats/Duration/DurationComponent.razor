@using Microsoft.JSInterop
@using dsstats.shared
@using dsstats.shared.Interfaces
@inherits StatsComponent
@inject IJSRuntime JSRuntime
@inject IDurationService durationService

<CascadingValue Value="Request">
    <StatsRequestComponent WithoutInterest="true" OnRequestChanged="e => LoadData()" />
    <CascadingValue Value="IsLoading">
        <StatsFilterComponent OnRequestChanged="e => LoadData()" />
    </CascadingValue>
</CascadingValue>

<div class="d-flex mt-2">
    <div class="col-auto">
        <div class="bgchart">
            <CascadingValue Value="CmdrSelects">
                <CmdrCheckSelectComponent @ref="cmdrCheckSelectComponent" Std="@(Request.RatingType == RatingType.Std || Request.RatingType == RatingType.StdTE)" OnCommanderSelected="ChartRequest"></CmdrCheckSelectComponent>
            </CascadingValue>
        </div>
        <div class="mt-2">
            <button type="button" class="btn btn-outline-warning" @onclick="ClearSelects">Clear Chart</button>
        </div>
    </div>
    <div class="col-auto">
        <div class="border rounded border-secondary bgchart"
             style="min-width: 650px; width: 66vw; height: calc(66vw * 0.5); min-height: 275px;">
            <CascadingValue Value="Request">
                @if (Response != null)
                {
                    <DurationChart @ref="durationChart" Response="Response"></DurationChart>
                }
            </CascadingValue>
        </div>
    </div>
</div>
<div class="row mt-2">
    <div class="col-auto">
        <div class="btn-group">
            <button type="button" class="btn btn-sm btn-outline-light" @onclick="ClearChart">Clear Chart</button>
            <button type="button" class="btn btn-sm btn-outline-light" @onclick="ShowChart">Full Chart</button>
        </div>
    </div>
    <div class="col-auto">
        <div class="btn-group ms-2">
            <button type="button" class="btn btn-sm btn-outline-light" @onclick="e => durationChart?.AddAvgLine()"
                    data-bs-toggle="tooltip"
                    data-bs-title="Add average line for selected commanders">
                Add Avg Line
            </button>
            <button type="button" class="btn btn-sm btn-outline-light" @onclick="e => durationChart?.RemoveAvgLine()">Remove Avg Line</button>
        </div>
    </div>
</div>
<div class="mt-2">
    <div class="bgchart d-inline-block p-1" style="max-width: 66vw; min-width: 650px;">
        <p class="text-warning">
            This duration line chart provides valuable insights into the performance of commanders over different game durations.
            It showcases the average rating gain of players who choose each commander, measured in intervals ranging from 5-8 minutes to 32+ minutes.
            By visualizing the strength of specific commanders at various stages of the game, you can determine whether a commander excels in the early game, late game, or at specific points in between.
            This information empowers you to tailor your strategies and adapt your gameplay to maximize your commander's potential at each phase of a match.
        </p>
    </div>
    @if (Response != null)
    {
        <CascadingValue Value="CmdrSelects">
            <DurationTable @ref="durationTable" Response="Response" OnChartRequest="ChartRequest" Request="Request"></DurationTable>
        </CascadingValue>
    }
</div>

@code {
    private DurationResponse? Response = null;
    private CancellationTokenSource cts = new();
    private DurationChart? durationChart;
    private DurationTable? durationTable;
    CmdrCheckSelectComponent? cmdrCheckSelectComponent;

    Dictionary<Commander, bool> CmdrSelects = null!;

    protected override void OnInitialized()
    {
        CmdrSelects = Data.GetCommanders(Data.CmdrGet.All).ToDictionary(k => k, v => false);
        base.OnInitialized();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            JSRuntime.InvokeVoidAsync("enableTooltips");
        }
        base.OnAfterRender(firstRender);
    }

    public override async Task LoadData(bool init = false)
    {
        foreach (var ent in CmdrSelects)
        {
            CmdrSelects[ent.Key] = false;
        }

        IsLoading = true;
        await InvokeAsync(() => StateHasChanged());
        Response = await durationService.GetDuration(Request, cts.Token);
        IsLoading = false;
        await InvokeAsync(() => StateHasChanged());
        durationChart?.SetupChart(Response, Request);
        durationTable?.PrepareData(Response, Request);
        SetCmdrSelects();
        await base.LoadData(init);
    }

    private void SetCmdrSelects()
    {
        if (Request.Interest == Commander.None)
        {
            Request.Interest = Commander.Abathur;
            CmdrSelects[Commander.Abathur] = true;
        }
        else
        {
            CmdrSelects[Request.Interest] = true;
        }
    }

    private void ClearSelects()
    {
        foreach (var ent in CmdrSelects.Keys.ToArray())
        {
            CmdrSelects[ent] = false;
        }
        durationChart?.ClearDatasets();
        OnRequestChanged.InvokeAsync();
    }

    private void RatingTypeChanged(RatingType ratingType)
    {
        if (Response == null)
        {
            return;
        }
        durationChart?.SetupChart(Response, Request);
        durationTable?.PrepareData(Response, Request);
    }

    private void ClearChart()
    {
        durationChart?.ClearDatasets();
        durationTable?.ClearChart();
    }

    private void ShowChart()
    {
        if (Response == null)
        {
            return;
        }
        durationChart?.SetupChart(Response, Request, true);
        durationTable?.SetChart();
    }

    private void ChartRequest(KeyValuePair<Commander, bool> request)
    {
        CmdrSelects[request.Key] = request.Value;
        if (request.Value)
        {
            Request.Interest = request.Key;
            durationChart?.AddDataset(request.Key);
        }
        else
        {
            Request.Interest = Commander.None;
            durationChart?.RemoveDataset(request.Key);
        }
        OnRequestChanged.InvokeAsync();
    }

    public void Dispose()
    {
        cts.Cancel();
        cts.Dispose();
    }
}
