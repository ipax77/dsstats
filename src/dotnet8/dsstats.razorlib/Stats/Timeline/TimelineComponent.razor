@using dsstats.shared;
@using dsstats.shared.Interfaces;
@inherits StatsComponent
@inject ITimelineService timelineService
@implements IDisposable

<CascadingValue Value="Request">
    <StatsRequestComponent WithoutInterest="true" OnRequestChanged="e => LoadData()" />
    <CascadingValue Value="IsLoading">
        <StatsFilterComponent OnRequestChanged="e => LoadData()" />
    </CascadingValue>
</CascadingValue>

<div class="d-flex">
    <div class="col-auto">
        <div class="bgchart">
            <CascadingValue Value="CmdrSelects">
                <CmdrCheckSelectComponent @ref="cmdrCheckSelectComponent" Std="@(Request.RatingType == RatingType.Std || Request.RatingType == RatingType.StdTE)" OnCommanderSelected="CmdrSelected"></CmdrCheckSelectComponent>
            </CascadingValue>
        </div>
    </div>
    <div class="col-auto">
        <div class="border rounded border-secondary bgchart"
             style="min-width: 850px; width: 66vw; height: calc(66vw * 0.5); min-height: 425px;">
            @if (Response != null)
            {
                <TimelineChart @ref="timelineChart" Response="Response" Request="Request"></TimelineChart>
            }
        </div>
    </div>
</div>
<div class="mt-2 button-block">
    <button type="button" class="btn btn-sm btn-outline-light" @onclick="ClearChart">Clear Chart</button>
    <button type="button" class="btn btn-sm btn-outline-light" @onclick="ShowChart">Full Chart</button>
</div>
<div class="mt-2 bgchart d-inline-block p-1" style="max-width: 77vw; min-width: 850px;">
    <span class="text-warning">
        This timeline line chart presents the average rating gain per month, offering a historical perspective on the performance of a specific commander over time.
        Each point on the chart represents the average rating gain for a given month, enabling you to track the commander's development and effectiveness as it evolves over different periods.
        This visual representation helps you assess the commander's long-term performance trends and make informed decisions for your strategy.
    </span>
</div>
<div class="mt-2 bgchart d-inline-block p-1" style="max-width: 77vw; min-width: 850px;">
    <span class="text-warning">
        Below, you'll find a detailed table of commander updates.
        This table highlights balance changes, enhancements, and adjustments made to specific commanders over time.
        By referencing this table, you can identify how each update impacts a commander's abilities and rating gain potential.
        Clicking on a specific update in the table will display an arbitrary line on the timeline chart above, indicating the exact time the update was released.
        This information is valuable for staying up to date with the evolving dynamics of the game and optimizing your commander choices.

    </span>
</div>
<div class="mt-3">
    <DsUpdatesComponent OnChangeClick="@(e => timelineChart?.SetArbitraryLine(e))"></DsUpdatesComponent>
</div>
<div class="mt-2">
    @if (Response != null)
    {
        <CascadingValue Value="CmdrSelects">
            <TimelineTable @ref="timelineTable" Request="Request" Response="Response" OnChartRequest="CmdrSelected"></TimelineTable>
        </CascadingValue>
    }
</div>
@code {
    private TimelineResponse? Response;
    private CancellationTokenSource cts = new();

    private TimelineChart? timelineChart;
    private TimelineTable? timelineTable;

    CmdrCheckSelectComponent? cmdrCheckSelectComponent;

    Dictionary<Commander, bool> CmdrSelects = null!;

    protected override void OnInitialized()
    {
        CmdrSelects = Data.GetCommanders(Data.CmdrGet.All).ToDictionary(k => k, v => false);
        base.OnInitialized();
    }

    public override async Task LoadData(bool init = false)
    {
        foreach (var ent in CmdrSelects)
        {
            CmdrSelects[ent.Key] = false;
        }

        IsLoading = true;
        await InvokeAsync(() => StateHasChanged());
        Response = await timelineService.GetTimeline(Request, cts.Token);
        IsLoading = false;
        await InvokeAsync(() => StateHasChanged());
        await OnRequestChanged.InvokeAsync(Request);
        SetCmdrSelects();
        timelineChart?.SetupChart(Response, Request);
        timelineTable?.PrepareData(Response, Request);
    }

    private void SetCmdrSelects()
    {
        if (Request.Interest == Commander.None)
        {
            Request.Interest = Commander.Abathur;
            CmdrSelects[Commander.Abathur] = true;
        }
        else
        {
            CmdrSelects[Request.Interest] = true;
        }
    }

    private void CmdrSelected(KeyValuePair<Commander, bool> request)
    {
        CmdrSelects[request.Key] = request.Value;
        if (request.Value)
        {
            Request.Interest = request.Key;
            timelineChart?.AddDataset(request.Key);
        }
        else
        {
            Request.Interest = Commander.None;
            timelineChart?.RemoveDataset(request.Key);
        }
        OnRequestChanged.InvokeAsync();
    }

    private void ClearChart()
    {
        foreach (var ent in CmdrSelects)
        {
            CmdrSelects[ent.Key] = false;
        }
        timelineChart?.ClearDatasets();
        timelineTable?.ClearChart();
    }

    private void ShowChart()
    {
        if (Response == null)
        {
            return;
        }
        foreach (var ent in CmdrSelects)
        {
            CmdrSelects[ent.Key] = true;
        }
        timelineChart?.SetupChart(Response, Request, true);
        timelineTable?.SetChart();
    }

    public void Dispose()
    {
        cts.Cancel();
        cts.Dispose();
    }
}
