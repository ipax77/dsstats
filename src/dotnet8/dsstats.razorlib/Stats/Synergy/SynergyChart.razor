@using pax.BlazorChartJs
@using dsstats.shared;

<ChartComponent ChartJsConfig="chartConfig" OnEventTriggered="ChartEventTriggered"></ChartComponent>

@code {
    [Parameter, EditorRequired]
    public SynergyResponse Response { get; set; } = default!;

    [Parameter, EditorRequired]
    public StatsRequest Request { get; set; } = default!;

    ChartJsConfig chartConfig = null!;
    bool chartReady;

    [Parameter, EditorRequired]
    public Dictionary<Commander, bool> CmdrSelects { get; set; } = default!;

    protected override void OnInitialized()
    {
        chartConfig = GetChartConfig();
        base.OnInitialized();
    }

    private void ChartEventTriggered(ChartJsEvent chartJsEvent)
    {
        if (chartJsEvent is ChartJsInitEvent initEvent)
        {
            chartReady = true;
            PrepareData(Request, Response, CmdrSelects);
        }
    }

    public void PrepareData(StatsRequest request, SynergyResponse response, Dictionary<Commander, bool> cmdrSelects)
    {
        CmdrSelects = cmdrSelects;

        if (!chartReady)
        {
            return;
        }

        Request = request;
        Response = response;

        if (chartConfig.Data.Datasets.Any())
        {
            chartConfig.RemoveDatasets(chartConfig.Data.Datasets);
        }

        if (chartConfig.Options?.Plugins?.Title != null)
        {
            chartConfig.Options.Plugins.Title.Text = GetTitle(request);
            chartConfig.UpdateChartOptions();
        }

        SetLabels(request);

        List<ChartJsDataset> datasets = new();
        foreach (var cmdr in cmdrSelects.Where(x => x.Value == true).Select(s => s.Key).ToList())
        {
            datasets.Add(GetDataset(response, cmdr));
        }

        if (datasets.Any())
        {
            chartConfig.AddDatasets(datasets);
        }
        else
        {
            chartConfig.AddDataset(GetDataset(response, Commander.Abathur));
        }
    }

    private IndexableOption<string> GetTitle(StatsRequest request)
    {
        var title = $"Synergy - {GetTimeInfo(request)}";

        List<string> titleList = [title];

        if (request.Filter is not null)
        {
            if (request.Filter.Rating is not null
                && (request.Filter.Rating.FromRating > 0 || request.Filter.Rating.ToRating > 0))
            {
                titleList.Add($"Rating Range {(request.Filter.Rating.FromRating == Data.MinBuildRating ? 0 : request.Filter.Rating.FromRating)} - {(request.Filter.Rating.ToRating == Data.MaxBuildRating ? $"{request.Filter.Rating.ToRating}+" : $"{request.Filter.Rating.ToRating}")}");
            }

            if (request.Filter.Exp2Win is not null
                && (request.Filter.Exp2Win.FromExp2Win > 0 || request.Filter.Exp2Win.ToExp2Win > 0))
            {
                titleList.Add($"Exp2Win Range {request.Filter.Exp2Win.FromExp2Win}% - {request.Filter.Exp2Win.ToExp2Win}%");
            }
        }

        if (titleList.Count == 1)
        {
            return new IndexableOption<string>(titleList[0]);
        }
        else
        {
            return new IndexableOption<string>(titleList);
        }
    }

    private string GetTimeInfo(StatsRequest request)
    {
        if (request.Filter.Time is null)
        {
            return Data.GetTimePeriodLongName(request.TimePeriod);
        }
        else
        {
            return $"{request.Filter.Time.FromDate.ToString("yyyy-MM-dd")} - {request.Filter.Time.ToDate.ToString("yyyy-MM-dd")}";
        }
    }

    private void SetLabels(StatsRequest request)
    {
        List<Commander> cmdrs;
        if (request.RatingType == RatingType.Std || request.RatingType == RatingType.StdTE)
        {
            cmdrs = Data.GetCommanders(Data.CmdrGet.Std);
        }
        else
        {
            cmdrs = Data.GetCommanders(Data.CmdrGet.NoStd);
            cmdrs.Remove(Commander.Zeratul);
        }
        chartConfig.SetLabels(cmdrs.Select(s => s.ToString()).ToList());
    }

    private ChartJsDataset GetDataset(SynergyResponse response, Commander cmdr)
    {
        return new RadarDataset()
        {
            Label = cmdr.ToString(),
            Data = GetData(response, cmdr),
            BackgroundColor = Data.GetBackgroundColor(cmdr),
            BorderColor = Data.CmdrColor[cmdr],
            BorderWidth = 3,
            PointRadius = new IndexableOption<double>(4),
            Fill = true
        };
    }

    private List<object> GetData(SynergyResponse response, Commander cmdr)
    {
        var ents = response.Entities.Where(x => x.Commander == cmdr).OrderBy(o => o.Teammate).ToList();

        List<Commander> cmdrs;
        if ((int)cmdr <= 3)
        {
            cmdrs = Data.GetCommanders(Data.CmdrGet.Std);
        }
        else
        {
            cmdrs = Data.GetCommanders(Data.CmdrGet.NoStd);
            cmdrs.Remove(Commander.Zeratul);
        }

        List<object> data = new();

        foreach (var teammate in cmdrs)
        {
            var ent = ents.FirstOrDefault(f => f.Teammate == teammate);
            if (ent == null)
            {
                data.Add(0);
            }
            else
            {
                data.Add(ent.NormalizedAvgGain);
            }
        }
        return data;
    }

    public void AddRemoveDatasets(Dictionary<Commander, bool> cmdrSelects)
    {
        Dictionary<Commander, RadarDataset> keepDatasets = new();

        foreach (var dataset in chartConfig.Data.Datasets.ToArray())
        {
            if (dataset is RadarDataset radarDataset
                && Enum.TryParse(typeof(Commander), radarDataset.Label, out var cmdrObj)
                && cmdrObj is Commander cmdr)
            {
                if (!cmdrSelects[cmdr])
                {
                    chartConfig.RemoveDataset(radarDataset);
                }
                else
                {
                    keepDatasets[cmdr] = radarDataset;
                }
            }
        }

        List<ChartJsDataset> addDatasets = new();

        foreach (Commander cmdr in cmdrSelects.Where(x => x.Value == true).Select(s => s.Key).ToList())
        {
            if (!keepDatasets.ContainsKey(cmdr))
            {
                addDatasets.Add(GetDataset(Response, cmdr));   
            }
        }

        if (addDatasets.Any())
        {
            chartConfig.AddDatasets(addDatasets);
        }
    }

    private ChartJsConfig GetChartConfig()
    {
        return new()
            {
                Type = ChartType.radar,
                Options = new ChartJsOptions()
                {
                    Responsive = true,
                    MaintainAspectRatio = true,
                    Plugins = new Plugins()
                    {
                        Legend = new Legend()
                        {
                            Position = "right",
                            Labels = new Labels()
                            {
                                Color = "#f2f2f2",
                            }
                        },
                        Title = new Title()
                        {
                            Display = true,
                            Font = new Font()
                            {
                                Size = 20,
                            },
                            Text = new IndexableOption<string>("Synergy"),
                            Color = "#f2f2f2"
                        }
                    },
                    Scales = new ChartJsOptionsScales()
                    {
                        R = new LinearRadialAxis()
                        {
                            AngleLines = new AngleLines()
                            {
                                Display = true,
                                Color = "#f2f2f233"
                            },
                            Grid = new ChartJsGrid()
                            {
                                Display = true,
                                Color = "#f2f2f233"
                            },
                            PointLabels = new PointLabels()
                            {
                                Display = true,
                                Font = new Font()
                                {
                                    Size = 12
                                },
                                Color = "#f2f2f2"
                            },
                            BeginAtZero = true
                        }
                    }
                }
            };
    }
}
