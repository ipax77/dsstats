@page "/stats/winrate"
@using dsstats.razorlib.Stats;
@* @attribute [RenderModeAuto(prerender: true)] *@
@attribute [RenderModeServer(prerender: true)]
@layout StatsLayout

@inject NavigationManager NavigationManager

<PageTitle>dsstats - winrate</PageTitle>

@* <dsstats.razorlib.Stats.Winrate.WinrateComponent Request="Request" OnRequestChanged="SetParameters"/> *@
<dsstats.razorlib.Stats.Winrate.WinrateInComponent Request="Request" OnRequestChanged="SetParameters" />

@code {
    [SupplyParameterFromQuery(Name = "timePeriod")]
    public string? TimePeriod { get; set; }

    [SupplyParameterFromQuery(Name = "ratingType")]
    public string? RatingType { get; set; }

    [SupplyParameterFromQuery(Name = "cmdr")]
    public string? Interest { get; set; }

    [SupplyParameterFromQuery(Name = "combo")]
    public bool? ComboRating { get; set; }

    [SupplyParameterFromForm(Name = "fromRating")]
    public int? FromRating { get; set; }

    [SupplyParameterFromQuery(Name = "toRating")]
    public int? ToRating { get; set; }

    [SupplyParameterFromForm(Name = "fromExp2Win")]
    public int? FromExp2Win { get; set; }

    [SupplyParameterFromQuery(Name = "toExp2Win")]
    public int? ToExp2Win { get; set; }

    shared.WinrateRequest Request = new()
    {
        TimePeriod = shared.TimePeriod.Past90Days,
        RatingType = shared.RatingType.Cmdr,
        WinrateType = shared.WinrateType.AvgGain
    };

    protected override void OnInitialized()
    {
        SetRequest();
        base.OnInitialized();
    }

    private void SetRequest()
    {
        if (TimePeriod is not null
            && Enum.TryParse(typeof(shared.TimePeriod), TimePeriod, out var timePeriodObj)
            && timePeriodObj is shared.TimePeriod timePeriod)
        {
            Request.TimePeriod = timePeriod;
        }

        if (RatingType is not null
            && Enum.TryParse(typeof(shared.RatingType), RatingType, out var RatingTypeObj)
            && RatingTypeObj is shared.RatingType ratingType)
        {
            Request.RatingType = ratingType;
        }

        if (Interest is not null
            && Enum.TryParse(typeof(shared.Commander), Interest, out var commanderObj)
            && commanderObj is shared.Commander commander)
        {
            Request.Interest = commander;
        }

        if (ComboRating is not null)
        {
            Request.ComboRating = ComboRating.Value;
        }

        if (FromRating is not null
            && FromRating % 50 == 0)
        {
            if (Request.Filter.Rating is null)
            {
                Request.Filter.Rating = new();
            }
            Request.Filter.Rating.FromRating = FromRating.Value;
        }

        if (ToRating is not null
            && ToRating % 50 == 0)
        {
            if (Request.Filter.Rating is null)
            {
                Request.Filter.Rating = new();
            }
            Request.Filter.Rating.ToRating = ToRating.Value;
        }

        if (FromExp2Win is not null
            && FromRating % 5 == 0)
        {
            if (Request.Filter.Exp2Win is null)
            {
                Request.Filter.Exp2Win = new();
            }
            Request.Filter.Exp2Win.FromExp2Win = FromExp2Win.Value;
        }

        if (ToExp2Win is not null
            && ToExp2Win % 5 == 0)
        {
            if (Request.Filter.Exp2Win is null)
            {
                Request.Filter.Exp2Win = new();
            }
            Request.Filter.Exp2Win.ToExp2Win = ToExp2Win.Value;
        }
    }

    private void SetParameters()
    {
        Dictionary<string, object?> queryDic = new();

        if (Request.TimePeriod != shared.TimePeriod.Past90Days)
        {
            queryDic.Add("timePeriod", (int)Request.TimePeriod);
        }
        else
        {
            queryDic.Add("timePeriod", null);
        }

        if (Request.RatingType != shared.RatingType.Cmdr)
        {
            queryDic.Add("ratingType", (int)Request.RatingType);
        }
        else
        {
            queryDic.Add("ratingType", null);
        }

        if (Request.Interest != shared.Commander.None)
        {
            queryDic.Add("cmdr", (int)Request.Interest);
        }
        else
        {
            queryDic.Add("cmdr", null);
        }

        if (Request.Filter.Rating?.FromRating != 0)
        {
            queryDic.Add("fromRating", Request.Filter.Rating?.FromRating);
        }
        else
        {
            queryDic.Add("fromRating", null);
        }

        if (Request.Filter.Rating?.ToRating != 0)
        {
            queryDic.Add("toRating", Request.Filter.Rating?.ToRating);
        }
        else
        {
            queryDic.Add("toRating", null);
        }

        if (Request.Filter.Exp2Win?.FromExp2Win != 0)
        {
            queryDic.Add("fromExp2Win", Request.Filter.Exp2Win?.FromExp2Win);
        }
        else
        {
            queryDic.Add("fromExp2Win", null);
        }

        if (Request.Filter.Exp2Win?.ToExp2Win != 0)
        {
            queryDic.Add("toExp2Win", Request.Filter.Exp2Win?.ToExp2Win);
        }
        else
        {
            queryDic.Add("toExp2Win", null);
        }

        if (!Request.ComboRating)
        {
            queryDic.Add("combo", Request.ComboRating);
        }
        else
        {
            queryDic.Add("combo", null);
        }

        NavigationManager.NavigateTo(
            NavigationManager.GetUriWithQueryParameters(
                new Dictionary<string, object?>(queryDic)
            )
        );
    }
}
