@page "/config"

@using CommunityToolkit.Maui.Storage;
@using sc2dsstats.maui.Configuration;
@using sc2dsstats.maui.Services;
@inject ConfigService configService
@inject IFolderPicker folderPicker
@inject NavigationManager NavigationManager
@inject IToastService toastService
@implements IDisposable

<PageTitle>Config</PageTitle>

<div class="mt-3">
    <EditForm EditContext="editContext">
        <div class="form-check form-switch">
            <label class="form-check-label">
                Upload Replays to <a href="https://dsstats.pax77.org">https://dsstats.pax77.org</a>
                <InputCheckbox class="form-check-input" @bind-Value="options.UploadCredential" />
            </label>
        </div>
        <div class="form-check form-switch">
            <label class="form-check-label">
                Auto decode - detect new replays and start decoding after each game
                <InputCheckbox class="form-check-input" @bind-Value="options.AutoDecode" />
            </label>
        </div>
        <div class="form-check form-switch">
            <label class="form-check-label">
                Check for updates on App start
                <InputCheckbox class="form-check-input" @bind-Value="options.CheckForUpdates" />
            </label>
        </div>
        <label class="col-form-label">
            <InputNumber @bind-Value="options.CPUCores" style="max-width: 150px;"></InputNumber>
            CPU Cores - used for decoding new replays (available CPU-Cores: @Environment.ProcessorCount)
        </label>
        <div class="table-responsive mt-3">
            <table class="table table-sm table-dark table-striped w-auto">
                <thead>
                    <tr>
                        <th>Player names - your ingame Starcraft 2 Player name(s) as shown in the loading screen of Direct Strike</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var name in options.PlayerNames)
                    {
                        <tr>
                            <td><span class="text-warning fw-bold">@name</span></td>
                            <td><span class="oi oi-x text-danger pointer" @onclick="e => RemoveName(name)"></span></td>
                        </tr>
                    }
                </tbody>
                <tfoot>
                    <tr>
                        <td colspan="2">
                            <div class="d-flex">
                                <div>
                                    <label class="form-label">
                                        Add name
                                        <input type="text" class="form-control" @bind="@addName" @bind:after="AddName" />
                                    </label>
                                </div>
                            </div>
                        </td>
                    </tr>
                </tfoot>
            </table>
        </div>
        <div class="table-responsive mt-2">
            <table class="table table-sm table-dark table-striped w-auto">
                <thead>
                    <tr>
                        <th>Replay folders - location of the Direct Strike replays</th>
                        <th></th>
                    </tr>
                    <tr>
                        <th>
                            <small>Something like: C:\Users\username\Documents\StarCraft II\Accounts\107095123\2-S2-1-226321\Replays\Multiplayer</small>
                        </th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var folder in options.ReplayFolders)
                    {
                        <tr>
                            <td><span class="text-warning">@folder</span></td>
                            <td><span class="oi oi-x text-danger pointer" @onclick="e => RemoveFolder(folder)"></span></td>
                        </tr>
                    }
                </tbody>
                <tfoot>
                    <tr>
                        <td colspan="2">
                            <button type="button" class="btn btn-sm btn-primary" @onclick="e => PickFolder()">Add Folder</button>
                        </td>
                    </tr>
                </tfoot>
            </table>
        </div>
        <div class="col-10 mt-2">
            <label class="col-form-label d-flex w-100">
                Replay name - The beginning of the filename of the Direct Strike replays - The default value is "Direct Strike" but might be different depending on your language
                <InputText class="w-75 ms-2" @bind-Value="options.ReplayStartName"></InputText>
            </label>
        </div>
    </EditForm>
</div>
<div class="col-10 mt-2">
    <label class="col-form-label d-flex w-100">
        App folder
        <input type="text" class="form-control" disabled value="@Path.GetDirectoryName(ConfigService.ConfigFile)" />
    </label>
</div>
<div class="sticky-bottom mt-2">
    <div class="btn-group">
        <button type="button" class="btn btn-success" @onclick="SaveSettings">Save</button>
        <button type="button" class="btn btn-warning" @onclick="Undo">Undo</button>
        <button type="button" class="btn btn-danger" @onclick="HardReset">Reset</button>
    </div>
</div>


@code {
    private AppConfigOptions options = null!;
    EditContext editContext = null!;
    private bool hasChanges;
    private string addName = string.Empty;

    protected override void OnInitialized()
    {
        options = configService.AppConfigOptions with { };
        editContext = new(options);
        editContext.OnFieldChanged += FieldChanged;
        NavigationManager.LocationChanged += LocationChanged;
    }

    private void FieldChanged(object? sender, FieldChangedEventArgs e)
    {
        if (e.FieldIdentifier.FieldName == nameof(AppConfigOptions.CPUCores)
            && options.CPUCores > Environment.ProcessorCount)
        {
            options.CPUCores = Environment.ProcessorCount;
        }
        hasChanges = true;
    }

    private async void LocationChanged(object? sender, LocationChangedEventArgs e)
    {
        if (!hasChanges)
        {
            return;
        }

        if (Application.Current != null && Application.Current.MainPage != null)
        {
            bool answer = await Application.Current.MainPage.DisplayAlert("Setting changes not saved!", "Would you like to save the changes, now?", "Yes", "No");
            if (answer)
            {
                SaveSettings();
            }
        }
    }

    async Task PickFolder(CancellationToken cancellationToken = default)
    {
        var result = await folderPicker.PickAsync(cancellationToken);
        if (result.IsSuccessful)
        {
            options.ReplayFolders.Add(result.Folder.Path);
            await InvokeAsync(() => StateHasChanged());
            hasChanges = true;
        }
        else
        {

        }
    }

    private void RemoveFolder(string folder)
    {
        options.ReplayFolders.Remove(folder);
        hasChanges = true;
    }

    private void AddName()
    {
        if (addName.Length >= 3
            && !options.PlayerNames.Contains(addName))
        {
            options.PlayerNames.Add(addName);
            hasChanges = true;
        }
        else
        {
            toastService.ShowError("Failed adding name.");
        }
        addName = string.Empty;
        StateHasChanged();
    }

    private void RemoveName(string name)
    {
        options.PlayerNames.Remove(name);
        hasChanges = true;
    }

    private void Undo()
    {
        options = configService.AppConfigOptions with { };
        hasChanges = false;
        toastService.ShowSuccess("Settings changes undone.");
    }

    private void HardReset()
    {
        configService.InitOptions();
        options = configService.AppConfigOptions with { };
        hasChanges = true;
        toastService.ShowWarning("Settings reset to default");
    }


    private void SaveSettings()
    {
        configService.UpdateConfig(options);
        hasChanges = false;
        toastService.ShowSuccess("Settings saved.");
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= LocationChanged;
        editContext.OnFieldChanged -= FieldChanged;
    }
}
