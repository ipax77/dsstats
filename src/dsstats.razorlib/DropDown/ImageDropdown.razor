@typeparam TItem
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime

<div class="dropdown">
    <button class="btn btn-secondary dropdown-toggle" type="button" id="@dropdownId" data-bs-toggle="dropdown" aria-expanded="false">
        @SelectedText
    </button>
    <ul class="dropdown-menu" aria-labelledby="@dropdownId">
        @foreach (var item in Items)
        {
            <li>
                <div class="d-flex dropdown-item" @onclick="e => OnSelectItem(item)">
                    <div class="@GetImageSource(item)" alt="@item?.ToString()" style="width: 30px; height: 30px;"></div>
                    <div class="ms-1">
                        @item?.ToString()
                    </div>
                </div>
            </li>
        }
    </ul>
</div>

@code {
    [Parameter, EditorRequired] public List<TItem> Items { get; set; } = [];
    [Parameter, EditorRequired] public EventCallback<TItem> SelectedItemChanged { get; set; }
    [Parameter, EditorRequired] public Func<TItem, string> GetImageSource { get; set; } = default!;
    [Parameter] public TItem? SelectedItem { get; set; }

    private string SelectedText => SelectedItem?.ToString() ?? "Select";
    private string dropdownId = Guid.NewGuid().ToString();

    private async Task OnSelectItem(TItem item)
    {
        SelectedItem = item;
        await SelectedItemChanged.InvokeAsync(item);
        _ = JSRuntime.InvokeVoidAsync("closeDropdown", dropdownId);
    }
}
