@using Microsoft.AspNetCore.SignalR.Client
@using dsstats.razorlib.Replays
@using dsstats.shared
@using dsstats.shared.Interfaces
@inject HttpClient httpClient
@implements IDisposable

<div class="container">
    <h4>Upload Challenge Replay</h4>

    <p>Upload your tutorial replay here:</p>
    <ChallengeUploadComp Guid="guid" OnDecodeRequested="DecodeRequested" />
    <small class="text-info bgchart2 p-1">By uploading replays you agree, that the replay data can be used for player and commander stats on this website.</small>

    <div>
        @if (decoding)
        {
            <div class="d-flex">
                <div class="spinner-border spinner-border-sm text-danger" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <div class="ms-2">
                    Queue position: @queueCount
                </div>
            </div>
        }
        @if (responses.Count > 0)
        {
            <div class="mt-2">
                @foreach (var response in responses)
                {
                    @if (!string.IsNullOrEmpty(response.Error))
                    {
                        <p class="text-danger">Error: @response.Error</p>
                    } else
                    {
                        <p class="text-success">@response.GameTime.ToShortDateString() Victory in: @TimeSpan.FromSeconds(@response.TimeTillVictory).ToString(@"hh\:mm\:ss")</p>
                    }
                }
            </div>
        }
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <p class="text-danger">
                @errorMessage
            </p>
        }
    </div>
</div>

@code {
    Guid guid = Guid.NewGuid();

    private HubConnection? hubConnection;
    private bool isConnected => hubConnection?.State == HubConnectionState.Connected;
    private string errorMessage = string.Empty;
    private bool decoding = false;
    private List<ChallengeResponse> responses = [];
    private CancellationTokenSource cts = new();
    private int queueCount = 0;

    protected override void OnInitialized()
    {
        var uri = httpClient.BaseAddress ?? new Uri("https://dsstats.pax77.org");
        uri = new Uri(uri, "/hubs/upload");

        hubConnection = new HubConnectionBuilder()
            .WithUrl(uri)
            .Build();

        hubConnection.On<string>("DecodeFailed", (error) =>
        {
            errorMessage = error;
            decoding = false;
            InvokeAsync(() => StateHasChanged());
        });

        hubConnection.On<List<ChallengeResponse>>("NewChallengeResponses", (challengeResponses) =>
        {
            responses = challengeResponses;
            decoding = false;
            InvokeAsync(() => StateHasChanged());
        });

        base.OnInitialized();
    }

    private async void DecodeRequested(int count)
    {
        if (count < 0)
        {
            errorMessage = "Upload failed.";
            await InvokeAsync(() => StateHasChanged());
            return;
        }

        queueCount = count;
        decoding = true;
        responses.Clear();
        await InvokeAsync(() => StateHasChanged());
        if (hubConnection is not null && !isConnected)
        {
            await hubConnection.StartAsync();
        }
        if (hubConnection is not null && isConnected)
        {
            await hubConnection.SendAsync("DecodeRawRequest", guid);
        }
    }

    public void Dispose()
    {
        cts.Cancel();
        hubConnection?.DisposeAsync();
        cts.Dispose();
    }
}
