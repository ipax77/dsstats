@using Microsoft.AspNetCore.Components.Forms
@using System.Net.Http.Json
@using System.Net.Http.Headers
@using Microsoft.Extensions.Logging
@using Microsoft.JSInterop
@inject HttpClient httpClient
@inject IJSRuntime JSRuntime
@inject ILogger<ChallengeUploadComp> logger
@implements IAsyncDisposable

<style>
    .file-drop-zone {
        display: flex;
        width: 300px;
        border: 3px dotted #fb275d;
        align-items: center;
        margin-bottom: 2px;
    }

    .hover {
        border-style: solid;
        background-color: #00ca71;
    }

    ::deep input[type=file] {
        width: 100%;
        padding: 20px;
    }
</style>

<div @ref="fileDropContainer" class="file-drop-zone @hoverClass" @ondragenter="OnDragEnter" @ondragleave="OnDragLeave" @ondragover="OnDragEnter"
     dropzone="all">
    <InputFile @ref="inputFile" class="form-control" OnChange="OnInputFileChange" />
</div>

@code {
    [Parameter, EditorRequired]
    public Guid Guid { get; set; }

    [Parameter]
    public EventCallback<int> OnDecodeRequested { get; set; }

    private int maxAllowedFiles = 1;
    private bool shouldRender;
    string hoverClass = string.Empty;

    InputFile? inputFile;
    ElementReference? fileDropContainer;

    IJSObjectReference? _filePasteModule;
    IJSObjectReference? _filePasteFunctionReference;

    protected override bool ShouldRender() => shouldRender;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _filePasteModule = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./_content/dsstats.razorlib/js/filePaste.js");
            _filePasteFunctionReference = await _filePasteModule.InvokeAsync<IJSObjectReference>("initializeFilePaste", fileDropContainer, inputFile?.Element);
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        shouldRender = false;
        long maxFileSize = 1024 * 1024 * 3;
        var upload = false;

        using var content = new MultipartFormDataContent();

        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {
            try
            {
                var fileContent =
                    new StreamContent(file.OpenReadStream(maxFileSize));

                fileContent.Headers.ContentType =
                    new MediaTypeHeaderValue("application/octet-stream");

                content.Add(
                    content: fileContent,
                    name: "\"files\"",
                    fileName: file.Name);

                upload = true;
            }
            catch (Exception ex)
            {
                logger.LogError("failed uploading files: {error}", ex.Message);
            }
        }

        if (upload)
        {
            try
            {
                httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("DS8upload77");
                var response = await httpClient.PostAsync($"/api8/v1/upload/uploadchallengereplays/{Guid}", content);
                response.EnsureSuccessStatusCode();
                await OnDecodeRequested.InvokeAsync(0);
            }
            catch (Exception ex)
            {
                logger.LogError("failed uploading replays: {error}", ex.Message);
            }
        }

        shouldRender = true;
    }

    void OnDragEnter(DragEventArgs e) => hoverClass = "hover";
    void OnDragLeave(DragEventArgs e) => hoverClass = string.Empty;

    public async ValueTask DisposeAsync()
    {
        if (_filePasteFunctionReference != null)
        {
            await _filePasteFunctionReference.InvokeVoidAsync("dispose");
            await _filePasteFunctionReference.DisposeAsync();
        }
        if (_filePasteModule != null)
        {
            await _filePasteModule.DisposeAsync();
        }
    }
}
