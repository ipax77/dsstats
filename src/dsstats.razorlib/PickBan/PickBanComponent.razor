@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.JSInterop
@using dsstats.shared
@inject HttpClient httpClient
@inject NavigationManager NavigationManager
@implements IAsyncDisposable

<div class="container">
    <div class="bgchart2 text-warning p-2 rounded d-inline-block">
        <h3>Pick Ban Helper @pbSetting?.ServerState.PickBanMode</h3>
    </div>
    <div class="card" style="width: 42rem;">
        <div class="card-header bgchart2">
            <h4 class="text-warning">
                Copy the Url and send it to the opposing team captain
            </h4>
        </div>
        <div class="card-body bgchart">
            <div class="d-flex">
                <input class="form-text" id="input" type="text" value="@NavigationManager.Uri" style="min-width: 600px;" />
            </div>
        </div>
        <div class="card-footer bgchart2">
            <div class="d-flex">
                <small class="text-white-50">This Page will be available until the next Server reboot.</small>
                <small class="ms-auto">Visitors: @pbSetting?.ServerState.Visitors</small>
            </div>
        </div>
    </div>

    @if (editContext == null || pbSetting == null || !isConnected
    || ((!pbSetting.PicksReady || !pbSetting.BansReady) && pbSetting.ServerState.Visitors <= 1))
    {

        <div class="bgchart2 p-2 text-warning d-inline-block rounded">
            <div class="spinner-border spinner-border-sm text-danger" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            @if (isConnected)
            {
                <p>Waiting for others to join ...</p>
            }
            else
            {
                <p>Disconnected</p>
                <button type="button" class="btn btn-sm btn-outline-warning" @onclick="TryReconnect">Reconnect</button>
            }
        </div>
    }
    else
    {
        <div id="pbresult" class="bgchart p-3 border rounded mt-2" style="width: 600px;">
            <EditForm EditContext="editContext" FormName="pickbanform">
                <CascadingValue Value="editContext">
                    <CascadingValue Value="pbSetting">
                        @if (pbSetting.ClientState.Bans.Count > 0)
                        {
                            <h4>Bans</h4>
                            <div class="d-flex justify-content-evenly">
                                <div class="col-sm-4 mt-2">
                                    <h5>Team1</h5>
                                    @for (int i = 0; i < pbSetting.ClientState.Bans.Count / 2; i++)
                                    {
                                        var clientBan = pbSetting.ClientState.Bans[i];
                                        <div class="mt-2">
                                            <BanComponent ClientBan="clientBan" OnLocked="Ban" />
                                        </div>
                                    }
                                </div>
                                <div style="border-left: 6px solid darkred;">
                                </div>
                                <div class="col-sm-4">
                                    <h5>Team2</h5>
                                    @for (int i = pbSetting.ClientState.Bans.Count / 2; i < pbSetting.ClientState.Bans.Count; i++)
                                    {
                                        var clientBan = pbSetting.ClientState.Bans[i];
                                        <div class="mt-2">
                                            <BanComponent ClientBan="clientBan" OnLocked="Ban" />
                                        </div>
                                    }
                                </div>
                            </div>
                        }
                        @if (pbSetting.ClientState.Picks.Count > 0
                            && pbSetting.BansReady)
                        {
                            <h4 class="mt-2">Picks</h4>
                            <div class="d-flex justify-content-evenly">
                                <div class="col-sm-4">
                                    <h5>Team1</h5>
                                    @for (int i = 0; i < pbSetting.ClientState.Picks.Count / 2; i++)
                                    {
                                        var clientPick = pbSetting.ClientState.Picks[i];
                                        <div class="d-flex mt-1">
                                            <div class="col-sm-1">
                                                @GetPickTeamPos(clientPick)
                                            </div>
                                            @if (pbSetting.ServerState.PickBanMode == PickBanMode.Name)
                                            {
                                                <PickNameComponent ClientPick="clientPick" OnLocked="Pick" />
                                            }
                                            else
                                            {
                                                <PickComponent ClientPick="clientPick" OnLocked="Pick" />
                                            }
                                        </div>
                                    }
                                </div>
                                <div style="border-left: 6px solid darkred;">
                                </div>
                                <div class="col-sm-4">
                                    <h5>Team2</h5>
                                    @for (int i = pbSetting.ClientState.Picks.Count / 2; i < pbSetting.ClientState.Picks.Count; i++)
                                    {
                                        var clientPick = pbSetting.ClientState.Picks[i];
                                        <div class="d-flex mt-1">
                                            <div class="col-sm-1">
                                                @GetPickTeamPos(clientPick)
                                            </div>
                                            @if (pbSetting.ServerState.PickBanMode == PickBanMode.Name)
                                            {
                                                <PickNameComponent ClientPick="clientPick" OnLocked="Pick" />
                                            }
                                            else
                                            {
                                                <PickComponent ClientPick="clientPick" OnLocked="Pick" />
                                            }
                                        </div>
                                    }
                                </div>
                            </div>
                        }
                    </CascadingValue>
                </CascadingValue>
            </EditForm>
        </div>
        @if (pbSetting.PicksReady && pbSetting.BansReady)
        {
            <div class="ms-1">
                <p class="text-warning">PickBan successfully completed.</p>
            </div>
        }
    }
</div>

@code {
    [Parameter, EditorRequired]
    public Guid Guid { get; set; }

    [Parameter, EditorRequired]
    public PickBanMode PickBanMode { get; set; }

    private HubConnection? hubConnection;
    private bool isConnected => hubConnection?.State == HubConnectionState.Connected;
    private object lockobject = new();

    PickBanSetting? pbSetting = null;
    EditContext? editContext = null;

    private Lazy<Task<IJSObjectReference>>? moduleTask;

    protected override async Task OnInitializedAsync()
    {
        var uri = httpClient.BaseAddress ?? new Uri("https://dsstats.pax77.org");
        uri = new Uri(uri, "/hubs/pickban2");
        hubConnection = new HubConnectionBuilder()
            .WithUrl(uri)
            .Build();

        hubConnection.On<int>("Visitors", (count) =>
        {
            if (pbSetting?.ServerState != null)
            {
                pbSetting.ServerState.Visitors = count;
                InvokeAsync(() => StateHasChanged());
            }
        });

        hubConnection.On<PickBanStateDto>("State", (state) =>
        {
            if (pbSetting == null)
            {
                pbSetting = new PickBanSetting(Guid, state.PickBanMode, state);
                editContext = new(pbSetting.ClientState);
                editContext.OnFieldChanged += FieldChanged;
            }
            else
            {
                pbSetting.ServerState = state;
            }
            InvokeAsync(() => StateHasChanged());
        });

        hubConnection.On<List<PickBan>>("Bans", (bans) =>
        {
            pbSetting?.ServerBans(bans);
            InvokeAsync(() => StateHasChanged());
        });

        hubConnection.On<List<PickBan>>("Picks", (picks) =>
        {
            pbSetting?.ServerPicks(picks);
            InvokeAsync(() => StateHasChanged());
        });

        await hubConnection.StartAsync();
        if (isConnected)
        {
            if (PickBanMode == PickBanMode.None)
            {
                await hubConnection.SendAsync("JoinPickBan", Guid);
            }
            else
            {
                await hubConnection.SendAsync("CreatePickBan", Guid, PickBanMode);
            }
        }
        await base.OnInitializedAsync();
    }

    private void FieldChanged(object? sender, FieldChangedEventArgs e)
    {
        if (true)
        {

        }
    }

    private async Task Ban(PickBan pickBan)
    {
        if (hubConnection != null && isConnected)
        {
            await hubConnection.SendAsync("SetBan", pickBan);
        }
    }

    private async Task Pick(PickBan pickBan)
    {
        if (hubConnection != null && isConnected)
        {
            await hubConnection.SendAsync("SetPick", pickBan);
        }
    }

    private async Task TryReconnect()
    {
        if (hubConnection == null)
        {
            var uri = httpClient.BaseAddress ?? new Uri("https://dsstats.pax77.org");
            uri = new Uri(uri, "/hubs/pickban2");
            hubConnection = new HubConnectionBuilder()
                .WithUrl(uri)
                .Build();
        }

        if (!isConnected)
        {
            await hubConnection.StartAsync();
        }
    }

    private int GetPickTeamPos(PickBan pickBan)
    {
        return pickBan.Slot + 1;
    }

    public async ValueTask DisposeAsync()
    {
        await DisposeAsyncCore();
        GC.SuppressFinalize(this);
    }

    protected virtual async ValueTask DisposeAsyncCore()
    {
        if (hubConnection != null)
        {
            await hubConnection.StopAsync();
            await hubConnection.DisposeAsync();
        }
        if (editContext != null)
        {
            editContext.OnFieldChanged -= FieldChanged;
        }
    }
}
