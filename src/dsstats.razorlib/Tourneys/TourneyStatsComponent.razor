@using dsstats.razorlib.Services
@using dsstats.shared
@using dsstats.shared.Extensions
@using dsstats.shared.Interfaces
@inject ITourneysService tourneysService

<CascadingValue Value="statsRequest">
    <TourneyStatsRequestComponent OnFieldChanged="e => LoadStats(e)"></TourneyStatsRequestComponent>
</CascadingValue>

@if (statsResponse == null)
{
    <div class="spinner-border spinner-border-sm text-info ms-2" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
}
else
{
    <div class="d-flex mt-2 mb-2" style="font-size: 18px;">
        <span class="badge bg-info">Replays @statsResponse.Count</span>
        <span class="badge bg-info ms-3">AvgDuration @TimeSpan.FromSeconds(statsResponse.AvgDuration).ToString(@"mm\:ss")</span>
    </div>
    <div class="tableFixHead">
        <table class="tptable table table-bordered w-auto">
            <colgroup>
                <col class="col-auto">
                <col class="col-auto">
                <col class="col-auto">
                <col class="col-auto">
                <col class="col-auto">
            </colgroup>
            <thead class="user-select-none">
                <CascadingValue Value="Orders">
                    <tr>
                        <th scope="col" class="pointer" @onclick="@(e => SortList(e, "Label"))">
                            <SortArrow Property="Label">
                                Commander
                            </SortArrow>
                        </th>
                        <th scope="col" class="pointer" @onclick="@(e => SortList(e, "Winrate"))">
                            <SortArrow Property="Winrate">
                                Winrate
                            </SortArrow>
                        </th>
                        <th scope="col" class="pointer" @onclick="@(e => SortList(e, "Matchups"))">
                            <SortArrow Property="Matchups">
                                Matchups
                            </SortArrow>
                        </th>
                        <th scope="col" class="pointer" @onclick="@(e => SortList(e, "Wins"))">
                            <SortArrow Property="Wins">
                                Wins
                            </SortArrow>
                        </th>
                        <th scope="col" class="pointer" @onclick="@(e => SortList(e, "Bans"))">
                            <SortArrow Property="Bans">
                                Bans
                            </SortArrow>
                        </th>
                    </tr>
                </CascadingValue>
            </thead>
            <tbody>
                @foreach (var item in GetSortedList())
                {
                    <tr>
                        <td>
                            <div class="d-flex">
                                <div class="@($"preload-{item.Cmdr.ToString().ToLower()}") commander-image"></div>
                                <div><span>@item.Cmdr</span></div>
                            </div>
                        </td>
                        <td>@item.Winrate.ToString("N2") %</td>
                        <td class="text-end">@item.Matchups</td>
                        <td class="text-end">@item.Wins</td>
                        <td>
                            <div class="d-flex justify-content-center" style="width: 90px;">
                                <div>@item.Bans</div>
                                <div class="ms-1">(@(((double)item.Bans * 100.0 / (double)statsResponse.Bans).ToString("N2"))%)</div>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {
    [Parameter]
    [EditorRequired]
    public TourneysStatsRequest statsRequest { get; set; } = null!;

    [Parameter]
    public EventCallback<TourneysStatsRequest> OnRequestChanged { get; set; }

    private TourneysStatsResponse? statsResponse;
    private List<TableOrder> Orders = new List<TableOrder>()
    {
        new TableOrder() { Property = "Winrate", Ascending = false }
    };

    protected override async Task OnInitializedAsync()
    {
        await LoadStats(statsRequest, true);
        await base.OnInitializedAsync();
    }


    private async Task LoadStats(TourneysStatsRequest request, bool isInit = false)
    {
        statsResponse = await tourneysService.GetTourneyStats(request, default);
        if (!isInit)
        {
            await OnRequestChanged.InvokeAsync(request);
        }
        await InvokeAsync(() => StateHasChanged());
    }

    private void SortList(MouseEventArgs e, string property)
    {
        var exOrder = Orders.FirstOrDefault(f => f.Property == property);
        if (e.ShiftKey)
        {
            if (exOrder == null)
            {
                Orders.Add(new TableOrder()
                    {
                        Property = property
                    });
            }
            else
            {
                exOrder.Ascending = !exOrder.Ascending;
            }
        }
        else
        {
            Orders.Clear();
            Orders.Add(new TableOrder()
                {
                    Property = property,
                    Ascending = exOrder == null ? false : !exOrder.Ascending
                });
        }
        StateHasChanged();
    }

    private List<TourneysStatsResponseItem> GetSortedList()
    {
        List<TourneysStatsResponseItem> items = new();

        if (statsResponse != null && statsResponse.Items.Any())
        {
            var itemsQ = statsResponse.Items.AsQueryable();

            foreach (var order in Orders)
            {
                if (order.Ascending)
                {
                    itemsQ = itemsQ.AppendOrderBy(order.Property);
                }
                else
                {
                    itemsQ = itemsQ.AppendOrderByDescending(order.Property);
                }
            }

            items = itemsQ.ToList();
        }

        return items;
    }
}
