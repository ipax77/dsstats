@using Microsoft.AspNetCore.Components.Forms
@using dsstats.razorlib.DropDown
@using dsstats.razorlib.Services
@using dsstats.shared
@using dsstats.shared.Interfaces
@using dsstats.shared.Stats
@inject ITourneysService tourneysService
@implements IDisposable


<div class="container">
    <div>
        <p class="text-warning">
            Select two Commanders and get the stats for every possible third commander as teammate.
        </p>
    </div>
    <div>
        <div class="row">
            <div class="col-auto">
                <label class="form-label">
                    Commander1
                    <ImageDropdown TItem="Commander"
                                   Items="Commanders"
                                   SelectedItem="request.Commander1"
                                   SelectedItemChanged="@(item => request.Commander1 = item)"
                                   GetImageSource="GetCommanderImageSource" />
                </label>
            </div>
            <div class="col-auto">
                <label class="form-label">
                    Commander2
                    <ImageDropdown TItem="Commander"
                                   Items="Commanders"
                                   SelectedItem="request.Commander2"
                                   SelectedItemChanged="@(item => request.Commander2 = item)"
                                   GetImageSource="GetCommanderImageSource" />
                </label>
            </div>
        </div>
        <div class="mt-1">
            <button type="button" class="btn btn-outline-light bgchart" @onclick="LoadData">Request</button>
        </div>
    </div>
    <div class="mt-2">
        @if (isLoading)
        {
            <div class="spinner-border spinner-border-sm text-danger" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        }
        else if (response != null)
        {
            <div class="border rounded p-2 bgchart" style="max-width: 500px;">
                <div>
                    <h4>Winrates for Commanders teamed up with <span class="text-warning">@response.Request.Commander1</span> and <span class="text-warning">@response.Request.Commander2</span></h4>
                </div>
                <div class="tableFixHead table-responsive">
                    <table class="tptable table w-auto">
                        <thead>
                            <tr>
                                <CascadingValue Value="orders">
                                    <th scope="col" class="pointer" @onclick="@(e => SortList(e, "Commander"))">
                                        <SortArrow Property="Commander">
                                            Commander
                                        </SortArrow>
                                    </th>
                                    <th scope="col" class="pointer" @onclick="@(e => SortList(e, "Count"))">
                                        <SortArrow Property="Count">
                                            Count
                                        </SortArrow>
                                    </th>
                                    <th scope="col" class="pointer" @onclick="@(e => SortList(e, "Wins"))">
                                        <SortArrow Property="Wins">
                                            Wins
                                        </SortArrow>
                                    </th>
                                    <th scope="col" class="pointer" @onclick="@(e => SortList(e, "Winrate"))">
                                        <SortArrow Property="Winrate">
                                            Winrate
                                        </SortArrow>
                                    </th>
                                </CascadingValue>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var result in GetOrderedResults())
                            {
                                <tr>
                                    <td>
                                        <div class="d-flex">
                                            <div class="preload-@((result.Commander).ToString().ToLower())" alt="@(result.Commander)" style="width: 30px; height: 30px;"></div>
                                            <div class="ms-1">@result.Commander</div>
                                        </div>
                                    </td>
                                    <td>@result.Count</td>
                                    <td>@result.Wins</td>
                                    <td>
                                        <span class="@(result.Wins < result.Count / 2.0 ? "text-danger" : "text-success")">
                                            @HelperService.GetPercentageString(result.Wins, result.Count)
                                        </span>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        }
    </div>
</div>


@code {
    MatchupRequest request = new()
        {
            TimePeriod = TimePeriod.Last2Years
        };

    List<Commander> Commanders = Data.GetCommanders(Data.CmdrGet.All)
        .Where(cmdr => cmdr != Commander.Protoss && cmdr != Commander.Terran && cmdr != Commander.Zerg)
        .ToList();
    CancellationTokenSource cts = new();
    MatchupResponse? response = null;
    bool isLoading;
    List<TableOrder> orders = [];
    TableOrder order = new() { Property = "Winrate", Ascending = true };

    protected override void OnInitialized()
    {
        orders.Add(order);
        base.OnInitialized();
    }

    private async Task LoadData()
    {
        isLoading = true;
        await InvokeAsync(() => StateHasChanged());
        response = await tourneysService.GetBestTeammate(request, cts.Token);
        isLoading = false;
        await InvokeAsync(() => StateHasChanged());
    }

    private string GetCommanderImageSource(Commander commander)
    {
        return $"preload-{commander.ToString().ToLower()}";
    }

    private void SortList(Microsoft.AspNetCore.Components.Web.MouseEventArgs e, string property)
    {
        if (order.Property == property)
        {
            order.Ascending = !order.Ascending;
        }
        else
        {
            order.Property = property;
            order.Ascending = false;
        }
        StateHasChanged();
    }

    private List<MatchupCmdrResult> GetOrderedResults()
    {
        if (response == null)
        {
            return [];
        }
        if (order.Property == "Winrate")
        {
            if (order.Ascending)
            {
                return response.Results
                    .OrderBy(o => o.Count == 0 ? 0 : o.Count / (double)o.Wins)
                    .ToList();
            }
            else
            {
                return response.Results
                    .OrderByDescending(o => o.Count == 0 ? 0 : o.Count / (double)o.Wins)
                    .ToList();
            }
        }
        else if (order.Property == "Count")
        {
            if (order.Ascending)
            {
                return response.Results.OrderBy(o => o.Count).ToList();
            }
            else
            {
                return response.Results.OrderByDescending(o => o.Count).ToList();
            }
        }
        else if (order.Property == "Wins")
        {
            if (order.Ascending)
            {
                return response.Results.OrderBy(o => o.Wins).ToList();
            }
            else
            {
                return response.Results.OrderByDescending(o => o.Wins).ToList();
            }
        }
        else if (order.Property == "Commander")
        {
            if (order.Ascending)
            {
                return response.Results.OrderBy(o => o.Commander).ToList();
            }
            else
            {
                return response.Results.OrderByDescending(o => o.Commander).ToList();
            }
        }
        return response.Results;
    }

    public void Dispose()
    {
        cts.Cancel();
        cts.Dispose();
    }
}
