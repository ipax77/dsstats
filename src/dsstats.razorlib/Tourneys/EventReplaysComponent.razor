@using Microsoft.AspNetCore.Components.Web.Virtualization
@using Microsoft.Extensions.Logging
@using Microsoft.JSInterop
@using System.Globalization;
@using dsstats.razorlib.Replays
@using dsstats.shared
@using dsstats.shared.Interfaces
@inject ITourneysService tourneysService
@inject IReplaysService replaysService
@inject IJSRuntime JSRuntime
@inject ILogger<EventReplaysComponent> logger
@implements IDisposable

<div class="@(replayDto == null ? "" : "visually-hidden")">
    <CascadingValue Value="replaysRequest">
        <EventReplaysRequestComponent OnFieldChanged="Reload" WithMmrChange="true"></EventReplaysRequestComponent>
    </CascadingValue>
    <div class="d-flex" style="max-width: 850px;">
        <p class="ms-auto">#@ReplaysCount</p>
        <span class="oi oi-reload text-primary pointer ms-2" style="font-size: 1rem;" @onclick="Reload"></span>
        @if (replayLoading)
        {
            <div class="spinner-border spinner-border-sm text-info ms-2" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        }
    </div>
    <div class="table-responsive tableFixHead" style="max-width: 1510px; max-height: 80vh;">
        <table id="replaylist" class="tptable table w-auto">
            <colgroup>
                <col class="col">
                <col class="col">
                <col class="col">
                <col class="col">
                <col class="col">
                <col class="col">
            </colgroup>
            <thead class="user-select-none">
                <CascadingValue Value="replaysRequest.Orders">
                    <tr>
                        <th scope="col" class="pointer" @onclick="@(e => SortList(e, "GameTime"))">
                            <SortArrow Property="GameTime">
                                GameTime
                            </SortArrow>
                        </th>
                        <th scope="col" class="pointer" @onclick="@(e => SortList(e, "Duration"))">
                            <SortArrow Property="Duration">
                                Duration
                            </SortArrow>
                        </th>
                        <th scope="col" class="pointer" @onclick="@(e => SortList(e, "CommandersTeam1"))">
                            <SortArrow Property="CommandersTeam1">
                                Team1
                            </SortArrow>
                        </th>
                        <th scope="col" class="pointer" @onclick="@(e => SortList(e, "CommandersTeam2"))">
                            <SortArrow Property="CommandersTeam2">
                                Team2
                            </SortArrow>
                        </th>
                        <th scope="col" class="pointer" @onclick="@(e => SortList(e, "WinnerTeam"))">
                            <SortArrow Property="WinnerTeam">
                                Winner
                            </SortArrow>
                        </th>
                        <th scope="col" class="pointer" @onclick="@(e => SortList(e, "ReplayEvent.WinnerTeam"))">
                            <SortArrow Property="ReplayEvent.WinnerTeam">
                                Winner Team
                            </SortArrow>
                        </th>
                        <th scope="col" class="pointer" @onclick="@(e => SortList(e, "ReplayEvent.RunnerTeam"))">
                            <SortArrow Property="ReplayEvent.RunnerTeam">
                                Losing Team
                            </SortArrow>
                        </th>
                        <th scope="col" class="pointer" @onclick="@(e => SortList(e, "ReplayEvent.Round"))">
                            <SortArrow Property="ReplayEvent.Round">
                                Group/Round
                            </SortArrow>
                        </th>
                        <th scope="col" class="pointer" @onclick="@(e => SortList(e, "ReplayEvent.Event.Name"))">
                            <SortArrow Property="ReplayEvent.Event.Name">
                                Event
                            </SortArrow>
                        </th>
                    </tr>
                </CascadingValue>
            </thead>
            <tbody>
                @if (ReplaysCount > 0)
                {
                    <Virtualize @ref="virtualizeComponent" Context="replay" ItemsProvider="LoadReplays" ItemSize="47">
                        <ItemContent>
                            <tr height="47px" class="pointer" @onclick="e => ShowReplay(replay.ReplayHash)">
                                <td>@replay.GameTime.ToString(@"yyyy-MM-dd")</td>
                                <td>@TimeSpan.FromSeconds(replay.Duration).ToString(@"hh\:mm\:ss")</td>
                                <td>
                                    <dsstats.razorlib.Replays.ReplayTeam Team="@replay.CommandersTeam1" WinnerTeam="replay.WinnerTeam == 1" />
                                </td>
                                <td>
                                    <dsstats.razorlib.Replays.ReplayTeam Team="@replay.CommandersTeam2" WinnerTeam="replay.WinnerTeam == 2" />
                                </td>
                                <td>
                                    @replay.WinnerTeam
                                </td>
                                <td>
                                    <span class="text-truncate text-success" style="display: block; width: 250px;">@replay.ReplayEvent?.WinnerTeam</span>
                                </td>
                                <td>
                                    <span class="text-truncate text-danger" style="display: block; width: 250px;">@replay.ReplayEvent?.RunnerTeam</span>
                                </td>
                                <td>@replay.ReplayEvent?.Round</td>
                                <td>
                                    <span class="text-truncate" style="display: block; width: 250px;">@replay.ReplayEvent?.Event.Name</span>
                                </td>
                            </tr>
                        </ItemContent>
                        <Placeholder>
                            <tr height="47px"><td colspan="5">Loading ...</td></tr>
                        </Placeholder>
                    </Virtualize>
                }
            </tbody>
        </table>
    </div>
</div>

@if (replayDto is not null)
{
    <ReplayComponent Replay="replayDto" IsCloseable="true" IsScrollable="false" OnCloseRequested="OnReplayClose" />
}

@code {

    private int ReplaysCount = 0;

    [Parameter]
    [EditorRequired]
    public TourneysReplaysRequest replaysRequest { get; set; } = default!;

    [Parameter]
    public bool ShowImages { get; set; } = true;

    [Parameter]
    public EventCallback<TourneysReplaysRequest> OnRequestChanged { get; set; }

    private ReplayDto? replayDto = null;

    private Virtualize<TourneysReplayListDto>? virtualizeComponent;
    SemaphoreSlim semaphoreSlim = new SemaphoreSlim(1, 1);
    CancellationTokenSource cts = new();

    private bool replayLoading;
    private string? lastVisitHash;

    protected override async Task OnInitializedAsync()
    {
        await SetCount(replaysRequest);
    }

    public async Task ReInit(TourneysReplaysRequest reRequest)
    {
        replaysRequest = reRequest;

        replayDto = null;
        await semaphoreSlim.WaitAsync();
        try
        {
            await SetCount(replaysRequest);
            if (virtualizeComponent != null)
            {
                await InvokeAsync(async () =>
               {
                   await virtualizeComponent.RefreshDataAsync();
                   StateHasChanged();
               });
            }
        }
        finally
        {
            semaphoreSlim.Release();
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            JSRuntime.InvokeVoidAsync("enableTooltips");
        }
        base.OnAfterRender(firstRender);
    }

    private async Task Reload()
    {
        await semaphoreSlim.WaitAsync();
        try
        {
            await OnRequestChanged.InvokeAsync(replaysRequest);
            await SetCount(replaysRequest);
            if (virtualizeComponent != null)
            {
                await InvokeAsync(async () =>
               {
                   await virtualizeComponent.RefreshDataAsync();
                   StateHasChanged();
               });
            }
        }
        finally
        {
            semaphoreSlim.Release();
        }
    }

    private async Task SetCount(TourneysReplaysRequest request)
    {
        ReplaysCount = await tourneysService.GetReplaysCount(request, cts.Token);
        await InvokeAsync(() => StateHasChanged());
    }

    private async ValueTask<ItemsProviderResult<TourneysReplayListDto>> LoadReplays(ItemsProviderRequest prRequest)
    {
        replaysRequest.Skip = prRequest.StartIndex;
        replaysRequest.Take = Math.Min(prRequest.Count, ReplaysCount - prRequest.StartIndex);

        var replays = await tourneysService.GetReplays(replaysRequest, prRequest.CancellationToken);

        return new ItemsProviderResult<TourneysReplayListDto>(replays, ReplaysCount);
    }

    private async Task SortList(MouseEventArgs e, string property)
    {
        var exOrder = replaysRequest.Orders.FirstOrDefault(f => f.Property == property);
        if (e.ShiftKey)
        {
            if (exOrder == null)
            {
                replaysRequest.Orders.Add(new TableOrder()
                    {
                        Property = property
                    });
            }
            else
            {
                exOrder.Ascending = !exOrder.Ascending;
            }
        }
        else
        {
            replaysRequest.Orders.Clear();
            replaysRequest.Orders.Add(new TableOrder()
                {
                    Property = property,
                    Ascending = exOrder == null ? false : !exOrder.Ascending
                });
        }
        await Reload();
    }

    public async Task ShowReplay(string replayHash)
    {
        replayLoading = true;
        await InvokeAsync(() => StateHasChanged());
        replayDto = await replaysService.GetReplay(replayHash);
        lastVisitHash = replayDto?.ReplayHash;
        replayLoading = false;
        await InvokeAsync(() => StateHasChanged());
    }

    private async void OnReplayClose()
    {
        replayDto = null;
        await InvokeAsync(() => StateHasChanged());
    }

    public void Dispose()
    {
        cts.Dispose();
        semaphoreSlim.Dispose();
    }
}
