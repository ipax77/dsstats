@using Microsoft.JSInterop;
@using dsstats.shared;
@using dsstats.shared.Extensions;
@using dsstats.razorlib.Services;
@inject IJSRuntime JSRuntime

<div class="table-responsive tableFixHead">
    <table class="tptable table w-auto">
        <thead>
            <tr>
                <th class="table-primary" colspan="8">
                    Breakpoint @Breakpoint
                    <span class="text-warning">@(Request.Interest == Commander.None ? "" : $" {Request.Interest} vs ..")</span>
                </th>
            </tr>
            <tr style="user-select: none;">
                <CascadingValue Value="TableOrders">
                    <th class="pointer" @onclick="e => SetOrder(e, nameof(DamageEnt.Commander))">
                        <SortArrow Property="@nameof(DamageEnt.Commander)">
                            @nameof(DamageEnt.Commander)
                        </SortArrow>
                    </th>
                    <th class="pointer" @onclick="e => SetOrder(e, nameof(DamageEnt.Count))">
                        <SortArrow Property="@nameof(DamageEnt.Count)">
                            Matchups
                        </SortArrow>
                    </th>
                    <th class="pointer" @onclick="e => SetOrder(e, nameof(DamageEnt.MvpPercentage))"
                        data-bs-toggle="tooltip"
                        data-bs-title="Most kills in the game">
                        <SortArrow Property="@nameof(DamageEnt.MvpPercentage)">
                            Mvp
                        </SortArrow>
                    </th>
                    <th class="pointer" @onclick="e => SetOrder(e, nameof(DamageEnt.AvgKills))"
                        data-bs-toggle="tooltip"
                        data-bs-title="Average sum of kills at the breakpoint">
                        <SortArrow Property="@nameof(DamageEnt.AvgKills)">
                            @nameof(DamageEnt.AvgKills)
                        </SortArrow>
                    </th>
                    <th class="pointer" @onclick="e => SetOrder(e, nameof(DamageEnt.AvgArmy))"
                        data-bs-toggle="tooltip"
                        data-bs-title="Average size of the last spawn">
                        <SortArrow Property="@nameof(DamageEnt.AvgArmy)">
                            @nameof(DamageEnt.AvgArmy)
                        </SortArrow>
                    </th>
                    <th class="pointer" @onclick="e => SetOrder(e, nameof(DamageEnt.AvgUpgrades))">
                        <SortArrow Property="@nameof(DamageEnt.AvgUpgrades)">
                            @nameof(DamageEnt.AvgUpgrades)
                        </SortArrow>
                    </th>
                    <th class="pointer" @onclick="e => SetOrder(e, nameof(DamageEnt.ArmyValue))">
                        <SortArrow Property="@nameof(DamageEnt.ArmyValue)">
                            @nameof(DamageEnt.ArmyValue)
                        </SortArrow>
                    </th>
                    <th class="pointer" @onclick="e => SetOrder(e, nameof(DamageEnt.AvgGas))">
                        <SortArrow Property="@nameof(DamageEnt.AvgGas)">
                            @nameof(DamageEnt.AvgGas)
                        </SortArrow>
                    </th>
                    <th class="pointer" @onclick="e => SetOrder(e, nameof(DamageEnt.AvgAPM))"
                        data-bs-toggle="tooltip"
                        data-bs-title="Average actions per minute">
                        <SortArrow Property="@nameof(DamageEnt.AvgAPM)">
                            @nameof(DamageEnt.AvgAPM)
                        </SortArrow>
                    </th>
                </CascadingValue>
            </tr>

        </thead>
        <tbody>
            @foreach (var ent in GetSortedList())
            {
                <tr>
                    <td>
                        <img src="@HelperService.GetImageSrc(ent.Commander)"
                             alt="@ent.Commander"
                             title="@ent.Commander"
                             width="30"
                             height="30" />
                        @ent.Commander
                    </td>
                    <td>@ent.Count</td>
                    <td>@ent.MvpPercentage.ToString("N2")%</td>
                    <td>@HelperService.GetBigNumberString(ent.AvgKills)</td>
                    <td>@ent.AvgArmy</td>
                    <td>@ent.AvgUpgrades</td>
                    <td>@ent.ArmyValue</td>
                    <td>@ent.AvgGas.ToString("N2")</td>
                    @*<td>@ent.AvgIncome</td>*@
                    <td>@ent.AvgAPM</td>
                </tr>
            }
        </tbody>
    </table>
</div>

@code {
    [CascadingParameter]
    public StatsRequest Request { get; set; } = default!;

    [CascadingParameter]
    public Breakpoint Breakpoint { get; set; }

    [CascadingParameter]
    public List<TableOrder> TableOrders { get; set; } = default!;

    [Parameter, EditorRequired]
    public DamageResponse Response { get; set; } = default!;

    [Parameter]
    public EventCallback OnOrderChanged { get; set; }

    //private List<TableOrder> TableOrders = new()
    //{
    //    new()
    //    {
    //        Property = nameof(DamageEnt.Commander),
    //        Ascending = true
    //    }
    //};

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            JSRuntime.InvokeVoidAsync("enableTooltips");
        }
        base.OnAfterRender(firstRender);
    }

    public void SetTable(DamageResponse response)
    {
        Response = response;
        StateHasChanged();
    }

    public void Update()
    {
        StateHasChanged();
    }

    private void SetOrder(MouseEventArgs e, string property)
    {
        var tableOrder = TableOrders.FirstOrDefault();
        if (tableOrder == null)
        {
            tableOrder = new()
                {
                    Property = property,
                    Ascending = false
                };
        }
        else
        {
            if (tableOrder.Property == property)
            {
                tableOrder.Ascending = !tableOrder.Ascending;
            }
            else
            {
                tableOrder.Property = property;
                tableOrder.Ascending = false;
            }
        }
        OnOrderChanged.InvokeAsync();
    }

    private List<DamageEnt> GetSortedList()
    {
        var query = Response.Entities
            .Where(x => x.Breakpoint == Breakpoint)
            .AsQueryable();

        foreach (var order in TableOrders)
        {
            if (order.Ascending)
            {
                query = query.AppendOrderBy(order.Property);
            }
            else
            {
                query = query.AppendOrderByDescending(order.Property);
            }
        }
        return query.ToList();
    }
}
