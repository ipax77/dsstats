@using dsstats.shared;
<div class="row">
    <div class="col-auto">
        <div class="d-flex">
            <div>
                @if (IsLoading)
                {
                    <div class="spinner-border spinner-border-sm text-info ms-2" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                }
                else
                {
                    <div class="ms-4"></div>
                }
            </div>
            <div class="ms-2">
                <button class="btn btn-sm btn-outline-light bgchart"
                        type="button"
                        data-bs-toggle="collapse"
                        data-bs-target="#RatingRange"
                        aria-expanded="false"
                        aria-controls="RatingRange"
                        @onclick="ShowHideRatingRange">
                    <span class="bi @(showRatingRange ? "bi-chevron-down" : "bi-chevron-up")"></span>
                    Rating Range
                </button>
            </div>
        </div>
    </div>
    <div class="col-auto">
        <div class="d-flex">
            <div>
                <button class="btn btn-sm btn-outline-light bgchart"
                        type="button"
                        data-bs-toggle="collapse"
                        data-bs-target="#Exp2WinOffset"
                        aria-expanded="false"
                        aria-controls="Exp2WinOffset"
                        @onclick="ShowHideExp2Win">
                    <span class="bi @(showExp2Win ? "bi-chevron-down" : "bi-chevron-up")"></span>
                    Win Probability Range
                </button>
            </div>
            <div class="ms-2">
                <span class="bi bi-info-circle pointer" onclick="window.location.href='https://github.com/ipax77/dsstats/wiki#win-probability-range'"></span>
            </div>
        </div>
    </div>
    <div class="col-auto">
        <div>
            <button class="btn btn-sm btn-outline-light bgchart"
                    type="button"
                    data-bs-toggle="collapse"
                    data-bs-target="#Time"
                    aria-expanded="false"
                    aria-controls="Time"
                    @onclick="ShowHideTime">
                <span class="bi @(showTime ? "bi-chevron-down" : "bi-chevron-up")"></span>
                Custom Time
            </button>
        </div>
    </div>
</div>
<div class="row mt-1">
    <div class="col-auto">
        <div class="collapse" id="RatingRange">
            <StatsRatingRequestComponent OnRangeSelected="e => OnRequestChanged.InvokeAsync()" />
        </div>
    </div>
    <div class="col-auto">
        <div class="collapse" id="Exp2WinOffset">
            <StatsExp2WinRequestComponent OnRangeSelected="e => OnRequestChanged.InvokeAsync()" />
        </div>
    </div>
    <div class="col-auto">
        <div class="collapse" id="Time">
            @if (showTime)
            {
                <StatsTimeRequestComponent OnTimeSelected="e => OnRequestChanged.InvokeAsync()" />
            }
        </div>
    </div>
</div>

@code {
    [CascadingParameter]
    public StatsRequest Request { get; set; } = default!;

    [CascadingParameter]
    public bool IsLoading { get; set; }

    [Parameter]
    public EventCallback OnRequestChanged { get; set; }

    private bool showRatingRange;
    private bool showExp2Win;
    private bool showTime;

    private void ShowHideRatingRange()
    {
        showRatingRange = !showRatingRange;
        if (!showRatingRange && Request.Filter.Rating is not null)
        {
            Request.Filter.Rating.FromRating = 0;
            Request.Filter.Rating.ToRating = 0;
            OnRequestChanged.InvokeAsync();
        }
        else
        {
            Request.Filter.Rating = new();
        }
    }

    private void ShowHideExp2Win()
    {
        showExp2Win = !showExp2Win;
        if (!showExp2Win && Request.Filter.Exp2Win is not null)
        {
            Request.Filter.Exp2Win.FromExp2Win = 0;
            Request.Filter.Exp2Win.ToExp2Win = 0;
            OnRequestChanged.InvokeAsync();
        }
        else
        {
            Request.Filter.Exp2Win = new();
        }
    }

    private void ShowHideTime()
    {
        showTime = !showTime;
    }
}
