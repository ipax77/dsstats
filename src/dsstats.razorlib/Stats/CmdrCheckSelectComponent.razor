@using dsstats.razorlib.Services
@using dsstats.shared;

<style>
    .check-label:hover {
        color: white !important;
        background-color: #adb5bd !important;
        border-color: white !important;
    }
</style>

<div class="btn-group-vertical" role="group" aria-label="Cmdr toggle group">
    @if (None)
    {
        <input type="checkbox" class="btn-check" name="@Commander.None" id="@(Commander.None + compid)" autocomplete="off"
               checked="@CmdrSelects[Commander.None]" @onchange="e => SetCommander(e, Commander.None)">
        <label class="btn btn-sm btn-outline-light check-label" for="@(Commander.None + compid)">All</label>
    }
    @foreach (Commander cmdr in Data.GetCommanders(Std ? Data.CmdrGet.Std : Data.CmdrGet.NoStd))
    {
        <input type="checkbox" class="btn-check" name="@cmdr" id="@(cmdr + compid)" autocomplete="off"
               checked="@CmdrSelects[cmdr]" @onchange="e => SetCommander(e, cmdr)">
        <label class="btn btn-sm btn-outline-light check-label" for="@(cmdr + compid)">
            <div class="d-flex justify-content-start">
                <div>
                    <div class="@($"preload-{cmdr.ToString().ToLower()}") commander-image"
                         style="width: 20px; height: 20px;">
                    </div>
                </div>
                <div class="mt-1">
                    @cmdr
                </div>
            </div>
        </label>
    }
</div>

@code {
    [CascadingParameter]
    public Dictionary<Commander, bool> CmdrSelects { get; set; } = Data.GetCommanders(Data.CmdrGet.All).ToDictionary(k => k, v => false);

    [Parameter]
    public bool Std { get; set; }

    [Parameter]
    public bool None { get; set; }

    [Parameter]
    public EventCallback<KeyValuePair<Commander, bool>> OnCommanderSelected { get; set; }

    private readonly string compid = Guid.NewGuid().ToString();

    public void SetParameters(bool std, bool none)
    {
        Std = std;
        None = none;

        InvokeAsync(() => StateHasChanged());
    }

    private void SetCommander(ChangeEventArgs e, Commander cmdr)
    {
        if (e.Value is bool value)
        {
            CmdrSelects[cmdr] = value;

            OnCommanderSelected.InvokeAsync(new(cmdr, value));
        }
    }
}
