@using Microsoft.JSInterop
@using dsstats.razorlib.Replays
@using dsstats.shared
@using dsstats.shared.Interfaces
@using dsstats.razorlib.Services
@inject ITeamcompService teamcompService
@inject IReplaysService replaysService
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@implements IDisposable

<div>
    <TeamCompRequestComponent Request="Request" OnRequestChanged="LoadData" />
</div>

<div class="mt-1">
    <div class="row">
        <div class="col-auto">
            @if (isLoading)
            {
                <div class="spinner-border spinner-border-sm text-info ms-2 mt-4" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            }
            else
            {
                <div class="mt-5">
                </div>
            }
            @if (response != null)
            {
                <div>
                    <TeamCompTable Response="response" OnInterestRequest="LoadInterestData"></TeamCompTable>
                </div>
            }
        </div>
        <div class="col-auto">
            @if (interestResponse != null)
            {
                <div class="bgchart2 d-inline-block p-2 rounded">
                    <div class="d-flex">
                        <div class="me-3">
                            <span class="text-warning">Teams success versus </span>
                        </div>
                        @foreach (var cmdr in HelperService.GetCommanders(interestResponse.Team))
                        {
                            <div class="preload-@(cmdr.ToString().ToLower())" style="width: 30px; height: 30px;"></div>
                        }
                        <div class="ms-4">
                            <span class="oi oi-x text-danger pointer" @onclick="CloseInterest"></span>
                        </div>
                    </div>
                </div>
                <div>
                    <TeamCompTable @ref="teamCompTable" Response="interestResponse" OnInterestRequest="UpdateReplaysTable"></TeamCompTable>
                </div>
            }
        </div>
        <div class="col-auto">
            @if (!string.IsNullOrEmpty(replaysRequest.Team1))
            {
                <div class="ms-2">
                    <button class="btn btn-sm btn-outline-light bgchart"
                            type="button"
                            data-bs-toggle="collapse"
                            data-bs-target="#buildreplays"
                            aria-expanded="false"
                            aria-controls="buildreplays"
                            @onclick="e => showReplays = !showReplays">
                        <span class="bi @(showReplays ? "bi bi-chevron-double-down" : "bi-chevron-double-up")"></span>
                        Replays
                    </button>
                </div>
                <div class="collapse" id="buildreplays">
                    @if (showReplays)
                    {
                        <TeamReplaysComponent @ref="teamReplaysComponent" Request="replaysRequest" OnReplayRequest="LoadReplay" />

                    }
                </div>
            }
        </div>
    </div>
</div>
@if (replayDto is not null)
{
    <div id="replaycontainer">
        <ReplayComponent Replay="replayDto" IsCloseable="true" IsScrollable="false" OnCloseRequested="e => replayDto = null" />
    </div>
}
<div class="bgchart2 d-inline-block rounded mt-2">
    <p class="text-warning">
        This 'Teams Performance Table' provides essential statistics on team compositions in the standard game mode.
        It offers insights into the winrate and average rating gain of various team setups.
        When you click on a specific row in the table, a second table is displayed, showing the results of all team compositions versus the selected one.
        Moreover, you have the option to list all replays with the selected team composition, enabling in-depth analysis for further insights and strategic considerations.
        This feature-rich tool empowers you to make informed decisions about team composition and gameplay strategies in the standard game mode.
    </p>
</div>

@code {
    [Parameter, EditorRequired]
    public TeamcompRequest Request { get; set; } = default!;

    [Parameter]
    public EventCallback<TeamcompRequest> OnRequestChanged { get; set; }

    TeamcompResponse? response;
    TeamcompResponse? interestResponse;
    bool isLoading;
    CancellationTokenSource cts = new();

    TeamcompReplaysRequest replaysRequest = new();
    TeamReplaysComponent? teamReplaysComponent;
    bool showReplays;
    ReplayDto? replayDto = null;
    TeamCompTable? teamCompTable;

    protected override void OnInitialized()
    {
        _ = LoadData();
        base.OnInitialized();
    }

    private async Task LoadData()
    {
        teamCompTable?.ResetInterest();
        isLoading = true;
        await InvokeAsync(() => StateHasChanged());
        response = await teamcompService.GetTeamcompResult(Request with { Interest = null }, cts.Token);
        replaysRequest.TimePeriod = Request.TimePeriod;
        replaysRequest.Team1 = string.Empty;
        replaysRequest.TournementEdition = Request.TournamentEdition;

        if (Request.Interest == null)
        {
            interestResponse = null;
            isLoading = false;
            await InvokeAsync(() => StateHasChanged());
            await OnRequestChanged.InvokeAsync(Request);
            teamReplaysComponent?.Reload(replaysRequest);
        }
        else
        {
            await LoadInterestData(Request.Interest);
        }
    }

    private async Task LoadInterestData(string team)
    {
        teamCompTable?.ResetInterest();
        isLoading = true;
        await InvokeAsync(() => StateHasChanged());
        interestResponse = await teamcompService.GetTeamcompResult(Request with { Interest = team }, cts.Token);
        isLoading = false;
        replaysRequest.Team1 = team;
        replaysRequest.Team2 = null;
        replaysRequest.TournementEdition = Request.TournamentEdition;
        await InvokeAsync(() => StateHasChanged());
        await OnRequestChanged.InvokeAsync(Request with { Interest = team });
        teamReplaysComponent?.Reload(replaysRequest);
    }

    private void UpdateReplaysTable(string interest)
    {
        replaysRequest.Team2 = interest;
        teamReplaysComponent?.Reload(replaysRequest);
    }

    private void CloseInterest()
    {
        interestResponse = null;
        StateHasChanged();
        OnRequestChanged.InvokeAsync(Request with { Interest = null });
    }

    private async Task LoadReplay(string replayHash)
    {
        isLoading = true;
        await InvokeAsync(() => StateHasChanged());
        replayDto = await replaysService.GetReplay(replayHash);
        isLoading = false;
        await InvokeAsync(() => StateHasChanged());
        await JSRuntime.InvokeVoidAsync("scrollToElementId", "replaycontainer");
    }

    public void Dispose()
    {
        cts.Cancel();
        cts.Dispose();
    }
}
