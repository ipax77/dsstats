@using dsstats.shared;
@using dsstats.shared.Interfaces;
@inherits StatsComponent
@inject ISynergyService synergyService
@implements IDisposable

<CascadingValue Value="Request">
    <StatsRequestComponent WithoutInterest="true" OnRequestChanged="e => LoadData()" />
    <CascadingValue Value="IsLoading">
        <StatsFilterComponent OnRequestChanged="e => LoadData()" />
    </CascadingValue>
</CascadingValue>

<div class="d-flex mt-2">
    <div class="col-auto">
        <div class="bgchart">
            <CascadingValue Value="CmdrSelects">
                <CmdrCheckSelectComponent @ref="cmdrCheckSelectComponent" Std="@(Request.RatingType == RatingType.Std || Request.RatingType == RatingType.StdTE)" OnCommanderSelected="CmdrSelected"></CmdrCheckSelectComponent>
            </CascadingValue>
        </div>
        <div class="mt-2">
            <button type="button" class="btn btn-outline-warning" @onclick="ClearSelects">Clear Chart</button>
        </div>
    </div>
    <div class="col-auto">
        @if (response != null)
        {
            <div class="border rounded border-secondary bgchart"
                 style="min-width: 800px; width: 42vw; height: calc(55vw * 0.8); min-height: 640px;">
                <SynergyChart @ref="synergyChart" Request="Request" Response="response" CmdrSelects="CmdrSelects"></SynergyChart>
            </div>
        }
    </div>
</div>
<div class="mt-2 bgchart d-inline-block p-1" style="max-width: 42vw; min-width: 800px;">
    <p class="text-warning">
        This synergy radar chart illustrates the average rating gain of a specific commander when teamed up with the commanders displayed in the chart.
        The values are normalized between 0 and 1 to provide a positive and easily comparable representation of the synergy between the commanders.
        Higher values indicate stronger synergy, while lower values suggest weaker synergy. 
        This chart helps you identify which commanders work well together to enhance overall performance.
    </p>
</div>
<div class="mt-2">
    @if (response != null)
    {
        <SynergyTable Response="response"></SynergyTable>
    }
</div>

@code {
    CancellationTokenSource cts = new();
    SemaphoreSlim ss = new(1, 1);

    SynergyResponse? response = null;
    SynergyChart? synergyChart;
    CmdrCheckSelectComponent? cmdrCheckSelectComponent;

    Dictionary<Commander, bool> CmdrSelects = null!;

    protected override void OnInitialized()
    {
        CmdrSelects = Data.GetCommanders(Data.CmdrGet.All).ToDictionary(k => k, v => false);
        SetCmdrSelects();
        base.OnInitialized();
    }

    private void SetCmdrSelects()
    {
        if (Request.Interest == Commander.None)
        {
            Request.Interest = Commander.Abathur;
            CmdrSelects[Commander.Abathur] = true;
        }
        else
        {
            CmdrSelects[Request.Interest] = true;
        }
    }

    public override async Task LoadData(bool init = false)
    {
        await ss.WaitAsync();
        try
        {
            IsLoading = true;
            await InvokeAsync(() => StateHasChanged());
            response = await synergyService.GetSynergy(Request, cts.Token);

            synergyChart?.PrepareData(Request, response, CmdrSelects);
            cmdrCheckSelectComponent?.SetParameters(Request.RatingType == RatingType.Std || Request.RatingType == RatingType.StdTE, false);

            IsLoading = false;
            await InvokeAsync(() => StateHasChanged());
            await OnRequestChanged.InvokeAsync();
        } 
        finally
        {
            ss.Release();
        }
    }

    private void CmdrSelected(KeyValuePair<Commander, bool> cmdrSelect)
    {
        synergyChart?.AddRemoveDatasets(CmdrSelects);
        OnRequestChanged.InvokeAsync();
    }

    private void ClearSelects()
    {
        foreach (var ent in CmdrSelects.Keys.ToArray())
        {
            CmdrSelects[ent] = false;
        }
        synergyChart?.AddRemoveDatasets(CmdrSelects);
        StateHasChanged();
        OnRequestChanged.InvokeAsync();
    }

    public void Dispose()
    {
        cts.Cancel();
        cts.Dispose();
        ss.Dispose();
    }
}
