@using Microsoft.JSInterop;
@using dsstats.shared;
@using dsstats.shared.Interfaces;
@using dsstats.razorlib.Services;
@inject IWinrateService winrateService
@inject IJSRuntime JSRuntime
@implements IDisposable

<div>
    <h3 class="text-warning fw-bold"><a href="/stats">Top Commanders</a> past 90 days</h3>
</div>
<div class="table-responsive tableFixHead">
    <table class="tptable table table-sm">
        <thead>
            <tr>
                <th>Commander</th>
                <th><spnn data-bs-toggle="tooltip" data-bs-placement="top" data-bs-title="Average rating gain">AvgGain</spnn></th>
                <th>Winrate</th>
                <th>Matchups</th>
            </tr>
        </thead>
        <tbody>
            @if (response is null || response.WinrateEnts.Count == 0)
            {
                @for (int i = 0; i < 7; i++)
                {
                    <tr>
                        <td colspan="4"><span style="color: transparent; text-shadow: 0 0 8px #FFF">Loading ...</span></td>
                    </tr>
                }
            }
            else
            {
                @foreach (var item in response.WinrateEnts.OrderByDescending(o => o.AvgGain).Take(7))
                {
                    <tr>
                        <td>
                            <div class="d-flex">
                                <div class="@($"preload-{item.Commander.ToString().ToLower()}") commander-image"></div>
                                <div><span>@item.Commander</span></div>
                            </div>
                        </td>
                        <td><span class="text-warning fw-bold">@item.AvgGain.ToString("N2")</span></td>
                        <td>@HelperService.GetPercentageString(item.Wins, item.Count)</td>
                        <td class="text-center">@item.Count</td>
                    </tr>
                }
            }
        </tbody>
    </table>
</div>

@code {
    private WinrateRequest WinrateRequest = new()
        {
            TimePeriod = TimePeriod.Past90Days,
            RatingType = RatingType.Cmdr,
            Interest = Commander.None,
            ComboRating = true,
        };

    private WinrateResponse? response;
    private CancellationTokenSource cts = new();

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            _ = LoadData();
            JSRuntime.InvokeVoidAsync("enableTooltips");
        }
        base.OnAfterRender(firstRender);
    }

    private async Task LoadData()
    {
        response = await winrateService.GetWinrate(WinrateRequest, cts.Token);
        await InvokeAsync(() => StateHasChanged());
    }

    public void Dispose()
    {
        cts.Cancel();
        cts.Dispose();
    }
}
