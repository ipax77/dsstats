@using dsstats.shared
@using dsstats.razorlib.Services

<div class="card w-auto">
    <div class="card-header bgchart">
        <div class="d-flex justify-content-between">
            <div>
                <h4>
                    <span class="badge @(IsWinner ? "bg-success" : "bg-danger")">
                        #@Player.GamePos @Player.Name
                    </span>
                </h4>
            </div>
            <div>
                <button class="btn btn-sm btn-outline-light bgchart" type="button" data-bs-toggle="collapse"
                    data-bs-target="@($"#Player{Player.GamePos}Map")" aria-expanded="false"
                    aria-controls="@($"Player{Player.GamePos}Map")" @onclick="e => showMap = !showMap">
                    <span class="oi @(showMap ? "bi-chevron-down" : "bi-chevron-up")"></span>
                    Map
                </button>
            </div>
        </div>
        <div class="d-flex justify-content-between">
            <img src="@HelperService.GetImageSrc(Player.Race)" alt="@Player.Race" title="@Player.Race" width="30"
                height="30" />
            <div class="ms-1 me-1">
                <button class="btn btn-sm btn-outline-info bgchart" type="button" data-bs-toggle="collapse"
                    data-bs-target="@($"#Player{Player.GamePos}Gas")" aria-expanded="false"
                    aria-controls="@($"Player{Player.GamePos}Gas")" @onclick="e => showGas = !showGas">
                    <span class="bi @(showGas ? "bi-chevron-down" : "bi-chevron-up")"></span>
                    Gas @Spawn?.GasCount
                </button>                
            </div>
            <div class="">
                <button class="btn btn-sm btn-outline-light bgchart" type="button" data-bs-toggle="collapse"
                    data-bs-target="@($"#Player{Player.GamePos}Upgrades")" aria-expanded="false"
                    aria-controls="@($"Player{Player.GamePos}Upgrades")" @onclick="e => showUpgrades = !showUpgrades">
                    <span class="bi @(showUpgrades ? "bi-chevron-down" : "bi-chevron-up")"></span>
                    Upgrades @Spawn?.UpgradeSpent
                </button>                   
            </div>
        </div>
    </div>

    <div class="card-body bgchart2">
        <div class="collapse" id="@($"Player{Player.GamePos}Map")">
            @* <ReplayPlayerMap Spawn="Spawn" Team="@Player.Team" /> *@
            @* <ReplayPlayerCanvasMap Spawn="Spawn" Team="Player.Team" /> *@
            @if (showMap)
            {
                <ReplayPlayerChartMap Spawn="Spawn" Team="Player.Team" />
            }
        </div>
        <div class="collapse" id="@($"Player{Player.GamePos}Gas")">
            <ReplayPlayerGas Player="Player" TeamIncome="Player.Team == 1 ? MiddleInfo.Team1Income : MiddleInfo.Team2Income" />
        </div>
        <div class="collapse" id="@($"Player{Player.GamePos}Upgrades")">
            <ReplayPlayerUpgrades Player="Player" />
        </div>
        <div class="table-responsive w-auto">
            <table class="tptable table table-sm">
                <thead>
                    <tr>
                        <th>Unit</th>
                        <th>Count</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var unit in GetUnits())
                    {
                        <tr>
                            <td>@unit.Key</td>
                            <td>@unit.Value</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

@code {
    [CascadingParameter]
    public Breakpoint Breakpoint { get; set; }

    [Parameter, EditorRequired]
    public ReplayPlayerDto Player { get; set; } = default!;

    [Parameter, EditorRequired]
    public MiddleInfo MiddleInfo { get; set; } = default!;

    bool IsWinner => Player.PlayerResult == PlayerResult.Win;

    SpawnDto? Spawn => Player.Spawns.FirstOrDefault(f => f.Breakpoint == Breakpoint);

    bool showMap = false;
    bool showUpgrades = false;
    bool showGas = false;

    public void Reset()
    {
        showMap = false;
        showUpgrades = false;
        showGas = false;
    }

    List<KeyValuePair<string, byte>> GetUnits()
    {
        if (Spawn == null)
        {
            return new List<KeyValuePair<string, byte>>();
        }
        return Spawn.Units.ToDictionary(x => x.Unit.Name, x => x.Count).OrderByDescending(o => o.Value).ToList();
    }
}