@using Microsoft.AspNetCore.Components.Forms
@using System.Globalization
@using dsstats.shared
@using dsstats.shared.Extensions
@using dsstats.shared.Interfaces

@inject ITourneyNgService tourneyService

<div style="max-width: 400px;">
    <form name="tourneyselectform">
        <fieldset>
            <div class="form-group">
                <label for="tourneyselect" class="form-label mt-4">Tourney</label>
                <select class="form-select" id="tourneyselect" @bind="TourneyGuid" @bind:after="LoadData">
                    @foreach (var tourney in tourneys)
                    {
                        <option value="@tourney.TourneyGuid">@tourney.Name</option>
                    }
                </select>
            </div>
        </fieldset>
    </form>
</div>

<div class="mt-2" style="font-size: 1.2rem;">
    <div class="row">
        <div class="col-auto">
            @if (isLoading)
            {
                <div class="spinner-border spinner-border-sm text-danger" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            }
            else
            {
                <div style="width: 20px;">
                </div>
            }
        </div>
        @if (response is not null)
        {
@*             <div class="col-auto">
                <span class="badge bg-info">
                    Replays <br /> @response.CommanderStats.Sum(s => s.Count)
                </span>
            </div> *@
            <div class="col-auto">
                <span class="badge bg-info">
                    Players <br /> @response.Players
                </span>
            </div>
            <div class="col-auto">
                <span class="badge bg-info">
                    Teams <br /> @response.Teams
                </span>
            </div>
            <div class="col-auto">
                <span class="badge bg-info">
                    Matches <br /> @response.Matches
                </span>
            </div>
        }
    </div>
</div>
<div class="mt-2">
    @if (response is not null)
    {
        <div class="table-responsive tableFixHead text-nowrap" style="max-width: 800px; max-height: 80vh;" tabindex="1">
            <table class="tptable table">
                <thead class="user-select-none">
                    <tr>
                        <CascadingValue Value="Orders">
                            <th scope="col" class="pointer" @onclick="@(e => SortList(e, nameof(TourneyCommanderTableStat.Commander)))">
                                <SortArrow Property="Commander">
                                    Commander
                                </SortArrow>
                            </th>
                            <th scope="col" class="pointer" @onclick="@(e => SortList(e, nameof(TourneyCommanderTableStat.Winrate)))">
                                <SortArrow Property="Winrate">
                                    Winrate
                                </SortArrow>
                            </th>
                            <th scope="col" class="pointer" @onclick="@(e => SortList(e, nameof(TourneyCommanderTableStat.Wins)))">
                                <SortArrow Property="Wins">
                                    Wins
                                </SortArrow>
                            </th>
                            <th scope="col" class="pointer" @onclick="@(e => SortList(e, nameof(TourneyCommanderTableStat.Count)))">
                                <SortArrow Property="Count">
                                    Matchups
                                </SortArrow>
                            </th>
                            <th scope="col" class="pointer" @onclick="@(e => SortList(e, nameof(TourneyCommanderTableStat.Bans)))">
                                <SortArrow Property="Bans">
                                    Bans
                                </SortArrow>
                            </th>
                        </CascadingValue>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in GetSortedList())
                    {
                        <tr>
                            <td>
                                <div class="d-flex">
                                    <div class="@($"preload-{item.Commander.ToString().ToLower()}") commander-image"></div>
                                    <div><span>@item.Commander</span></div>
                                </div>
                            </td>
                            <td>@item.Winrate.ToString("N2", CultureInfo.InvariantCulture)%</td>
                            <td>@item.Wins</td>
                            <td>@item.Count</td>
                            <td>@item.Bans</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>

@code {
    [Parameter]
    public Guid TourneyGuid { get; set; } = Guid.Empty;

    List<TourneyDto> tourneys = [];
    TourneyStatsResponse? response;
    bool isLoading;

    List<TableOrder> Orders = [];

    protected override void OnInitialized()
    {
        _ = LoadData();
        base.OnInitialized();
    }

    private async Task LoadTournaments()
    {
        tourneys = await tourneyService.GetTournaments();
    }

    private async Task LoadData()
    {
        isLoading = true;
        await InvokeAsync(() => StateHasChanged());

        if (tourneys.Count == 0)
        {
            await LoadTournaments();
        }

        if (tourneys.Count == 0)
        {
            return;
        }

        if (TourneyGuid == Guid.Empty)
        {
            TourneyGuid = tourneys.First().TourneyGuid;
        }

        response = await tourneyService.GetStats(new() { TourneyGuid = TourneyGuid });

        isLoading = false;
        await InvokeAsync(() => StateHasChanged());
    }

    private void SortList(MouseEventArgs e, string property)
    {
        var exOrder = Orders.FirstOrDefault(f => f.Property == property);
        if (e.ShiftKey)
        {
            if (exOrder == null)
            {
                Orders.Add(new TableOrder()
                    {
                        Property = property
                    });
            }
            else
            {
                exOrder.Ascending = !exOrder.Ascending;
            }
        }
        else
        {
            Orders.Clear();
            Orders.Add(new TableOrder()
                {
                    Property = property,
                    Ascending = exOrder == null ? false : !exOrder.Ascending
                });
        }
    }

    private List<TourneyCommanderTableStat> GetSortedList()
    {
        if (response is null)
        {
            return [];
        }

        var stats = response.CommanderStats
            .Select(s => new TourneyCommanderTableStat(s))
            .AsQueryable();

        if (Orders.Count == 0)
        {
            stats = stats.OrderByDescending(o => o.Winrate);
        }

        foreach (var order in Orders)
        {
            if (order.Ascending)
            {
                stats = stats.AppendOrderBy(order.Property);
            }
            else
            {
                stats = stats.AppendOrderByDescending(order.Property);
            }
        }

        return stats.ToList();
    }
}
