@using Microsoft.JSInterop
@using dsstats.shared
@using dsstats.shared.Interfaces
@using Microsoft.AspNetCore.Components.Web.Virtualization
@using dsstats.razorlib.Services
@inject IPlayerService playerService
@inject IRemoteToggleService remoteToggleService

<div class="@(Request.PlayerId == null ? "" : "visually-hidden")">
    <CascadingValue Value="Request">
        <RatingsRequestComponent OnRequestChanged="Reload" />
    </CascadingValue>

    <div class="row">
        <div class="col-auto">
            <div style="width: 75vw; max-width: 1025px;">
                <div class="d-flex justify-content-between">
                    <div>
                        @if (isLoading)
                        {
                            <div class="spinner-border spinner-border-sm text-danger" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        }
                    </div>
                    <div class="me-1">
                        <div class="d-flex">
                            <div>
                                <span class="bi bi-arrow-clockwise text-secondary pointer" @onclick="Reload"></span>
                            </div>
                            <div class="ms-2">
                                # @ratingsCount.ToString("N0")
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="tableFixHead table-responsive" style="max-height: 80vh; max-width: 1075px;">

                <table class="tptable table">
                    <thead class="" style="user-select: none;">
                        <CascadingValue Value="Request.Orders">
                            <tr>
                                <th class="pointer" @onclick="@(e => SortList(e, "Pos"))">
                                    <SortArrow Property="Pos">
                                        #
                                    </SortArrow>
                                </th>
                                <th class="pointer" @onclick="@(e => SortList(e, "Region"))">
                                    <SortArrow Property="Region">
                                        <div class="text-center">
                                            <span class="bi bi-globe rounded-circle bg-primary p-1"></span>
                                        </div>
                                    </SortArrow>
                                </th>
                                <th class="pointer text-info" @onclick="@(e => SortList(e, "Name"))">
                                    <SortArrow Property="Name">
                                        Name
                                    </SortArrow>
                                </th>
                                <th class="pointer text-info" style="width: 90px;" @onclick="@(e => SortList(e, "Main"))">
                                    <SortArrow Property="Main">
                                        Main
                                    </SortArrow>
                                </th>
                                <th class="pointer text-info" @onclick="@(e => SortList(e, "MainCount"))">
                                    <SortArrow Property="MainCount">
                                        Main %
                                    </SortArrow>
                                </th>
                                <th class="pointer" @onclick="@(e => SortList(e, "Games"))">
                                    <SortArrow Property="Games">
                                        Games
                                    </SortArrow>
                                </th>
                                <th class="pointer text-warning" @onclick="@(e => SortList(e, "Rating"))">
                                    <SortArrow Property="Rating">
                                        Rating
                                    </SortArrow>
                                </th>
                                <th class="pointer" style="z-index: 1;" @onclick="@(e => SortList(e, ratingChangeSort))">
                                    <SortArrow Property="@ratingChangeSort">
                                        <div class="d-flex justifly-content-between">
                                            <div class="allign-self-center">
                                                <i class="bi bi-arrow-down-up"></i>
                                            </div>
                                            <div class="ms-1">
                                                <button type="button" class="btn btn-sm btn-outline-primary"
                                                @onclick:stopPropagation @onclick="RotateChangeTime">
                                                    @GetChangeString()
                                                </button>
                                            </div>
                                        </div>
                                    </SortArrow>
                                </th>
                                <th class="pointer" @onclick="@(e => SortList(e, "Wins"))">
                                    <SortArrow Property="Wins">
                                        Winrate
                                    </SortArrow>
                                </th>
                                <th class="pointer" @onclick="@(e => SortList(e, "Mvp"))">
                                    <SortArrow Property="Mvp">
                                        Mvp
                                    </SortArrow>
                                </th>
                            </tr>
                        </CascadingValue>
                    </thead>
                    <tbody>
                        @if (ratingsCount == 0)
                        {
                            <tr height="41px;">
                                <td colspan="10">No Data found.</td>
                            </tr>
                        }
                        else
                        {
                            <Virtualize @ref="virtualize" Context="rating" ItemsProvider="LoadRatings" OverscanCount="10"
                                        ItemSize="41" SpacerElement="tr">
                                <ItemContent>
                                    <tr height="41px;" class="pointer" @onclick="e => ShowPlayerDetails(rating.Player)">
                                        <td>
                                            <span class="text-truncate text-warning"
                                                  style="display: block; width: 40px;">
                                                @(Request.ComboRating || Request.Arcade ? rating.ComboPlayerRating.Pos : rating.PlayerRating.Pos)
                                            </span>
                                        </td>
                                        <td>
                                            <span>@Data.GetRegionString(rating.Player.RegionId)</span>
                                        </td>
                                        <td>
                                            <span class="text-truncate text-info"
                                                  style="display: block; width: 130px;">@rating.Player.Name</span>
                                        </td>
                                        <td>
                                            @(rating.PlayerRating.Games == 0 || rating.PlayerRating.MainCount * 100.0 /
                                            rating.PlayerRating.Games < 10.5 ? "Random" :
                                            rating.PlayerRating.Main.ToString())
                                        </td>
                                        <td>
                                            @HelperService.GetPercentageString(rating.PlayerRating.MainCount,
                                                 rating.PlayerRating.Games)
                                        </td>
                                        <td class="border-start">@rating.ComboPlayerRating.Games</td>
                                        <td class="text-warning">
                                            @(Request.ComboRating || Request.Arcade ? rating.ComboPlayerRating.Rating.ToString("N2")
                                            : rating.PlayerRating.Rating.ToString("N2"))
                                        </td>
                                        <td>
                                            @if (rating.PlayerRating.PlayerRatingChange != null)
                                            {
                                                var ratingChange = Request.TimePeriod switch
                                                {
                                                    RatingChangeTimePeriod.Past24h => rating.PlayerRating.PlayerRatingChange.Change24h,
                                                    RatingChangeTimePeriod.Past10Days => rating.PlayerRating.PlayerRatingChange.Change10d,
                                                    _ => rating.PlayerRating.PlayerRatingChange.Change30d
                                                };
                                                <span class="@(ratingChange >= 0 ? "bi bi-arrow-top text-success" : "bi bi-arrow-bottom text-danger")">
                                                    @ratingChange.ToString("N2")
                                                </span>
                                            }
                                        </td>
                                        <td>
                                            @if (Request.ComboRating || Request.Arcade)
                                            {
                                                @HelperService.GetPercentageString(rating.ComboPlayerRating.Wins, rating.ComboPlayerRating.Games)
                                            }
                                            else
                                            {
                                                @HelperService.GetPercentageString(rating.PlayerRating.Wins, rating.PlayerRating.Games)
                                            }
                                        </td>
                                        <td>
                                            @HelperService.GetPercentageString(rating.PlayerRating.Mvp, rating.PlayerRating.Games)
                                        </td>
                                    </tr>
                                </ItemContent>
                                <Placeholder>
                                    <tr height="41px">
                                        <td colspan="10">Loading ...</td>
                                    </tr>
                                </Placeholder>
                            </Virtualize>
                        }
                    </tbody>
                </table>
            </div>
        </div>
        @if (!remoteToggleService.IsMaui)
        {
            <div class="col-auto mt-4">
                <div class="ms-2">
                    <button class="btn btn-sm btn-outline-light bgchart"
                    type="button"
                    data-bs-toggle="collapse"
                    data-bs-target="#Distribution"
                    aria-expanded="false"
                    aria-controls="Distribution"
                    @onclick="ShowHideDistribution">
                        <span class="bi @(showDistribution ? "bi-chevron-down" : "bi-chevron-up")"></span>
                        Rating Distribution
                    </button>
                </div>
                <div class="collapse" id="Distribution">
                    @if (showDistribution)
                    {
                        <dsstats.razorlib.Distribution.DistributionComponent Request="distributionRequest" />
                    }
            </div>
        </div>
        }
    </div>
</div>
@* @if (Request.PlayerId is not null)
{
    <PlayerDetails PlayerId="Request.PlayerId" RatingType="Request.Type" RatingCalcType="GetRatingCalcType()" OnCloseRequested="ClosePlayerDetails" />
} *@
@if (Request.PlayerId is not null)
{
    <dsstats.razorlib.Players.Profile.ProfileComponent PlayerId="Request.PlayerId" RatingType="Request.Type" RatingCalcType="GetRatingCalcType()" OnCloseRequested="ClosePlayerDetails" />
}

@code {
    [Parameter, EditorRequired]
    public RatingsRequest Request { get; set; } = default!;

    [Parameter]
    public EventCallback<RatingsRequest> OnRequestChanged { get; set; }

    List<ComboPlayerRatingDto> ratings = new();

    bool isLoading = false;
    private int ratingsCount;
    private Virtualize<ComboPlayerRatingDto>? virtualize;
    private string ratingChangeSort => Request.TimePeriod switch
    {
        RatingChangeTimePeriod.Past24h => "PlayerRatingChange.Change24h",
        RatingChangeTimePeriod.Past10Days => "PlayerRatingChange.Change10d",
        _ => "PlayerRatingChange.Change30d"
    };

    bool showDistribution;
    DistributionRequest distributionRequest = new()
        {
            RatingCalcType = RatingCalcType.Combo,
            RatingType = RatingType.Cmdr
        };

    protected override void OnInitialized()
    {
        _ = SetRatingsCount();
        base.OnInitialized();
    }

    private async Task SetRatingsCount()
    {
        ratingsCount = await playerService.GetRatingsCount(Request, default);
        await InvokeAsync(() => StateHasChanged());
    }

    public async Task Reload()
    {
        isLoading = true;
        await InvokeAsync(() => StateHasChanged());
        await SetRatingsCount();
        if (virtualize != null)
        {
            await virtualize.RefreshDataAsync();
        }
        isLoading = false;
        await InvokeAsync(() => StateHasChanged());
        await OnRequestChanged.InvokeAsync(Request);
    }

    private async ValueTask<ItemsProviderResult<ComboPlayerRatingDto>> LoadRatings(ItemsProviderRequest request)
    {
        var numRatings = Math.Min(request.Count, ratingsCount - request.StartIndex);
        Request.Skip = request.StartIndex;
        Request.Take = numRatings;

        if (Request.Skip < 0 || Request.Take < 0)
        {
            return new ItemsProviderResult<ComboPlayerRatingDto>();
        }
        var results = await playerService.GetRatings(Request, request.CancellationToken);
        return new ItemsProviderResult<ComboPlayerRatingDto>(results, ratingsCount);
    }

    private async Task SortList(MouseEventArgs e, string property)
    {
        var exOrder = Request.Orders.FirstOrDefault(f => f.Property == property);
        if (e.ShiftKey)
        {
            if (exOrder == null)
            {
                Request.Orders.Add(new TableOrder()
                    {
                        Property = property
                    });
            }
            else
            {
                exOrder.Ascending = !exOrder.Ascending;
            }
        }
        else
        {
            Request.Orders.Clear();
            Request.Orders.Add(new TableOrder()
                {
                    Property = property,
                    Ascending = exOrder == null ? false : !exOrder.Ascending
                });
        }
        await Reload();
    }

    private void ShowPlayerDetails(PlayerRatingPlayerDto player)
    {
        Request.PlayerId = new(player.ToonId, player.RealmId, player.RegionId);
        OnRequestChanged.InvokeAsync(Request);
    }

    private void ClosePlayerDetails()
    {
        Request.PlayerId = null;
        OnRequestChanged.InvokeAsync(Request);
    }

    private string GetChangeString()
    {
        return Request.TimePeriod switch
        {
            RatingChangeTimePeriod.Past30Days => "30d",
            RatingChangeTimePeriod.Past10Days => "10d",
            RatingChangeTimePeriod.Past24h => "24h",
            _ => ""
        };
    }

    private void RotateChangeTime()
    {
        int numberOfTimePeriods = Enum.GetValues(typeof(RatingChangeTimePeriod)).Length - 1;
        int currentPeriodValue = (int)Request.TimePeriod - 1;
        int nextPeriodValue = (currentPeriodValue + 1) % numberOfTimePeriods;

        if (nextPeriodValue < 0)
        {
            nextPeriodValue = numberOfTimePeriods - 1;
        }

        Request.TimePeriod = (RatingChangeTimePeriod)(nextPeriodValue + 1);
    }

    private RatingCalcType GetRatingCalcType()
    {
        if (Request.ComboRating)
        {
            return RatingCalcType.Combo;
        }
        if (Request.Arcade)
        {
            return RatingCalcType.Arcade;
        }
        return RatingCalcType.Dsstats;
    }

    private void ShowHideDistribution()
    {
        if (!showDistribution)
        {
            distributionRequest.RatingType = Request.Type;
            distributionRequest.RatingCalcType = Request.ComboRating
                ? RatingCalcType.Combo :
                    Request.Arcade ? RatingCalcType.Combo :
                        RatingCalcType.Dsstats;
        }
        showDistribution = !showDistribution;
        StateHasChanged();
    }
}