@using dsstats.shared;
@using dsstats.razorlib.Services;
@using dsstats.shared.Interfaces
@inject IPlayerService playerService
@inject NavigationManager NavigationManager
@implements IDisposable

<div>
    <div>
        <h3 class="text-warning fw-bold"><a href="/ratings?Mode=@RatingType">Top Players</a> @(Data.GetRatingTypeLongName(RatingType))</h3>
    </div>
    <div class="table-responsive tableFixHead">
        <table class="tptable table table-sm">
            <colgroup>
                <col class="col">
                <col class="col">
                <col class="col">
                <col class="col">
                <col class="col">
                <col class="col">
            </colgroup>
            <thead>
                <tr>
                    <th>
                        <div class="text-center">
                            <span class="bi bi-globe rounded-circle bg-primary p-1"></span>
                        </div>
                    </th>
                    <th>
                        Name
                    </th>
                    <th>
                        Rating
                    </th>
                    <th>
                        Games
                    </th>
                    <th>
                        Main
                    </th>
                    <th>
                        Winrate
                    </th>
                </tr>
            </thead>
            <tbody>
                @if (ratings.Count == 0)
                {
                    @for (int i = 0; i < 7; i++)
                    {
                        <tr>
                            <td colspan="6"><span style="color: transparent; text-shadow: 0 0 8px #FFF">Loading ...</span></td>
                        </tr>
                    }
                }
                else
                {
                    @foreach (var rating in ratings)
                    {
                        <tr height="41px;" class="pointer" @onclick="e => LoadPlayerChart(rating.Player)">
                            <td>
                                <span>@Data.GetRegionString(rating.Player.RegionId)</span>
                            </td>
                            <td><span class="text-truncate text-info" style="display: block; width: 150px;">@rating.Player.Name</span></td>
                            <td class="text-warning">
                                @(ratingsRequest.ComboRating || ratingsRequest.Arcade ? rating.ComboPlayerRating.Rating.ToString("N2")
                                    : rating.PlayerRating.Rating.ToString("N2"))
                            </td>
                            <td class="border-start">@rating.ComboPlayerRating.Games</td>
                            <td>
                                @(rating.PlayerRating.Games == 0 || rating.PlayerRating.MainCount * 100.0 /
                                    rating.PlayerRating.Games < 10.5 ? "Random" :
                                    rating.PlayerRating.Main.ToString())
                            </td>
                            <td>
                                @if (ratingsRequest.ComboRating || ratingsRequest.Arcade)
                                {
                                    @HelperService.GetPercentageString(rating.ComboPlayerRating.Wins, rating.ComboPlayerRating.Games)
                                }
                                else
                                {
                                    @HelperService.GetPercentageString(rating.PlayerRating.Wins, rating.PlayerRating.Games)
                                }
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
</div>

@code {
    [Parameter, EditorRequired]
    public RatingType RatingType { get; set; }

    private List<ComboPlayerRatingDto> ratings = new();
    private CancellationTokenSource cts = new();

    private RatingsRequest ratingsRequest = new()
        {
            Skip = 0,
            Take = 7,
            ComboRating = true,
            Active = true,
            Orders = new()
            {
                new()
                {
                    Property = "Rating",
                    Ascending = false
                },

            }
        };

    protected override void OnInitialized()
    {
        ratingsRequest.Type = RatingType;
        base.OnInitialized();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            _ = LoadData();
        }
        base.OnAfterRender(firstRender);
    }

    private async Task LoadData()
    {
        ratings = await playerService.GetRatings(ratingsRequest, cts.Token);
        await InvokeAsync(() => StateHasChanged());
    }

    private void LoadPlayerChart(PlayerRatingPlayerDto playerDto)
    {
        NavigationManager.NavigateTo($"/ratings?PlayerId={Data.GetPlayerIdString(new(playerDto.ToonId, playerDto.RealmId, playerDto.RegionId))}&Mode={RatingType}");
    }

    public void Dispose()
    {
        cts.Cancel();
        cts.Dispose();
    }
}
