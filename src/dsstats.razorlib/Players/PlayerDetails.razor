@using dsstats.shared
@using dsstats.shared.Interfaces
@using dsstats.razorlib.Services
@using System.Globalization
@using Microsoft.JSInterop
@inject IPlayerService playerService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<div>
    @* <div class="sticky-top"> *@
    <div>
        <div class="d-flex flex-row bgchart2">
            <div class="p-2">
                <span class="bi bi-x-lg text-danger pointer" style="font-size: 1.5rem; z-index: 2;"
                    @onclick="e => OnCloseRequested.InvokeAsync()"></span>
            </div>
            <div class="ms-1 p-2 mt-2">
                <span class="border rounded p-1">@Data.GetRegionString(PlayerId.RegionId)</span>
            </div>
            <div class="p-2">
                <h3 class="text-warning fw-bold">@name Details</h3>
            </div>
            @if (isLoading)
            {
                <div class="p-2 spinner-border spinner-border-sm text-info mx-2 mt-2" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            }
            @if (isUploader)
            {
                <div class="p-2 mt-2">
                    <span class="badge bg-success">Uploader</span>
                </div>
            }
            <div class="ms-1">
                <label class="form-label">
                    Rating Type
                    <select class="form-select text-light bgchart" @bind="RatingType" @bind:after="LoadData">
                        <option value="@RatingType.Cmdr">Commanders</option>
                        <option value="@RatingType.Std">Standard</option>
                        <option value="@RatingType.CmdrTE">Commanders TE</option>
                        <option value="@RatingType.StdTE">Standard TE</option>
                    </select>
                </label>
            </div>
            <div class="ms-1">
                <label class="form-label">
                    Calc Type
                    <select class="form-select text-light bgchart" @bind="RatingCalcType" @bind:after="LoadData">
                        <option value="@RatingCalcType.Dsstats">Dsstats</option>
                        <option value="@RatingCalcType.Arcade">Arcade</option>
                        <option value="@RatingCalcType.Combo">Combo</option>
                    </select>
                </label>
            </div>
        </div>
    </div>
    <div class="p-2 bgchart border rounded d-inline-block">
        @if (interestRating is not null && interestRating.ArcadeDefeatsSinceLastUpload > 0)
        {
            <div>
                <span class="p-2 bgchart rounded" style="font-size: 1.3rem; color: #BF40BF;">
                    Leaderboard rating adjustment <span class="text-danger">
                        -@(interestRating.ArcadeDefeatsSinceLastUpload *
                           25)
                    </span> due to not
                    uploaded SC2Arcade defeats.
                    <a href="https://github.com/ipax77/dsstats/wiki/RatingAdjustment">
                        <span class="bi bi-info-circle text-info pointer"></span>
                    </a>
                </span>
            </div>
        }
        @foreach (var interestRating in summary.Ratings.OrderBy(o => o.RatingType))
        {
            @if (interestRating.RatingType == RatingType.Cmdr
           && summary.CmdrPercentileRank != null
           && summary.CmdrPercentileRank != 0
           && summary.CmdrPercentileRank > 20)
            {
                <div>
                    <span class="p-1" style="font-size: 1.3rem;">
                        Better than <span class="text-warning">@summary.CmdrPercentileRank%</span> of all <span
                            class="text-warning">Commanders</span> players
                    </span>
                </div>
            }
            else if (interestRating.RatingType == RatingType.Std
            && summary.StdPercentileRank != null
            && summary.StdPercentileRank != 0
            && summary.StdPercentileRank > 20)
            {
                <div>
                    <span class="p-1" style="font-size: 1.3rem;">
                        Better than <span class="text-warning">@summary.StdPercentileRank%</span> of all <span
                            class="text-warning">Standard</span> players
                    </span>
                </div>
            }
        }
    </div>

    <div class="mt-3">
        <PlayerRatingCards Ratings="summary.Ratings" RatingType="RatingType" OnRatingSelected="ChangeRating" />
    </div>


    <div class="row mt-2 mb-5">
        <div class="col-auto">
            <div class="card">
                <div class="card-header bgchart2">
                    <h4 class="text-warning">GameModes Played</h4>
                </div>
                <div class="card-body bgchart">
                    <div class="table-responsive" style="max-height: 400px; overflow-y: auto; overflow-x: hidden;">
                        <table class="tptable table table-sm w-auto">
                            <thead>
                                <tr>
                                    <th>GameMode</th>
                                    <th>Players</th>
                                    <th>Games</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var gameMode in summary.GameModesPlayed.OrderByDescending(o => o.Count))
                                {
                                    <tr>
                                        <td>@gameMode.GameMode</td>
                                        <td>@HelperService.GetPlayerCountString(gameMode.PlayerCount)</td>
                                        <td>@gameMode.Count</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-auto bgchart p-1 border border-secondary rounded"
            style="position: relative; width: 25vw; min-width: 400px; max-width: 700px; height: 25vw; min-height: 400px; max-height: 700px;">
            <PlayerCmdrCounts @ref="playerCmdrCounts" PlayerId="PlayerId" RatingType="RatingType"
                CommanderInfos="summary.Commanders" />
        </div>
        @if (interestRating is not null)
        {
            <div class="col-auto">
                <PlayerRatingDetailCard Rating="interestRating" />
            </div>
            <div class="col-auto bgchart p-1 border border-secondary rounded"
                style="position: relative; width: 50vw; min-width: 600px; max-width: 800px; height: calc(70vw * 0.5); min-height: 300px; max-height: 400px;">
                <PlayerRatingDetailChart @ref="playerRatingDetailChart" PlayerId="PlayerId" IsArcade="false"
                    RatingType="RatingType"
                    CurrentRating="RatingCalcType == RatingCalcType.Combo ? 0 : interestRating.Rating"
                    ChartDtos="summary.ChartDtos" />
            </div>
        }
        <div class="col-auto bgchart p-1 border border-secondary rounded">
            <h4>
                Recent Replays
                <button type="button" class="btn btn-outline-primary" @onclick="ShowReplays">Show All</button>
            </h4>
            <PlayerReplays PlayerId="PlayerId" OnReplayRequest="ShowReplaysWithReplay" />
        </div>

        @if (ratingDetails is null)
        {
            <div class="col-auto">
                <button type="button" class="btn btn-outline-warning" @onclick="LoadDetailData">More Details ...</button>
            </div>
        }
        else
        {
            <div id="playerdetails" class="col-auto">
                <PlayerCmdrsAvgGainComponent @ref="playerCmdrsAvgGainComponent" CmdrsAvgGain="ratingDetails.CmdrsAvgGain"
                    OnTimePeriodChanged="LoadCmdrAvgGain" />
            </div>
            <div class="col-auto">
                <div class="card" style="min-width: 475px;">
                    <div class="card-header bgchart2">
                        <div class="d-flex justify-content-between">
                            <div>
                                <h4>
                                    <span class="text-warning">Teammates</span> <small class="text-light">
                                        AvgRating
                                        @ratingDetails.AvgTeamRating.ToString("N2", CultureInfo.InvariantCulture)
                                    </small>
                                </h4>
                            </div>
                            <div>
                                <span class="text-info">min 10 games</span>
                            </div>
                        </div>
                        <small>@Data.GetRatingTypeLongName(RatingType)</small>
                    </div>
                    <div class="card-body bgchart">
                        <div class="table-responsive" style="min-width: 450px; max-height: 400px; overflow: auto;">
                            <TeamTable TeamResults="ratingDetails.Teammates" ShowReplays="ShowWithReplays"></TeamTable>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-auto">
                <div class="card" style="min-width: 475px;">
                    <div class="card-header bgchart2">
                        <div class="d-flex justify-content-between">
                            <div>
                                <h4><span class="text-warning">Opponents</span> <small>and their winrate</small></h4>
                            </div>
                            <div>
                                <span class="text-info">min 10 games</span>
                            </div>
                        </div>
                        <small>@Data.GetRatingTypeLongName(RatingType)</small>
                    </div>
                    <div class="card-body bgchart">
                        <div class="table-responsive" style="min-width: 450px; max-height: 400px; overflow: auto;">
                            <TeamTable TeamResults="ratingDetails.Opponents" ShowReplays="ShowVsReplays"></TeamTable>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@code {
    [Parameter, EditorRequired]
    public PlayerId PlayerId { get; set; } = default!;

    [Parameter, EditorRequired]
    public RatingType RatingType { get; set; } = RatingType.Cmdr;

    [Parameter, EditorRequired]
    public RatingCalcType RatingCalcType { get; set; } = RatingCalcType.Combo;

    [Parameter]
    public EventCallback OnCloseRequested { get; set; }

    bool isLoading;
    PlayerDetailSummary summary = new();
    PlayerRatingDetailChart? playerRatingDetailChart;
    PlayerCmdrCounts? playerCmdrCounts;
    PlayerCmdrsAvgGainComponent? playerCmdrsAvgGainComponent;
    string name = string.Empty;
    bool isUploader;
    PlayerRatingDetailDto? interestRating;
    bool shouldRender = true;
    PlayerRatingDetails? ratingDetails = null;

    protected override bool ShouldRender()
    {
        return shouldRender;
    }
    protected override void OnInitialized()
    {
        _ = LoadData();
        base.OnInitialized();
    }

    private async Task LoadData()
    {
        isLoading = true;
        await InvokeAsync(() => StateHasChanged());
        summary = await playerService.GetPlayerPlayerIdSummary(PlayerId, RatingType, RatingCalcType);

        if (summary.Ratings.Count > 0)
        {
            interestRating = summary.Ratings.FirstOrDefault(f => f.RatingType == RatingType);
            isUploader = summary.Ratings.First().Player.IsUploader;
            name = summary.Ratings[0].Player.Name;
            if (interestRating != null)
            {
                playerRatingDetailChart?.Update(RatingType, RatingCalcType == RatingCalcType.Combo ? 0 : interestRating.Rating);
            }
        }
        ratingDetails = null;
        isLoading = false;
        await InvokeAsync(() => StateHasChanged());
    }

    private async Task LoadDetailData()
    {
        ratingDetails = await playerService.GetPlayerIdPlayerRatingDetails(PlayerId, RatingType, RatingCalcType);
        await InvokeAsync(() => StateHasChanged());
        await JSRuntime.InvokeVoidAsync("scrollToElementId", "playerdetails");
    }

    private async Task LoadCmdrAvgGain(TimePeriod timePeriod)
    {
        if (ratingDetails == null)
        {
            return;
        }
        isLoading = true;
        await InvokeAsync(() => StateHasChanged());

        var cmdrsAvgGain = await playerService.GetPlayerIdPlayerCmdrAvgGain(PlayerId, RatingType, timePeriod, default);
        ratingDetails.CmdrsAvgGain.Clear();
        ratingDetails.CmdrsAvgGain.AddRange(cmdrsAvgGain);
        isLoading = false;
        await InvokeAsync(() => StateHasChanged());
    }

    private void ChangeRating(PlayerRatingDetailDto rating)
    {
        shouldRender = false;
        RatingType = rating.RatingType;
        interestRating = rating;
        playerRatingDetailChart?.Update(RatingType, rating.Rating);
        playerCmdrCounts?.Update(RatingType);
        shouldRender = true;
        ratingDetails = null;
        InvokeAsync(() => StateHasChanged());
    }

    private void ShowReplays()
    {
        NavigationManager.NavigateTo(NavigationManager.GetUriWithQueryParameters("replays",
        new Dictionary<string, object?>()
            {
{"PlayerId", Data.GetPlayerIdString(PlayerId) }
            }
        ));
    }

    private void ShowVsReplays(PlayerId playerIdvs)
    {
        NavigationManager.NavigateTo(NavigationManager.GetUriWithQueryParameters("replays",
        new Dictionary<string, object?>()
            {
{"PlayerId", Data.GetPlayerIdString(PlayerId) },
{"Vs", Data.GetPlayerIdString(playerIdvs) },
            }
        ));
    }

    private void ShowWithReplays(PlayerId playerIdwith)
    {
        NavigationManager.NavigateTo(NavigationManager.GetUriWithQueryParameters("replays",
        new Dictionary<string, object?>()
            {
{"PlayerId", Data.GetPlayerIdString(PlayerId) },
{"With", Data.GetPlayerIdString(playerIdwith) },
            }
        ));
    }

    private void ShowReplaysWithReplay(string replayHash)
    {
        NavigationManager.NavigateTo(NavigationManager.GetUriWithQueryParameters("replays",
        new Dictionary<string, object?>()
            {
{"PlayerId", Data.GetPlayerIdString(PlayerId) },
{"replay", replayHash },
            }
        ), true);
    }
}