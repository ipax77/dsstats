@using dsstats.shared
@using dsstats.shared.Interfaces
@inject IReviewService reviewService

<div class="container-fluid" style="background-color: #080808CC;">
    <div>
        <div class="d-flex flex-row bgchart2">
            <div class="p-2">
                <span class="bi bi-x-lg text-danger pointer" style="font-size: 1.5rem; z-index: 2;"
                      @onclick="e => OnCloseRequested.InvokeAsync()"></span>
            </div>
            <div class="ms-1 p-2 mt-2">
                <span class="border rounded p-1">@Data.GetRegionString(PlayerId.RegionId)</span>
            </div>
            <div class="p-2">
                <h3 class="text-warning fw-bold">@RequestName.Name annual review <b>@Year</b></h3>
            </div>
            @if (isLoading)
            {
                <div class="p-2 spinner-border spinner-border-sm text-info mx-2 mt-2" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            }
        </div>
    </div>

    @if (review is not null)
    {
        <div class="mt-2">
            <h3>@review.CommanderInfos.Sum(s => s.Count) Games Played</h3>
            <div class="row">
                @foreach (var ent in GetCountResponses())
                {
                    <div class="col-auto mt-1">
                        <h4>@ent.Value.CountEnts.Sum(s => s.Matchups) on @Data.GetRatingTypeLongName(@ent.Key)</h4>
                        <div class="bgchart p-1 border border-secondary rounded"
                             style="position: relative; width: 12.5vw; min-width: 400px; max-width: 600px; height: 12.5vw; min-height: 400px; max-height: 600px;">
                            <dsstats.razorlib.Stats.Count.CountChart Response="ent.Value" DisplayTitle="false" />
                        </div>
                    </div>
                }
            </div>
        </div>
        <div class="mt-2">
            <h3>Ratings</h3>
            @foreach (var ent in GetRatingResponses())
            {
                <div class="col-auto bgchart p-1 border border-secondary rounded"
                     style="position: relative; width: 30vw; min-width: 600px; max-width: 1200px; height: calc(30vw * 0.5); min-height: 300px; max-height: 600px;">
                    <PlayerRatingDetailChart PlayerId="PlayerId"
                                             RatingType="ent.Key"
                                             RatingCalcType="RatingCalcType.Dsstats"
                                             CurrentRating="0"
                                             ChartDtos="ent.Value" />
                </div>
            }
        </div>
    }
</div>


@code {
    [Parameter, EditorRequired]
    public RequestNames RequestName { get; set; } = default!;

    [Parameter, EditorRequired]
    public int Year { get; set; }

    [Parameter]
    public EventCallback OnCloseRequested { get; set; }

    PlayerId PlayerId => new(RequestName.ToonId, RequestName.RealmId, RequestName.RegionId);

    ReviewResponse? review;
    private bool isLoading;

    protected override void OnInitialized()
    {
        _ = LoadData();
        base.OnInitialized();
    }

    private async Task LoadData()
    {
        isLoading = true;
        await InvokeAsync(() => StateHasChanged());
        review = await reviewService.GetReview(new()
        {

        });
        isLoading = false;
        await InvokeAsync(() => StateHasChanged());
    }

    private Dictionary<RatingType, CountResponse> GetCountResponses()
    {
        if (review is null || review.CommanderInfos.Count == 0)
        {
            return new();
        }

        return review.CommanderInfos.GroupBy(g => g.RatingType)
            .ToDictionary(k => k.Key, v => new CountResponse()
                {
                    CountEnts = v.Select(s => new CountEnt()
                    {
                        Commander = s.Cmdr,
                        Matchups = s.Count
                    }).ToList()
                });
    }

    private Dictionary<RatingType, List<ReplayPlayerChartDto>> GetRatingResponses()
    {
        if (review is null || review.RatingInfos.Count == 0)
        {
            return new();
        }

        return review.RatingInfos.GroupBy(g => g.Replay.RatingType)
            .ToDictionary(k => k.Key, v => v.Select(s => new ReplayPlayerChartDto()
            {
                Replay = s.Replay,
                ReplayPlayerRatingInfo = s.ReplayPlayerRatingInfo
            }).ToList());
    }
}
