@using System.Globalization
@using Microsoft.JSInterop
@using dsstats.razorlib.Replays
@using dsstats.razorlib.Stats.Count
@using dsstats.shared
@using dsstats.shared.Interfaces
@inject IReviewService reviewService
@inject IReplaysService replaysService
@inject IJSRuntime JSRuntime

<div class="container-fluid" style="background-color: #080808CC;">
    <div>
        <div class="d-flex flex-row bgchart2">
            <div class="p-2">
                <span class="bi bi-x-lg text-danger pointer" style="font-size: 1.5rem; z-index: 2;"
                      @onclick="e => OnCloseRequested.InvokeAsync()"></span>
            </div>
            <div class="ms-1 p-2 mt-2">
                <span class="border rounded p-1">@Data.GetRegionString(PlayerId.RegionId)</span>
            </div>
            <div class="p-2">
                <h3 class="text-warning fw-bold">@RequestName.Name annual review <b>@Year</b></h3>
            </div>
            @if (isLoading)
            {
                <div class="p-2 spinner-border spinner-border-sm text-info mx-2 mt-2" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            }
            <div style="height: 50px; width: 50px; position: relative;">
                <AnnotationChartComponent OnAnnotationsRegistered="SetAnnotationRegistered" />
            </div>
        </div>
    </div>

    @if (review is not null && isChartReady)
    {
        @if (!review.IsUploader)
        {
            <p>The data is available for uploaders, only.</p>
        }
        else
        {
            <div class="mt-2">
                <div class="row">
                    <div class="col-auto card bg-transparent">
                        <div class="card-header bgchart2">
                            Games Played
                        </div>
                        <div class="card-body bgchart">
                            <span class="text-warning">@review.TotalGames.ToString("N0", CultureInfo.InvariantCulture)</span>
                        </div>
                    </div>
                    <div class="col-auto card bg-transparent">
                        <div class="card-header bgchart2">
                            Time Played
                        </div>
                        <div class="card-body bgchart">
                            <span class="text-warning">@TimeSpan.FromMinutes(review.Duration).ToString(@"d\.hh\.mm\.ss")</span>
                        </div>
                    </div>
                    <div class="col-auto card bg-transparent">
                        <div class="card-header bgchart2">
                            Longest Win Streak
                        </div>
                        <div class="card-body bgchart">
                            <span class="text-warning">@review.LongestWinStreak</span>
                        </div>
                    </div>
                    <div class="col-auto card bg-transparent">
                        <div class="card-header bgchart2">
                            Longest Lose Streak
                        </div>
                        <div class="card-body bgchart">
                            <span class="text-warning">@review.LongestLosStreak</span>
                        </div>
                    </div>
                    @if (Year == DateTime.Today.Year && review.CurrentStreak != 0)
                    {
                        var textClass = review.CurrentStreak > 0 ? "text-success" : "text-danger";
                        <div class="col-auto card bg-transparent">
                            <div class="card-header bgchart2">
                                Current Streak
                            </div>
                            <div class="card-body bgchart">

                                <span class="@textClass">@review.CurrentStreak</span>
                            </div>
                        </div>
                    }
                </div>

                <div class="mt-1">
                    <form @formname="reviewRatingTypeToggle">
                        <fieldset>
                            <div class="btn-group bgchart" role="group" aria-label="bptogglegroup">
                                @foreach (RatingType rt in Enum.GetValues(typeof(RatingType)))
                                {
                                    <input type="radio" class="btn-check" name="bptoggle" id="@($"reviewrt{rt}")"
                                           checked="@(ratingType == rt)"
                                           autocomplete="off" @onchange="e => SetRatingType(e, rt)">
                                    <label class="btn btn-outline-light check-label" for="@($"reviewrt{rt}")">
                                        @Data.GetRatingTypeLongName(rt)
                                    </label>
                                }
                                @if (isLoading)
                                {
                                    <div class="p-2 spinner-border spinner-border-sm text-info mx-2 mt-2" role="status">
                                        <span class="visually-hidden">Loading...</span>
                                    </div>
                                }
                            </div>
                        </fieldset>
                    </form>
                </div>

                <div class="row">
                    <div class="col-auto mt-1">
                        <h4 class="text-warning d-inline-block p-1 bgchart2">@review.CommanderInfos.Sum(s => s.Count) on @Data.GetRatingTypeLongName(review.RatingType)</h4>
                        <div class="bgchart p-1 border border-secondary rounded"
                             style="position: relative; width: 12.5vw; min-width: 400px; max-width: 600px; height: 12.5vw; min-height: 400px; max-height: 600px;">
                            <CountChart @ref="countChart" Response="GetCountResponse()" DisplayTitle="false" />
                        </div>
                    </div>

                    @if (review.RatingInfos.Count > 0)
                    {
                        var typeRatings = GetRatings();
                        @if (typeRatings.Count > 0)
                        {
                            <div class="col-auto mt-1">
                                <div>
                                    <table class="tptable table table-sm">
                                        <tbody>
                                            <tr>
                                                <td>Top Rating</td>
                                                <td>@typeRatings.Max(m => m.ReplayPlayerRatingInfo?.Rating ?? 0).ToString("N0", CultureInfo.InvariantCulture)</td>
                                            </tr>
                                            <tr>
                                                <td>Avg Rating</td>
                                                <td>@typeRatings.Average(m => m.ReplayPlayerRatingInfo?.Rating ?? 0).ToString("N0", CultureInfo.InvariantCulture)</td>
                                            </tr>
                                            <tr>
                                                <td>Min Rating</td>
                                                <td>@typeRatings.Min(m => m.ReplayPlayerRatingInfo?.Rating ?? 0).ToString("N0", CultureInfo.InvariantCulture)</td>
                                            </tr>
                                        </tbody>
                                    </table>
                                </div>
                                <div class="bgchart p-1 border border-secondary rounded"
                                     style="position: relative; width: 30vw; min-width: 600px; max-width: 1200px; height: calc(30vw * 0.5); min-height: 300px; max-height: 600px;">
                                    <PlayerRatingDetailChart @ref="playerRatingDetailChart" PlayerId="PlayerId"
                                                             RatingType="review.RatingType"
                                                             RatingCalcType="RatingCalcType.Dsstats"
                                                             CurrentRating="0"
                                                             ChartDtos="typeRatings"
                                                             WithoutTitle="true" />
                                </div>
                            </div>
                        }
                    }
                </div>
            </div>
        }
    }
</div>
<div class="mt-1">
    @if (longestReplay is not null)
    {
        <h3 class="mt-1 text-warning p-1 bgchart2">Longest Replay</h3>
        <ReplayComponent Replay="longestReplay" />
    }
    @if (mostCompetivieReplay is not null)
    {
        <h3 class="mt-1 text-warning p-1 bgchart2">Most Competitive Replay</h3>
        <ReplayComponent Replay="mostCompetivieReplay" />
    }
    @if (greatestComebackReplay is not null)
    {
        <h3 class="mt-1 text-warning p-1 bgchart2">Greatest Comeback Replay</h3>
        <ReplayComponent Replay="greatestComebackReplay" />
    }
</div>


@code {
    [Parameter, EditorRequired]
    public RequestNames RequestName { get; set; } = default!;

    [Parameter, EditorRequired]
    public int Year { get; set; }

    [Parameter]
    public EventCallback OnCloseRequested { get; set; }

    PlayerId PlayerId => new(RequestName.ToonId, RequestName.RealmId, RequestName.RegionId);

    ReviewResponse? review;
    private bool isLoading;
    private bool isChartReady;

    CountChart? countChart;
    PlayerRatingDetailChart? playerRatingDetailChart;

    ReplayDto? longestReplay;
    ReplayDto? mostCompetivieReplay;
    ReplayDto? greatestComebackReplay;

    RatingType ratingType = RatingType.Cmdr;

    protected override void OnInitialized()
    {
        _ = LoadData();
        base.OnInitialized();
    }

    public void Update(RequestNames requestName)
    {
        RequestName = requestName;
        review = null;
        _ = LoadData();
    }

    private void SetAnnotationRegistered()
    {
        isChartReady = true;
        InvokeAsync(() => StateHasChanged());
    }

    private async Task LoadData()
    {
        isLoading = true;
        await InvokeAsync(() => StateHasChanged());
        review = await reviewService.GetReview(new()
            {
                RequestName = RequestName,
                RatingType = ratingType,
                Year = Year,
            });
        countChart?.ResetChart(GetCountResponse());
        if (review.RatingInfos.Count > 0)
        {
            playerRatingDetailChart?.Reset(ratingType, GetRatings());
        }
        isLoading = false;
        await InvokeAsync(() => StateHasChanged());

        if (review.LongestReplay != null && longestReplay?.ReplayHash != review.LongestReplay)
        {
            longestReplay = await replaysService.GetReplay(review.LongestReplay);
        }
        if (review.MostCompetitiveReplay != null && mostCompetivieReplay?.ReplayHash != review.MostCompetitiveReplay)
        {
            mostCompetivieReplay = await replaysService.GetReplay(review.MostCompetitiveReplay);
        }
        if (review.GreatestComebackReplay != null && greatestComebackReplay?.ReplayHash != review.GreatestComebackReplay)
        {
            greatestComebackReplay = await replaysService.GetReplay(review.GreatestComebackReplay);
        }
        await InvokeAsync(() => StateHasChanged());
    }

    private void SetRatingType(ChangeEventArgs e, RatingType rt)
    {
        ratingType = rt;
        _ = LoadData();
    }

    private CountResponse GetCountResponse()
    {
        ArgumentNullException.ThrowIfNull(review);
        if (review.CommanderInfos.Count == 0)
        {
            return new();
        }

        return new()
            {
                CountEnts = review.CommanderInfos.Select(s => new CountEnt()
                {
                    Commander = s.Cmdr,
                    Matchups = s.Count
                }).ToList()
            };
    }

    private List<ReplayPlayerChartDto> GetRatings()
    {
        ArgumentNullException.ThrowIfNull(review);
        if (review.CommanderInfos.Count == 0)
        {
            return new();
        }

        return review.RatingInfos.Select(s => new ReplayPlayerChartDto()
            {
                Replay = s.Replay,
                ReplayPlayerRatingInfo = new()
                {
                    Rating = s.ReplayPlayerRatingInfo?.Rating ?? 0,
                    Games = s.ReplayPlayerRatingInfo?.Games ?? 0
                }
            }).ToList();
    }
}
