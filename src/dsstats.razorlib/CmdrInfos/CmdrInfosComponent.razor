@using dsstats.razorlib.Builds
@using dsstats.razorlib.Players
@using dsstats.razorlib.Replays
@using dsstats.shared
@using dsstats.shared.Interfaces
@using Microsoft.JSInterop
@inject ICmdrInfoService cmdrInfoService
@inject IReplaysService replayService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@implements IDisposable

<div class="@(interestPlayer != null || interestReplay != null ? "visually-hidden" : "")">
    <div class="d-inline-block bgchart">
        <CascadingValue Value="Request">
            <CmdrInfoRequestComponent OnRequestChanged="e => RequestChanged()" />
        </CascadingValue>
    </div>
    <div class="row">
        <div class="col-auto">
            <div style="height: 30px;">
                @if (isLoading)
                {
                    <div class="spinner-border spinner-border-sm text-danger" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                }
            </div>
            <div class="d-flex bgchart p-1 rounded">
                <div>
                    <h4>
                        Players who played
                        <span class="text-warning">@Request.Interest </span>
                        and their success
                        <span class="text-light" style="font-size: 1rem;"> (&sum; > @(Request.RatingType == RatingType.CmdrTE ? "1" : "9"))</span>
                    </h4>
                </div>
                <div class="ms-auto">
                    &Oslash;
                    <span class="@(avgGain < 0 ? "text-danger" : "text-success")">
                        @avgGain.ToString("N2")
                    </span>
                </div>
            </div>
            <CmdrPlayerInfoComponent @ref="cmdrPlayerInfoComponent" CmdrPlayerInfos="playerInfos"
                                     OnPlayerDetailsRequest="PlayerDetailsRequest" OnPlayerReplaysRequest="PlayerReplaysRequest" />
        </div>
        <div class="col-auto" style="min-width: 700px;">
            <div class="ms-2 mb-2">
                <button class="btn btn-sm btn-outline-light bgchart"
                        type="button"
                        id="buildreplaystoggle"
                        data-bs-toggle="collapse"
                        data-bs-target="#buildreplays"
                        aria-expanded="false"
                        aria-controls="buildreplays"
                        @onclick="e => showReplays = !showReplays">
                    <span class="bi @(showReplays ? "bi bi-chevron-double-down" : "bi-chevron-double-up")"></span>
                    Replays
                </button>
            </div>
            <div class="collapse" id="buildreplays">
                <div class="bgchart p-1 rounded">
                    @if (replayInterestPlayer is not null)
                    {
                        <h4>
                            Replays with <span class="text-warning">@replayInterestPlayer.Name</span> playing <span class="text-warning">@Request.Interest</span>
                            <span class="bi bi-x-lg text-danger pointer" @onclick="ResetReplayInterestPlayer"></span>
                        </h4>
                    }
                    else
                    {
                        <h4>Replays with <span class="text-warning">@Request.Interest</span></h4>
                    }
                </div>
                @if (showReplays)
                {
                    <BuildReplaysComponent @ref="buildReplaysComponent" Request="buildRequest" OnReplayRequest="ReplayRequest" />
                }
            </div>
        </div>
        <div class="col-auto">
            <div class="ms-2 mt-2 p-2 bgchart text-warning" style="max-width: 1000px;">
                <p>
                    This table, referred to as 'Player Metrics by Commander', offers valuable insights into the success and impact of players who choose a specific commander.
                    The success of a player is measured by a strength value, which is a comprehensive metric normalized from a weighted combination of various factors, including the number of games played, winrate, average rating gain, and player rating.
                    This customized performance metric allows you to assess a player's proficiency with a specific commander, as well as their impact on the commander statistics.
                </p>
            </div>
        </div>
    </div>
</div>
@if (interestPlayer is not null)
{
    @* <PlayerDetails PlayerId="interestPlayer" RatingType="Request.RatingType" RatingCalcType="RatingCalcType.Dsstats" OnCloseRequested="e => interestPlayer = null" /> *@
    <dsstats.razorlib.Players.Profile.ProfileComponent PlayerId ="interestPlayer" RatingType="Request.RatingType" RatingCalcType="RatingCalcType.Dsstats" OnCloseRequested="e => interestPlayer = null" />
}
@if (interestReplay is not null)
{
    <ReplayComponent Replay="interestReplay" IsCloseable="true" IsScrollable="false" OnCloseRequested="e => interestReplay = null" />
}

@code {
    [Parameter, EditorRequired]
    public CmdrInfoRequest Request { get; set; } = default!;
    [Parameter]
    public EventCallback<CmdrInfoRequest> OnRequestChanged { get; set; }

    CancellationTokenSource cts = new();
    SemaphoreSlim ss = new(1, 1);

    bool isLoading = false;

    List<CmdrPlayerInfo> playerInfos = new();
    double avgGain => !playerInfos.Any() ? 0 : Math.Round(playerInfos.Average(a => a.AvgGain), 2);

    private bool showReplays;
    CmdrPlayerInfoComponent? cmdrPlayerInfoComponent;
    BuildReplaysComponent? buildReplaysComponent;

    BuildRequest buildRequest = new();

    private PlayerId? interestPlayer { get; set; }
    private RequestNames? replayInterestPlayer { get; set; }
    private ReplayDto? interestReplay { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // await SetCount(Request);
        RequestChanged(true);
        await base.OnInitializedAsync();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            JSRuntime.InvokeVoidAsync("enableTooltips");
        }
        base.OnAfterRender(firstRender);
    }

    private void SetBuildRequest()
    {
        buildRequest.RatingType = Request.RatingType;
        buildRequest.TimePeriod = Request.TimePeriod;
        buildRequest.Interest = Request.Interest;
        buildRequest.FromRating = 0;
        buildRequest.ToRating = Data.MaxBuildRating;
        buildRequest.Breakpoint = Breakpoint.All;
        buildRequest.WithLeavers = true;
        buildRequest.PlayerNames.Clear();
        if (replayInterestPlayer is not null)
        {
            buildRequest.PlayerNames.Add(replayInterestPlayer);
        }
        buildReplaysComponent?.Reload();
    }

    private async Task LoadPlayerInfos(CmdrInfoRequest request)
    {
        playerInfos = await cmdrInfoService.GetCmdrPlayerInfos(request, cts.Token);
        cmdrPlayerInfoComponent?.SetStrength(playerInfos);
        SetBuildRequest();
    }

    private void ShowHideReplays(bool show)
    {
        showReplays = show;
        if (showReplays)
        {
            RequestChanged();
        }
        else
        {
            InvokeAsync(() => StateHasChanged());
        }
    }


    public async void RequestChanged(bool init = false)
    {
        await ss.WaitAsync();

        try
        {
            isLoading = true;
            await InvokeAsync(() => StateHasChanged());
            await LoadPlayerInfos(Request);
            isLoading = false;
            await InvokeAsync(() => StateHasChanged());
            if (!init)
            {
                await JSRuntime.InvokeVoidAsync("enableTooltips");
                await OnRequestChanged.InvokeAsync(Request);
            }
        }
        finally
        {
            ss.Release();
        }
    }

    private void PlayerDetailsRequest(RequestNames requestNames)
    {
        interestPlayer = new(requestNames.ToonId, requestNames.RealmId, requestNames.RegionId);
        InvokeAsync(() => StateHasChanged());
    }

    private async Task ReplayRequest(string replayHash)
    {
        interestReplay = await replayService.GetReplay(replayHash);
        await InvokeAsync(() => StateHasChanged());
    }

    private void PlayerReplaysRequest(RequestNames requestNames)
    {
        replayInterestPlayer = requestNames;
        if (!showReplays)
        {
            showReplays = true;
            InvokeAsync(() => StateHasChanged());
            JSRuntime.InvokeVoidAsync("toggleButton", "buildreplaystoggle", "buildreplays");
        }
        SetBuildRequest();
    }

    private void ResetReplayInterestPlayer()
    {
        replayInterestPlayer = null;
        SetBuildRequest();
    }

    public void Dispose()
    {
        cts.Cancel();
        cts.Dispose();
        ss.Dispose();
    }
}
