@using Microsoft.AspNetCore.Components.Forms
@using System.Net.Http.Json
@using System.Net.Http.Headers
@using Microsoft.Extensions.Logging
@inject HttpClient httpClient
@inject ILogger<IhUploadComp> logger

<p>
    <label>
        Upload up to @maxAllowedFiles files:
        <InputFile OnChange="OnInputFileChange" multiple />
    </label>
</p>

@code {
    [Parameter, EditorRequired]
    public Guid Guid { get; set; }

    private int maxAllowedFiles = 3;
    private bool shouldRender;

    protected override bool ShouldRender() => shouldRender;

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        shouldRender = false;
        long maxFileSize = 1024 * 1024 * 3;
        var upload = false;

        using var content = new MultipartFormDataContent();

        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {
            try
            {
                var fileContent =
                    new StreamContent(file.OpenReadStream(maxFileSize));

                fileContent.Headers.ContentType =
                    new MediaTypeHeaderValue("application/octet-stream");

                content.Add(
                    content: fileContent,
                    name: "\"files\"",
                    fileName: file.Name);

                upload = true;
            }
            catch (Exception ex)
            {
                logger.LogError("failed uploading files: {error}", ex.Message);
            }
        }

        if (upload)
        {
            try
            {
                httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("DS8upload77");
                var response = await httpClient.PostAsync($"/api8/v1/upload/uploadreplays/{Guid}", content);
                response.EnsureSuccessStatusCode();
            }
            catch (Exception ex)
            {
                logger.LogError("failed uploading replays: {error}", ex.Message);
            }
        }

        shouldRender = true;
    }
}
