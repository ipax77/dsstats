@using dsstats.razorlib.Replays
@using dsstats.razorlib.Services
@using dsstats.shared
@using dsstats.shared.Interfaces
@inject ITourneysService tourneysService
@inject IReplaysService replaysService

@if (ihSession != null)
{
    <div class="card" style="width: 620px;">
        <div class="card-header bgchart2">
            <div class="d-flex">
                <div>
                    @if (isLoading)
                    {
                        <div class="spinner-border spinner-border-sm text-danger" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    }
                    else
                    {
                        <span class="bi bi-x-lg text-danger pointer" @onclick="e => OnClose.InvokeAsync()"></span>
                    }
                </div>
                <div class="ms-2">
                    <h4 class="card-title">@ihSession.Created.ToString("yyyy-MM-dd") @ihSession.Players Players @ihSession.Games Games</h4>
                </div>
            </div>
        </div>
        <div class="card-body bgchart">
            <div class="tableFixHead table-responsive text-nowrap" style="max-width: 590px; max-height: 50vh;" tabindex="1">
                <table class="tptable table">
                    <thead class="user-select-none">
                        <tr>
                            <th>Name</th>
                            <th><span data-bs-toggle="tooltip" data-bs-placement="top" data-bs-title="Rating at session start">Rating</span></th>
                            <th><span data-bs-toggle="tooltip" data-bs-placement="top" data-bs-title="Session performance based on opponent ratings">Performance</span></th>
                            <th>Games</th>
                            <th>Obs</th>
                            <th>Winrate</th>
                            <th>Rating <span class="bi bi-arrow-down-up"></span></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var player in ihSession.IhSessionPlayers
                       .OrderByDescending(o => o.Games == 0 ? 0 : o.Wins / (double)o.Games))
                        {
                            var ratingChange = player.RatingEnd - player.RatingStart;
                            <tr>
                                <td>@player.Name</td>
                                <td>@player.RatingStart</td>
                                <td>@player.Performance</td>
                                <td>@player.Games</td>
                                <td>@player.Obs</td>
                                <td>@HelperService.GetPercentageString(player.Wins, player.Games)</td>
                                <td>
                                    <span class="@(ratingChange >= 0 ? "text-success" : "text-danger")">
                                        @ratingChange
                                    </span>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
    @if (replays.Count > 0)
    {
        <div class="mb-5 ms-2">
            <h4>Replays</h4>
            @if (interestReplay is not null)
            {
                <ReplayComponent Replay="interestReplay" IsCloseable="true" OnCloseRequested="e => interestReplay = null" />
            }
            <div class="mt-2 tableFixHead table-responsive @(interestReplay == null ? "" : "visually-hidden")" style="max-height: 50vh; max-width: 700px;">
                <table class="tptable table">
                    <thead>
                        <tr>
                            <th>GameTime</th>
                            <th>Duration</th>
                            <th>Team1</th>
                            <th>Team2</th>
                            <th>Exp2Win</th>
                            <th>GameMode</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var replay in replays)
                        {
                            <tr class="pointer" @onclick="e => LoadReplay(replay.ReplayHash)">
                                <td>@replay.GameTime.ToString("yyyy-MM-dd")</td>
                                <td>@TimeSpan.FromSeconds(replay.Duration).ToString(@"hh\:mm\:ss")</td>
                                <td>
                                    <ReplayTeam Team="@replay.CommandersTeam1" WinnerTeam="replay.WinnerTeam == 1" />
                                </td>
                                <td>
                                    <ReplayTeam Team="@replay.CommandersTeam2" WinnerTeam="replay.WinnerTeam == 2" />
                                </td>
                                <td>
                                    @if (replay.Exp2Win is not null && replay.Exp2Win > 0)
                                    {
                                        <div>
                                            <span class="@(replay.Exp2Win >= 0.5 ? "text-success" : "text-danger")">
                                                @((replay.Exp2Win.Value * 100).ToString("N0"))%
                                            </span>
                                        </div>
                                    }
                                </td>
                                <td>@HelperService.GetGameMode(replay)</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    }
}

@code {
    [Parameter, EditorRequired]
    public Guid GroupdId { get; set; } = default!;

    [Parameter]
    public EventCallback OnClose { get; set; }

    private bool isLoading = false;

    IhSessionDto? ihSession = null;
    ReplayDto? interestReplay = null;

    List<ReplayListDto> replays = [];

    public async Task LoadData(Guid groupId)
    {
        replays.Clear();
        interestReplay = null;
        isLoading = true;
        await InvokeAsync(() => StateHasChanged());
        ihSession = await tourneysService.GetIhSession(groupId);
        if (ihSession != null && ihSession.Games > 0)
        {
            replays = await tourneysService.GetReplays(ihSession.GroupId);
        }
        isLoading = false;
        await InvokeAsync(() => StateHasChanged());
    }

    private async Task LoadReplay(string replayHash)
    {
        interestReplay = await replaysService.GetReplay(replayHash);
        await InvokeAsync(() => StateHasChanged());
    }
}
