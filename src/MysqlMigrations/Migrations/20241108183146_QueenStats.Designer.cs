// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using dsstats.db8;

#nullable disable

namespace MysqlMigrations.Migrations
{
    [DbContext(typeof(ReplayContext))]
    [Migration("20241108183146_QueenStats")]
    partial class QueenStats
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("DsAbilityDsUnit", b =>
                {
                    b.Property<int>("AbilitiesDsAbilityId")
                        .HasColumnType("int");

                    b.Property<int>("DsUnitsDsUnitId")
                        .HasColumnType("int");

                    b.HasKey("AbilitiesDsAbilityId", "DsUnitsDsUnitId");

                    b.HasIndex("DsUnitsDsUnitId");

                    b.ToTable("DsAbilityDsUnit");
                });

            modelBuilder.Entity("ReplayUploader", b =>
                {
                    b.Property<int>("ReplaysReplayId")
                        .HasColumnType("int");

                    b.Property<int>("UploadersUploaderId")
                        .HasColumnType("int");

                    b.HasKey("ReplaysReplayId", "UploadersUploaderId");

                    b.HasIndex("UploadersUploaderId");

                    b.ToTable("UploaderReplays", (string)null);
                });

            modelBuilder.Entity("dsstats.db8.ArcadePlayerRating", b =>
                {
                    b.Property<int>("ArcadePlayerRatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ArcadePlayerRatingId"));

                    b.Property<double>("Confidence")
                        .HasColumnType("double");

                    b.Property<double>("Consistency")
                        .HasColumnType("double");

                    b.Property<int>("Games")
                        .HasColumnType("int");

                    b.Property<bool>("IsUploader")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Main")
                        .HasColumnType("int");

                    b.Property<int>("MainCount")
                        .HasColumnType("int");

                    b.Property<int>("Mvp")
                        .HasColumnType("int");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int>("Pos")
                        .HasColumnType("int");

                    b.Property<double>("Rating")
                        .HasColumnType("double");

                    b.Property<int>("RatingType")
                        .HasColumnType("int");

                    b.Property<int>("TeamGames")
                        .HasColumnType("int");

                    b.Property<int>("Wins")
                        .HasColumnType("int");

                    b.HasKey("ArcadePlayerRatingId");

                    b.HasIndex("PlayerId");

                    b.HasIndex("RatingType");

                    b.ToTable("ArcadePlayerRatings");
                });

            modelBuilder.Entity("dsstats.db8.ArcadePlayerRatingChange", b =>
                {
                    b.Property<int>("ArcadePlayerRatingChangeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ArcadePlayerRatingChangeId"));

                    b.Property<int>("ArcadePlayerRatingId")
                        .HasColumnType("int");

                    b.Property<float>("Change10d")
                        .HasColumnType("float");

                    b.Property<float>("Change24h")
                        .HasColumnType("float");

                    b.Property<float>("Change30d")
                        .HasColumnType("float");

                    b.HasKey("ArcadePlayerRatingChangeId");

                    b.HasIndex("ArcadePlayerRatingId")
                        .IsUnique();

                    b.ToTable("ArcadePlayerRatingChanges");
                });

            modelBuilder.Entity("dsstats.db8.ArcadeReplay", b =>
                {
                    b.Property<int>("ArcadeReplayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ArcadeReplayId"));

                    b.Property<long>("BnetBucketId")
                        .HasColumnType("bigint");

                    b.Property<long>("BnetRecordId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<int>("GameMode")
                        .HasColumnType("int");

                    b.Property<DateTime>("Imported")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)");

                    b.Property<int>("PlayerCount")
                        .HasColumnType("int");

                    b.Property<int>("RegionId")
                        .HasColumnType("int");

                    b.Property<string>("ReplayHash")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<bool>("TournamentEdition")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("WinnerTeam")
                        .HasColumnType("int");

                    b.HasKey("ArcadeReplayId");

                    b.HasIndex("ReplayHash");

                    b.HasIndex("GameMode", "CreatedAt");

                    b.HasIndex("RegionId", "BnetBucketId", "BnetRecordId")
                        .IsUnique();

                    b.HasIndex("RegionId", "GameMode", "CreatedAt");

                    b.ToTable("ArcadeReplays");
                });

            modelBuilder.Entity("dsstats.db8.ArcadeReplayDsPlayer", b =>
                {
                    b.Property<int>("ArcadeReplayDsPlayerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ArcadeReplayDsPlayerId"));

                    b.Property<int>("ArcadeReplayId")
                        .HasColumnType("int");

                    b.Property<int>("Discriminator")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int>("PlayerResult")
                        .HasColumnType("int");

                    b.Property<int>("SlotNumber")
                        .HasColumnType("int");

                    b.Property<int>("Team")
                        .HasColumnType("int");

                    b.HasKey("ArcadeReplayDsPlayerId");

                    b.HasIndex("ArcadeReplayId");

                    b.HasIndex("PlayerId");

                    b.ToTable("ArcadeReplayDsPlayers");
                });

            modelBuilder.Entity("dsstats.db8.ArcadeReplayDsPlayerRating", b =>
                {
                    b.Property<int>("ArcadeReplayDsPlayerRatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ArcadeReplayDsPlayerRatingId"));

                    b.Property<int>("ArcadeReplayDsPlayerId")
                        .HasColumnType("int");

                    b.Property<int>("ArcadeReplayRatingId")
                        .HasColumnType("int");

                    b.Property<float>("Confidence")
                        .HasColumnType("float");

                    b.Property<float>("Consistency")
                        .HasColumnType("float");

                    b.Property<int>("GamePos")
                        .HasColumnType("int");

                    b.Property<int>("Games")
                        .HasColumnType("int");

                    b.Property<float>("Rating")
                        .HasColumnType("float");

                    b.Property<float>("RatingChange")
                        .HasColumnType("float");

                    b.HasKey("ArcadeReplayDsPlayerRatingId");

                    b.HasIndex("ArcadeReplayDsPlayerId")
                        .IsUnique();

                    b.HasIndex("ArcadeReplayRatingId");

                    b.ToTable("ArcadeReplayDsPlayerRatings");
                });

            modelBuilder.Entity("dsstats.db8.ArcadeReplayRating", b =>
                {
                    b.Property<int>("ArcadeReplayRatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ArcadeReplayRatingId"));

                    b.Property<int>("ArcadeReplayId")
                        .HasColumnType("int");

                    b.Property<int>("AvgRating")
                        .HasColumnType("int");

                    b.Property<float>("ExpectationToWin")
                        .HasColumnType("float");

                    b.Property<int>("LeaverType")
                        .HasColumnType("int");

                    b.Property<int>("RatingType")
                        .HasColumnType("int");

                    b.HasKey("ArcadeReplayRatingId");

                    b.HasIndex("ArcadeReplayId")
                        .IsUnique();

                    b.ToTable("ArcadeReplayRatings");
                });

            modelBuilder.Entity("dsstats.db8.BattleNetInfo", b =>
                {
                    b.Property<int>("BattleNetInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("BattleNetInfoId"));

                    b.Property<int>("BattleNetId")
                        .HasColumnType("int");

                    b.Property<int>("UploaderId")
                        .HasColumnType("int");

                    b.HasKey("BattleNetInfoId");

                    b.HasIndex("UploaderId");

                    b.ToTable("BattleNetInfos");
                });

            modelBuilder.Entity("dsstats.db8.BonusDamage", b =>
                {
                    b.Property<int>("BonusDamageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("BonusDamageId"));

                    b.Property<int>("Damage")
                        .HasColumnType("int");

                    b.Property<int>("DsWeaponId")
                        .HasColumnType("int");

                    b.Property<int>("PerUpgrade")
                        .HasColumnType("int");

                    b.Property<int>("UnitType")
                        .HasColumnType("int");

                    b.HasKey("BonusDamageId");

                    b.HasIndex("DsWeaponId");

                    b.HasIndex("UnitType");

                    b.ToTable("BonusDamages");
                });

            modelBuilder.Entity("dsstats.db8.ComboPlayerRating", b =>
                {
                    b.Property<int>("ComboPlayerRatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ComboPlayerRatingId"));

                    b.Property<double>("Confidence")
                        .HasColumnType("double");

                    b.Property<double>("Consistency")
                        .HasColumnType("double");

                    b.Property<int>("Games")
                        .HasColumnType("int");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int>("Pos")
                        .HasColumnType("int");

                    b.Property<double>("Rating")
                        .HasColumnType("double");

                    b.Property<int>("RatingType")
                        .HasColumnType("int");

                    b.Property<int>("Wins")
                        .HasColumnType("int");

                    b.HasKey("ComboPlayerRatingId");

                    b.HasIndex("PlayerId");

                    b.HasIndex("RatingType");

                    b.ToTable("ComboPlayerRatings");
                });

            modelBuilder.Entity("dsstats.db8.ComboReplayPlayerRating", b =>
                {
                    b.Property<int>("ComboReplayPlayerRatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ComboReplayPlayerRatingId"));

                    b.Property<double>("Change")
                        .HasPrecision(5, 2)
                        .HasColumnType("double");

                    b.Property<double>("Confidence")
                        .HasPrecision(5, 2)
                        .HasColumnType("double");

                    b.Property<double>("Consistency")
                        .HasPrecision(5, 2)
                        .HasColumnType("double");

                    b.Property<int>("GamePos")
                        .HasColumnType("int");

                    b.Property<int>("Games")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<int>("ReplayPlayerId")
                        .HasColumnType("int");

                    b.HasKey("ComboReplayPlayerRatingId");

                    b.HasIndex("ReplayPlayerId")
                        .IsUnique();

                    b.ToTable("ComboReplayPlayerRatings");
                });

            modelBuilder.Entity("dsstats.db8.ComboReplayRating", b =>
                {
                    b.Property<int>("ComboReplayRatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ComboReplayRatingId"));

                    b.Property<int>("AvgRating")
                        .HasColumnType("int");

                    b.Property<double>("ExpectationToWin")
                        .HasPrecision(5, 2)
                        .HasColumnType("double");

                    b.Property<bool>("IsPreRating")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("LeaverType")
                        .HasColumnType("int");

                    b.Property<int>("RatingType")
                        .HasColumnType("int");

                    b.Property<int>("ReplayId")
                        .HasColumnType("int");

                    b.HasKey("ComboReplayRatingId");

                    b.HasIndex("RatingType");

                    b.HasIndex("ReplayId")
                        .IsUnique();

                    b.ToTable("ComboReplayRatings");
                });

            modelBuilder.Entity("dsstats.db8.CommanderMmr", b =>
                {
                    b.Property<int>("CommanderMmrId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("CommanderMmrId"));

                    b.Property<double>("AntiSynergyMmr")
                        .HasColumnType("double");

                    b.Property<int>("OppRace")
                        .HasColumnType("int");

                    b.Property<int>("Race")
                        .HasColumnType("int");

                    b.Property<double>("SynergyMmr")
                        .HasColumnType("double");

                    b.HasKey("CommanderMmrId");

                    b.HasIndex("Race", "OppRace");

                    b.ToTable("CommanderMmrs");
                });

            modelBuilder.Entity("dsstats.db8.DsAbility", b =>
                {
                    b.Property<int>("DsAbilityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("DsAbilityId"));

                    b.Property<int>("AbilityTarget")
                        .HasColumnType("int");

                    b.Property<float>("AoeRadius")
                        .HasColumnType("float");

                    b.Property<int>("CastRange")
                        .HasColumnType("int");

                    b.Property<int>("Commander")
                        .HasColumnType("int");

                    b.Property<int>("Cooldown")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(310)
                        .HasColumnType("varchar(310)");

                    b.Property<float>("EnergyCost")
                        .HasColumnType("float");

                    b.Property<bool>("GlobalTimer")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Requirements")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("DsAbilityId");

                    b.HasIndex("Name");

                    b.ToTable("DsAbilities");
                });

            modelBuilder.Entity("dsstats.db8.DsPickBan", b =>
                {
                    b.Property<int>("DsPickBanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("DsPickBanId"));

                    b.Property<string>("Bans")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("PickBanMode")
                        .HasColumnType("int");

                    b.Property<string>("Picks")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Time")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)");

                    b.HasKey("DsPickBanId");

                    b.ToTable("DsPickBans");
                });

            modelBuilder.Entity("dsstats.db8.DsUnit", b =>
                {
                    b.Property<int>("DsUnitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("DsUnitId"));

                    b.Property<int>("Armor")
                        .HasColumnType("int");

                    b.Property<int>("Color")
                        .HasColumnType("int");

                    b.Property<int>("Commander")
                        .HasColumnType("int");

                    b.Property<int>("Cost")
                        .HasColumnType("int");

                    b.Property<float>("EnergyRegen")
                        .HasColumnType("float");

                    b.Property<float>("HealthRegen")
                        .HasColumnType("float");

                    b.Property<int>("Life")
                        .HasColumnType("int");

                    b.Property<int>("MaxEnergy")
                        .HasColumnType("int");

                    b.Property<int>("MovementType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("ShieldArmor")
                        .HasColumnType("int");

                    b.Property<int>("Shields")
                        .HasColumnType("int");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.Property<float>("Speed")
                        .HasColumnType("float");

                    b.Property<int>("StartingEnergy")
                        .HasColumnType("int");

                    b.Property<int>("Tier")
                        .HasColumnType("int");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.Property<int>("UnitType")
                        .HasColumnType("int");

                    b.HasKey("DsUnitId");

                    b.HasIndex("Commander");

                    b.HasIndex("Name");

                    b.HasIndex("Name", "Commander");

                    b.ToTable("DsUnits");
                });

            modelBuilder.Entity("dsstats.db8.DsUpdate", b =>
                {
                    b.Property<int>("DsUpdateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("DsUpdateId"));

                    b.Property<string>("Change")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Commander")
                        .HasColumnType("int");

                    b.Property<string>("DiscordId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Time")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)");

                    b.HasKey("DsUpdateId");

                    b.HasIndex("Time");

                    b.ToTable("DsUpdates");
                });

            modelBuilder.Entity("dsstats.db8.DsUpgrade", b =>
                {
                    b.Property<int>("DsUpgradeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("DsUpgradeId"));

                    b.Property<int>("Commander")
                        .HasColumnType("int");

                    b.Property<int>("Cost")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<int?>("DsUnitId")
                        .HasColumnType("int");

                    b.Property<int>("RequiredTier")
                        .HasColumnType("int");

                    b.Property<string>("Upgrade")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("DsUpgradeId");

                    b.HasIndex("DsUnitId");

                    b.HasIndex("Upgrade");

                    b.ToTable("DsUpgrades");
                });

            modelBuilder.Entity("dsstats.db8.DsWeapon", b =>
                {
                    b.Property<int>("DsWeaponId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("DsWeaponId"));

                    b.Property<float>("AttackSpeed")
                        .HasColumnType("float");

                    b.Property<int>("Attacks")
                        .HasColumnType("int");

                    b.Property<int>("CanTarget")
                        .HasColumnType("int");

                    b.Property<int>("Damage")
                        .HasColumnType("int");

                    b.Property<int>("DamagePerUpgrade")
                        .HasColumnType("int");

                    b.Property<int>("DsUnitId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<float>("Range")
                        .HasColumnType("float");

                    b.HasKey("DsWeaponId");

                    b.HasIndex("DsUnitId");

                    b.ToTable("DsWeapons");
                });

            modelBuilder.Entity("dsstats.db8.Event", b =>
                {
                    b.Property<int>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("EventId"));

                    b.Property<Guid>("EventGuid")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("EventStart")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)");

                    b.Property<string>("ExternalLink")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("GameMode")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("WinnerTeam")
                        .HasColumnType("longtext");

                    b.HasKey("EventId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Events");
                });

            modelBuilder.Entity("dsstats.db8.Faq", b =>
                {
                    b.Property<int>("FaqId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("FaqId"));

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("varchar(400)");

                    b.Property<DateTime>("CreatedAt")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)");

                    b.Property<int>("Upvotes")
                        .HasColumnType("int");

                    b.HasKey("FaqId");

                    b.HasIndex("Question");

                    b.ToTable("Faqs");
                });

            modelBuilder.Entity("dsstats.db8.FaqVote", b =>
                {
                    b.Property<int>("FaqVoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("FaqVoteId"));

                    b.Property<int>("FaqId")
                        .HasColumnType("int");

                    b.HasKey("FaqVoteId");

                    b.ToTable("FaqVotes");
                });

            modelBuilder.Entity("dsstats.db8.FunStatsMemory", b =>
                {
                    b.Property<int>("FunStatsMemoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("FunStatsMemoryId"));

                    b.Property<int>("AvgGameDuration")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)");

                    b.Property<string>("FirstReplay")
                        .HasColumnType("longtext");

                    b.Property<string>("GreatestArmyReplay")
                        .HasColumnType("longtext");

                    b.Property<string>("GreatestComebackReplay")
                        .HasColumnType("longtext");

                    b.Property<string>("MostCompetitiveReplay")
                        .HasColumnType("longtext");

                    b.Property<string>("MostUpgradesReplay")
                        .HasColumnType("longtext");

                    b.Property<int>("RatingType")
                        .HasColumnType("int");

                    b.Property<int>("TimePeriod")
                        .HasColumnType("int");

                    b.Property<long>("TotalTimePlayed")
                        .HasColumnType("bigint");

                    b.Property<int>("UnitCountLeast")
                        .HasColumnType("int");

                    b.Property<int>("UnitCountMost")
                        .HasColumnType("int");

                    b.Property<string>("UnitNameLeast")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UnitNameMost")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("FunStatsMemoryId");

                    b.ToTable("FunStatMemories");
                });

            modelBuilder.Entity("dsstats.db8.GroupByHelper", b =>
                {
                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<bool>("Group")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("Name");

                    b.ToTable((string)null);

                    b.ToView("GroupByHelper", (string)null);
                });

            modelBuilder.Entity("dsstats.db8.IhSession", b =>
                {
                    b.Property<int>("IhSessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IhSessionId"));

                    b.Property<bool>("Closed")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("Created")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)");

                    b.Property<int>("Games")
                        .HasColumnType("int");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("char(36)");

                    b.Property<string>("GroupState")
                        .HasColumnType("longtext");

                    b.Property<string>("GroupStateV2")
                        .HasColumnType("longtext");

                    b.Property<int>("Players")
                        .HasColumnType("int");

                    b.Property<int>("RatingType")
                        .HasColumnType("int");

                    b.HasKey("IhSessionId");

                    b.HasIndex("GroupId")
                        .IsUnique();

                    b.ToTable("IhSessions");
                });

            modelBuilder.Entity("dsstats.db8.IhSessionPlayer", b =>
                {
                    b.Property<int>("IhSessionPlayerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IhSessionPlayerId"));

                    b.Property<int>("Games")
                        .HasColumnType("int");

                    b.Property<int>("IhSessionId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Obs")
                        .HasColumnType("int");

                    b.Property<int>("Performance")
                        .HasColumnType("int");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int>("RatingEnd")
                        .HasColumnType("int");

                    b.Property<int>("RatingStart")
                        .HasColumnType("int");

                    b.Property<int>("Wins")
                        .HasColumnType("int");

                    b.HasKey("IhSessionPlayerId");

                    b.HasIndex("IhSessionId");

                    b.HasIndex("PlayerId");

                    b.ToTable("IhSessionPlayers");
                });

            modelBuilder.Entity("dsstats.db8.MaterializedArcadeReplay", b =>
                {
                    b.Property<int>("MaterializedArcadeReplayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("MaterializedArcadeReplayId"));

                    b.Property<int>("ArcadeReplayId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<int>("GameMode")
                        .HasColumnType("int");

                    b.Property<int>("WinnerTeam")
                        .HasColumnType("int");

                    b.HasKey("MaterializedArcadeReplayId");

                    b.HasIndex("CreatedAt");

                    b.ToTable("MaterializedArcadeReplays");
                });

            modelBuilder.Entity("dsstats.db8.NoUploadResult", b =>
                {
                    b.Property<int>("NoUploadResultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("NoUploadResultId"));

                    b.Property<DateTime>("Created")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)");

                    b.Property<DateTime>("LatestNoUpload")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)");

                    b.Property<DateTime>("LatestReplay")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)");

                    b.Property<DateTime>("LatestUpload")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)");

                    b.Property<int>("NoUploadDefeats")
                        .HasColumnType("int");

                    b.Property<int>("NoUploadTotal")
                        .HasColumnType("int");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int>("TotalReplays")
                        .HasColumnType("int");

                    b.HasKey("NoUploadResultId");

                    b.HasIndex("PlayerId");

                    b.ToTable("NoUploadResults");
                });

            modelBuilder.Entity("dsstats.db8.Player", b =>
                {
                    b.Property<int>("PlayerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("PlayerId"));

                    b.Property<int>("ArcadeDefeatsSinceLastUpload")
                        .HasColumnType("int");

                    b.Property<int>("DisconnectCount")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("NotUploadCount")
                        .HasColumnType("int");

                    b.Property<int>("RageQuitCount")
                        .HasColumnType("int");

                    b.Property<int>("RealmId")
                        .HasColumnType("int");

                    b.Property<int>("RegionId")
                        .HasColumnType("int");

                    b.Property<int>("ToonId")
                        .HasColumnType("int");

                    b.Property<int?>("UploaderId")
                        .HasColumnType("int");

                    b.HasKey("PlayerId");

                    b.HasIndex("UploaderId");

                    b.HasIndex("RegionId", "RealmId", "ToonId")
                        .IsUnique();

                    b.ToTable("Players");
                });

            modelBuilder.Entity("dsstats.db8.PlayerRating", b =>
                {
                    b.Property<int>("PlayerRatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("PlayerRatingId"));

                    b.Property<int>("ArcadeDefeatsSinceLastUpload")
                        .HasColumnType("int");

                    b.Property<double>("Confidence")
                        .HasColumnType("double");

                    b.Property<double>("Consistency")
                        .HasColumnType("double");

                    b.Property<int>("Games")
                        .HasColumnType("int");

                    b.Property<bool>("IsUploader")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Main")
                        .HasColumnType("int");

                    b.Property<int>("MainCount")
                        .HasColumnType("int");

                    b.Property<int>("Mvp")
                        .HasColumnType("int");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int>("Pos")
                        .HasColumnType("int");

                    b.Property<double>("Rating")
                        .HasColumnType("double");

                    b.Property<int>("RatingType")
                        .HasColumnType("int");

                    b.Property<int>("TeamGames")
                        .HasColumnType("int");

                    b.Property<int>("Wins")
                        .HasColumnType("int");

                    b.HasKey("PlayerRatingId");

                    b.HasIndex("PlayerId");

                    b.HasIndex("RatingType");

                    b.ToTable("PlayerRatings");
                });

            modelBuilder.Entity("dsstats.db8.PlayerRatingChange", b =>
                {
                    b.Property<int>("PlayerRatingChangeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("PlayerRatingChangeId"));

                    b.Property<float>("Change10d")
                        .HasColumnType("float");

                    b.Property<float>("Change24h")
                        .HasColumnType("float");

                    b.Property<float>("Change30d")
                        .HasColumnType("float");

                    b.Property<int>("PlayerRatingId")
                        .HasColumnType("int");

                    b.HasKey("PlayerRatingChangeId");

                    b.HasIndex("PlayerRatingId")
                        .IsUnique();

                    b.ToTable("PlayerRatingChanges");
                });

            modelBuilder.Entity("dsstats.db8.PlayerUpgrade", b =>
                {
                    b.Property<int>("PlayerUpgradeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("PlayerUpgradeId"));

                    b.Property<int>("Gameloop")
                        .HasColumnType("int");

                    b.Property<int>("ReplayPlayerId")
                        .HasColumnType("int");

                    b.Property<int>("UpgradeId")
                        .HasColumnType("int");

                    b.HasKey("PlayerUpgradeId");

                    b.HasIndex("ReplayPlayerId");

                    b.HasIndex("UpgradeId");

                    b.ToTable("PlayerUpgrades");
                });

            modelBuilder.Entity("dsstats.db8.RepPlayerRating", b =>
                {
                    b.Property<int>("RepPlayerRatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("RepPlayerRatingId"));

                    b.Property<float>("Confidence")
                        .HasColumnType("float");

                    b.Property<float>("Consistency")
                        .HasColumnType("float");

                    b.Property<int>("GamePos")
                        .HasColumnType("int");

                    b.Property<int>("Games")
                        .HasColumnType("int");

                    b.Property<float>("Rating")
                        .HasColumnType("float");

                    b.Property<float>("RatingChange")
                        .HasColumnType("float");

                    b.Property<int>("ReplayPlayerId")
                        .HasColumnType("int");

                    b.Property<int>("ReplayRatingInfoId")
                        .HasColumnType("int");

                    b.HasKey("RepPlayerRatingId");

                    b.HasIndex("ReplayPlayerId")
                        .IsUnique();

                    b.HasIndex("ReplayRatingInfoId");

                    b.ToTable("RepPlayerRatings");
                });

            modelBuilder.Entity("dsstats.db8.Replay", b =>
                {
                    b.Property<int>("ReplayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ReplayId"));

                    b.Property<int>("Bunker")
                        .HasColumnType("int");

                    b.Property<int>("Cannon")
                        .HasColumnType("int");

                    b.Property<string>("CommandersTeam1")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CommandersTeam2")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("DefaultFilter")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Downloads")
                        .HasColumnType("int");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<int>("GameMode")
                        .HasColumnType("int");

                    b.Property<DateTime>("GameTime")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)");

                    b.Property<DateTime?>("Imported")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)");

                    b.Property<int>("Maxkillsum")
                        .HasColumnType("int");

                    b.Property<int>("Maxleaver")
                        .HasColumnType("int");

                    b.Property<string>("Middle")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("varchar(4000)");

                    b.Property<int>("Minarmy")
                        .HasColumnType("int");

                    b.Property<int>("Minincome")
                        .HasColumnType("int");

                    b.Property<int>("Minkillsum")
                        .HasColumnType("int");

                    b.Property<int>("Objective")
                        .HasColumnType("int");

                    b.Property<int>("PlayerPos")
                        .HasColumnType("int");

                    b.Property<int>("PlayerResult")
                        .HasColumnType("int");

                    b.Property<byte>("Playercount")
                        .HasColumnType("tinyint unsigned");

                    b.Property<int?>("ReplayEventId")
                        .HasColumnType("int");

                    b.Property<string>("ReplayHash")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("char(64)")
                        .IsFixedLength();

                    b.Property<bool>("ResultCorrected")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("TournamentEdition")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Uploaded")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Views")
                        .HasColumnType("int");

                    b.Property<int>("WinnerTeam")
                        .HasColumnType("int");

                    b.HasKey("ReplayId");

                    b.HasIndex("FileName");

                    b.HasIndex("GameTime");

                    b.HasIndex("Imported");

                    b.HasIndex("Maxkillsum");

                    b.HasIndex("ReplayEventId");

                    b.HasIndex("ReplayHash")
                        .IsUnique();

                    b.HasIndex("GameTime", "GameMode");

                    b.HasIndex("GameTime", "GameMode", "DefaultFilter");

                    b.HasIndex("GameTime", "GameMode", "Maxleaver");

                    b.HasIndex("GameTime", "GameMode", "WinnerTeam");

                    b.ToTable("Replays");
                });

            modelBuilder.Entity("dsstats.db8.ReplayArcadeMatch", b =>
                {
                    b.Property<int>("ReplayArcadeMatchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ReplayArcadeMatchId"));

                    b.Property<int>("ArcadeReplayId")
                        .HasColumnType("int");

                    b.Property<DateTime>("MatchTime")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)");

                    b.Property<int>("ReplayId")
                        .HasColumnType("int");

                    b.HasKey("ReplayArcadeMatchId");

                    b.HasIndex("ArcadeReplayId")
                        .IsUnique();

                    b.HasIndex("MatchTime");

                    b.HasIndex("ReplayId")
                        .IsUnique();

                    b.ToTable("ReplayArcadeMatches");
                });

            modelBuilder.Entity("dsstats.db8.ReplayDownloadCount", b =>
                {
                    b.Property<int>("ReplayDownloadCountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ReplayDownloadCountId"));

                    b.Property<string>("ReplayHash")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("ReplayDownloadCountId");

                    b.ToTable("ReplayDownloadCounts");
                });

            modelBuilder.Entity("dsstats.db8.ReplayEvent", b =>
                {
                    b.Property<int>("ReplayEventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ReplayEventId"));

                    b.Property<int>("Ban1")
                        .HasColumnType("int");

                    b.Property<int>("Ban2")
                        .HasColumnType("int");

                    b.Property<int>("Ban3")
                        .HasColumnType("int");

                    b.Property<int>("Ban4")
                        .HasColumnType("int");

                    b.Property<int>("Ban5")
                        .HasColumnType("int");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<string>("Round")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("RunnerTeam")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("WinnerTeam")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("ReplayEventId");

                    b.HasIndex("EventId");

                    b.ToTable("ReplayEvents");
                });

            modelBuilder.Entity("dsstats.db8.ReplayPlayer", b =>
                {
                    b.Property<int>("ReplayPlayerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ReplayPlayerId"));

                    b.Property<int>("APM")
                        .HasColumnType("int");

                    b.Property<int>("Army")
                        .HasColumnType("int");

                    b.Property<string>("Clan")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("DidNotUpload")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Downloads")
                        .HasColumnType("int");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<int>("GamePos")
                        .HasColumnType("int");

                    b.Property<int>("Income")
                        .HasColumnType("int");

                    b.Property<bool>("IsLeaver")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsUploader")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Kills")
                        .HasColumnType("int");

                    b.Property<string>("LastSpawnHash")
                        .HasMaxLength(64)
                        .HasColumnType("char(64)")
                        .IsFixedLength();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("OppRace")
                        .HasColumnType("int");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int>("PlayerResult")
                        .HasColumnType("int");

                    b.Property<int>("Race")
                        .HasColumnType("int");

                    b.Property<string>("Refineries")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<int>("ReplayId")
                        .HasColumnType("int");

                    b.Property<int>("Team")
                        .HasColumnType("int");

                    b.Property<string>("TierUpgrades")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<int?>("UpgradeId")
                        .HasColumnType("int");

                    b.Property<int>("UpgradesSpent")
                        .HasColumnType("int");

                    b.Property<int>("Views")
                        .HasColumnType("int");

                    b.HasKey("ReplayPlayerId");

                    b.HasIndex("Kills");

                    b.HasIndex("LastSpawnHash")
                        .IsUnique();

                    b.HasIndex("Name");

                    b.HasIndex("PlayerId");

                    b.HasIndex("Race");

                    b.HasIndex("ReplayId");

                    b.HasIndex("UpgradeId");

                    b.HasIndex("IsUploader", "Team");

                    b.HasIndex("Race", "OppRace");

                    b.ToTable("ReplayPlayers");
                });

            modelBuilder.Entity("dsstats.db8.ReplayRating", b =>
                {
                    b.Property<int>("ReplayRatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ReplayRatingId"));

                    b.Property<int>("AvgRating")
                        .HasColumnType("int");

                    b.Property<float>("ExpectationToWin")
                        .HasColumnType("float");

                    b.Property<bool>("IsPreRating")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("LeaverType")
                        .HasColumnType("int");

                    b.Property<int>("RatingType")
                        .HasColumnType("int");

                    b.Property<int>("ReplayId")
                        .HasColumnType("int");

                    b.HasKey("ReplayRatingId");

                    b.HasIndex("RatingType");

                    b.HasIndex("ReplayId")
                        .IsUnique();

                    b.ToTable("ReplayRatings");
                });

            modelBuilder.Entity("dsstats.db8.ReplayViewCount", b =>
                {
                    b.Property<int>("ReplayViewCountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ReplayViewCountId"));

                    b.Property<string>("ReplayHash")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("ReplayViewCountId");

                    b.ToTable("ReplayViewCounts");
                });

            modelBuilder.Entity("dsstats.db8.SkipReplay", b =>
                {
                    b.Property<int>("SkipReplayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("SkipReplayId"));

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.HasKey("SkipReplayId");

                    b.ToTable("SkipReplays");
                });

            modelBuilder.Entity("dsstats.db8.Spawn", b =>
                {
                    b.Property<int>("SpawnId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("SpawnId"));

                    b.Property<int>("ArmyValue")
                        .HasColumnType("int");

                    b.Property<int>("Breakpoint")
                        .HasColumnType("int");

                    b.Property<int>("Gameloop")
                        .HasColumnType("int");

                    b.Property<int>("GasCount")
                        .HasColumnType("int");

                    b.Property<int>("Income")
                        .HasColumnType("int");

                    b.Property<int>("KilledValue")
                        .HasColumnType("int");

                    b.Property<int>("ReplayPlayerId")
                        .HasColumnType("int");

                    b.Property<int>("UpgradeSpent")
                        .HasColumnType("int");

                    b.HasKey("SpawnId");

                    b.HasIndex("ReplayPlayerId");

                    b.ToTable("Spawns");
                });

            modelBuilder.Entity("dsstats.db8.SpawnUnit", b =>
                {
                    b.Property<int>("SpawnUnitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("SpawnUnitId"));

                    b.Property<byte>("Count")
                        .HasColumnType("tinyint unsigned");

                    b.Property<string>("Poss")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("varchar(4000)");

                    b.Property<int>("SpawnId")
                        .HasColumnType("int");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.HasKey("SpawnUnitId");

                    b.HasIndex("SpawnId");

                    b.HasIndex("UnitId");

                    b.ToTable("SpawnUnits");
                });

            modelBuilder.Entity("dsstats.db8.StreakInfo", b =>
                {
                    b.Property<double>("LongestStreak")
                        .HasColumnType("double");

                    b.Property<int>("PlayerResult")
                        .HasColumnType("int");

                    b.ToTable("StreakInfos");
                });

            modelBuilder.Entity("dsstats.db8.Unit", b =>
                {
                    b.Property<int>("UnitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("UnitId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("UnitId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Units");
                });

            modelBuilder.Entity("dsstats.db8.Upgrade", b =>
                {
                    b.Property<int>("UpgradeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("UpgradeId"));

                    b.Property<int>("Cost")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("UpgradeId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Upgrades");
                });

            modelBuilder.Entity("dsstats.db8.Uploader", b =>
                {
                    b.Property<int>("UploaderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("UploaderId"));

                    b.Property<Guid>("AppGuid")
                        .HasColumnType("char(36)");

                    b.Property<string>("AppVersion")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Games")
                        .HasColumnType("int");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("LatestReplay")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)");

                    b.Property<DateTime>("LatestUpload")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)");

                    b.Property<int>("MainCommander")
                        .HasColumnType("int");

                    b.Property<int>("MainCount")
                        .HasColumnType("int");

                    b.Property<int>("Mvp")
                        .HasColumnType("int");

                    b.Property<int>("TeamGames")
                        .HasColumnType("int");

                    b.Property<int>("UploadDisabledCount")
                        .HasColumnType("int");

                    b.Property<bool>("UploadIsDisabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("UploadLastDisabled")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)");

                    b.Property<int>("Wins")
                        .HasColumnType("int");

                    b.HasKey("UploaderId");

                    b.HasIndex("AppGuid")
                        .IsUnique();

                    b.ToTable("Uploaders");
                });

            modelBuilder.Entity("DsAbilityDsUnit", b =>
                {
                    b.HasOne("dsstats.db8.DsAbility", null)
                        .WithMany()
                        .HasForeignKey("AbilitiesDsAbilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("dsstats.db8.DsUnit", null)
                        .WithMany()
                        .HasForeignKey("DsUnitsDsUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ReplayUploader", b =>
                {
                    b.HasOne("dsstats.db8.Replay", null)
                        .WithMany()
                        .HasForeignKey("ReplaysReplayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("dsstats.db8.Uploader", null)
                        .WithMany()
                        .HasForeignKey("UploadersUploaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("dsstats.db8.ArcadePlayerRating", b =>
                {
                    b.HasOne("dsstats.db8.Player", "Player")
                        .WithMany("ArcadePlayerRatings")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("dsstats.db8.ArcadePlayerRatingChange", b =>
                {
                    b.HasOne("dsstats.db8.ArcadePlayerRating", "ArcadePlayerRating")
                        .WithOne("ArcadePlayerRatingChange")
                        .HasForeignKey("dsstats.db8.ArcadePlayerRatingChange", "ArcadePlayerRatingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ArcadePlayerRating");
                });

            modelBuilder.Entity("dsstats.db8.ArcadeReplayDsPlayer", b =>
                {
                    b.HasOne("dsstats.db8.ArcadeReplay", "ArcadeReplay")
                        .WithMany("ArcadeReplayDsPlayers")
                        .HasForeignKey("ArcadeReplayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("dsstats.db8.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ArcadeReplay");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("dsstats.db8.ArcadeReplayDsPlayerRating", b =>
                {
                    b.HasOne("dsstats.db8.ArcadeReplayDsPlayer", "ReplayDsPlayer")
                        .WithOne("ArcadeReplayPlayerRating")
                        .HasForeignKey("dsstats.db8.ArcadeReplayDsPlayerRating", "ArcadeReplayDsPlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("dsstats.db8.ArcadeReplayRating", "ArcadeReplayRating")
                        .WithMany("ArcadeReplayDsPlayerRatings")
                        .HasForeignKey("ArcadeReplayRatingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ArcadeReplayRating");

                    b.Navigation("ReplayDsPlayer");
                });

            modelBuilder.Entity("dsstats.db8.ArcadeReplayRating", b =>
                {
                    b.HasOne("dsstats.db8.ArcadeReplay", "ArcadeReplay")
                        .WithOne("ArcadeReplayRating")
                        .HasForeignKey("dsstats.db8.ArcadeReplayRating", "ArcadeReplayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ArcadeReplay");
                });

            modelBuilder.Entity("dsstats.db8.BattleNetInfo", b =>
                {
                    b.HasOne("dsstats.db8.Uploader", "Uploader")
                        .WithMany("BattleNetInfos")
                        .HasForeignKey("UploaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Uploader");
                });

            modelBuilder.Entity("dsstats.db8.BonusDamage", b =>
                {
                    b.HasOne("dsstats.db8.DsWeapon", "DsWeapon")
                        .WithMany("BonusDamages")
                        .HasForeignKey("DsWeaponId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DsWeapon");
                });

            modelBuilder.Entity("dsstats.db8.ComboPlayerRating", b =>
                {
                    b.HasOne("dsstats.db8.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("dsstats.db8.ComboReplayPlayerRating", b =>
                {
                    b.HasOne("dsstats.db8.ReplayPlayer", "ReplayPlayer")
                        .WithOne("ComboReplayPlayerRating")
                        .HasForeignKey("dsstats.db8.ComboReplayPlayerRating", "ReplayPlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReplayPlayer");
                });

            modelBuilder.Entity("dsstats.db8.ComboReplayRating", b =>
                {
                    b.HasOne("dsstats.db8.Replay", "Replay")
                        .WithOne("ComboReplayRating")
                        .HasForeignKey("dsstats.db8.ComboReplayRating", "ReplayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Replay");
                });

            modelBuilder.Entity("dsstats.db8.DsUpgrade", b =>
                {
                    b.HasOne("dsstats.db8.DsUnit", null)
                        .WithMany("Upgrades")
                        .HasForeignKey("DsUnitId");
                });

            modelBuilder.Entity("dsstats.db8.DsWeapon", b =>
                {
                    b.HasOne("dsstats.db8.DsUnit", "DsUnit")
                        .WithMany("Weapons")
                        .HasForeignKey("DsUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DsUnit");
                });

            modelBuilder.Entity("dsstats.db8.IhSessionPlayer", b =>
                {
                    b.HasOne("dsstats.db8.IhSession", "IhSession")
                        .WithMany("IhSessionPlayers")
                        .HasForeignKey("IhSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("dsstats.db8.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IhSession");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("dsstats.db8.NoUploadResult", b =>
                {
                    b.HasOne("dsstats.db8.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("dsstats.db8.Player", b =>
                {
                    b.HasOne("dsstats.db8.Uploader", "Uploader")
                        .WithMany("Players")
                        .HasForeignKey("UploaderId");

                    b.Navigation("Uploader");
                });

            modelBuilder.Entity("dsstats.db8.PlayerRating", b =>
                {
                    b.HasOne("dsstats.db8.Player", "Player")
                        .WithMany("PlayerRatings")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("dsstats.db8.PlayerRatingChange", b =>
                {
                    b.HasOne("dsstats.db8.PlayerRating", "PlayerRating")
                        .WithOne("PlayerRatingChange")
                        .HasForeignKey("dsstats.db8.PlayerRatingChange", "PlayerRatingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlayerRating");
                });

            modelBuilder.Entity("dsstats.db8.PlayerUpgrade", b =>
                {
                    b.HasOne("dsstats.db8.ReplayPlayer", "ReplayPlayer")
                        .WithMany("Upgrades")
                        .HasForeignKey("ReplayPlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("dsstats.db8.Upgrade", "Upgrade")
                        .WithMany()
                        .HasForeignKey("UpgradeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReplayPlayer");

                    b.Navigation("Upgrade");
                });

            modelBuilder.Entity("dsstats.db8.RepPlayerRating", b =>
                {
                    b.HasOne("dsstats.db8.ReplayPlayer", "ReplayPlayer")
                        .WithOne("ReplayPlayerRatingInfo")
                        .HasForeignKey("dsstats.db8.RepPlayerRating", "ReplayPlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("dsstats.db8.ReplayRating", "ReplayRatingInfo")
                        .WithMany("RepPlayerRatings")
                        .HasForeignKey("ReplayRatingInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReplayPlayer");

                    b.Navigation("ReplayRatingInfo");
                });

            modelBuilder.Entity("dsstats.db8.Replay", b =>
                {
                    b.HasOne("dsstats.db8.ReplayEvent", "ReplayEvent")
                        .WithMany("Replays")
                        .HasForeignKey("ReplayEventId");

                    b.Navigation("ReplayEvent");
                });

            modelBuilder.Entity("dsstats.db8.ReplayEvent", b =>
                {
                    b.HasOne("dsstats.db8.Event", "Event")
                        .WithMany("ReplayEvents")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("dsstats.db8.ReplayPlayer", b =>
                {
                    b.HasOne("dsstats.db8.Player", "Player")
                        .WithMany("ReplayPlayers")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("dsstats.db8.Replay", "Replay")
                        .WithMany("ReplayPlayers")
                        .HasForeignKey("ReplayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("dsstats.db8.Upgrade", null)
                        .WithMany("ReplayPlayers")
                        .HasForeignKey("UpgradeId");

                    b.Navigation("Player");

                    b.Navigation("Replay");
                });

            modelBuilder.Entity("dsstats.db8.ReplayRating", b =>
                {
                    b.HasOne("dsstats.db8.Replay", "Replay")
                        .WithOne("ReplayRatingInfo")
                        .HasForeignKey("dsstats.db8.ReplayRating", "ReplayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Replay");
                });

            modelBuilder.Entity("dsstats.db8.Spawn", b =>
                {
                    b.HasOne("dsstats.db8.ReplayPlayer", "ReplayPlayer")
                        .WithMany("Spawns")
                        .HasForeignKey("ReplayPlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReplayPlayer");
                });

            modelBuilder.Entity("dsstats.db8.SpawnUnit", b =>
                {
                    b.HasOne("dsstats.db8.Spawn", "Spawn")
                        .WithMany("Units")
                        .HasForeignKey("SpawnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("dsstats.db8.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Spawn");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("dsstats.db8.ArcadePlayerRating", b =>
                {
                    b.Navigation("ArcadePlayerRatingChange");
                });

            modelBuilder.Entity("dsstats.db8.ArcadeReplay", b =>
                {
                    b.Navigation("ArcadeReplayDsPlayers");

                    b.Navigation("ArcadeReplayRating");
                });

            modelBuilder.Entity("dsstats.db8.ArcadeReplayDsPlayer", b =>
                {
                    b.Navigation("ArcadeReplayPlayerRating");
                });

            modelBuilder.Entity("dsstats.db8.ArcadeReplayRating", b =>
                {
                    b.Navigation("ArcadeReplayDsPlayerRatings");
                });

            modelBuilder.Entity("dsstats.db8.DsUnit", b =>
                {
                    b.Navigation("Upgrades");

                    b.Navigation("Weapons");
                });

            modelBuilder.Entity("dsstats.db8.DsWeapon", b =>
                {
                    b.Navigation("BonusDamages");
                });

            modelBuilder.Entity("dsstats.db8.Event", b =>
                {
                    b.Navigation("ReplayEvents");
                });

            modelBuilder.Entity("dsstats.db8.IhSession", b =>
                {
                    b.Navigation("IhSessionPlayers");
                });

            modelBuilder.Entity("dsstats.db8.Player", b =>
                {
                    b.Navigation("ArcadePlayerRatings");

                    b.Navigation("PlayerRatings");

                    b.Navigation("ReplayPlayers");
                });

            modelBuilder.Entity("dsstats.db8.PlayerRating", b =>
                {
                    b.Navigation("PlayerRatingChange");
                });

            modelBuilder.Entity("dsstats.db8.Replay", b =>
                {
                    b.Navigation("ComboReplayRating");

                    b.Navigation("ReplayPlayers");

                    b.Navigation("ReplayRatingInfo");
                });

            modelBuilder.Entity("dsstats.db8.ReplayEvent", b =>
                {
                    b.Navigation("Replays");
                });

            modelBuilder.Entity("dsstats.db8.ReplayPlayer", b =>
                {
                    b.Navigation("ComboReplayPlayerRating");

                    b.Navigation("ReplayPlayerRatingInfo");

                    b.Navigation("Spawns");

                    b.Navigation("Upgrades");
                });

            modelBuilder.Entity("dsstats.db8.ReplayRating", b =>
                {
                    b.Navigation("RepPlayerRatings");
                });

            modelBuilder.Entity("dsstats.db8.Spawn", b =>
                {
                    b.Navigation("Units");
                });

            modelBuilder.Entity("dsstats.db8.Upgrade", b =>
                {
                    b.Navigation("ReplayPlayers");
                });

            modelBuilder.Entity("dsstats.db8.Uploader", b =>
                {
                    b.Navigation("BattleNetInfos");

                    b.Navigation("Players");
                });
#pragma warning restore 612, 618
        }
    }
}
