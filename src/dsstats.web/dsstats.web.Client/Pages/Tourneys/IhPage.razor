@page "/tourneys/ih"
@using dsstats.shared
@using dsstats.shared.Interfaces
@inject NavigationManager NavigationManager
@inject ITourneysService tourneyService

<PageTitle>dsstats IH session</PageTitle>

@if (groupState != null)
{
    <dsstats.razorlib.Ih.IhComponent GroupState="groupState" />
}
else
{
    <div class="btn-group">
        <button type="button" class="btn btn-outline-warning bgchart"
            @onclick="CreateNewGroup">
            Create New Group
        </button>
    </div>
    <h3 class="mt-2">Open Groups</h3>
    <div class="tableFixhead table-responsive">
        <table class="tptable table w-auto">
            <thead>
                <tr>
                    <th>RatingType</th>
                    <th>Created</th>
                    <th>Players</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var groupState in groupStates)
                {
                    <tr class="pointer" @onclick="e => JoinGroup(groupState.GroupId)">
                        <td>@groupState.RatingType</td>
                        <td>@groupState.Created.ToString("yyyy-MM-dd")</td>
                        <td>@groupState.Visitors</td>
                        <td>
                            <button type="button" class="btn btn-sm btn-outline-warning bgchart">Join</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <div>
        <h3>History</h3>
        <dsstats.razorlib.Ih.IhSesssionsComponent GroupId="Guid" />
    </div>
}

@code {
    [SupplyParameterFromQuery]
    public Guid Guid { get; set; } = Guid.Empty;

    List<GroupStateDto> groupStates = [];
    GroupStateV2? groupState = null;

    protected override void OnInitialized()
    {
        if (Guid == Guid.Empty)
        {
            _ = LoadData();
        }
        else
        {
            _ = LoadGroupState(Guid);
        }
        base.OnInitialized();
    }

    private async Task LoadData()
    {
        groupStates = await tourneyService.GetGroupStates();
        await InvokeAsync(() => StateHasChanged());
    }

    private async Task LoadGroupState(Guid groupId)
    {
        groupState = await tourneyService.GetOpenGroupState(groupId);
        await InvokeAsync(() => StateHasChanged());
    }

    private void JoinGroup(Guid guid)
    {
        Guid = guid;
        SetNavigationParameter();
        _ = LoadGroupState(guid);
    }

    private void CreateNewGroup()
    {
        Guid = Guid.NewGuid();
        groupState = new()
            {
                GroupId = Guid,
                RatingCalcType = RatingCalcType.Dsstats,
                Visitors = 1
            };
        SetNavigationParameter();
    }

    private void SetNavigationParameter()
    {
        Dictionary<string, object?> queryDic = new();

        queryDic.Add("Guid", Guid);

        NavigationManager.NavigateTo(
        NavigationManager.GetUriWithQueryParameters(
        new Dictionary<string, object?>(queryDic)
        )
        );
    }
}
