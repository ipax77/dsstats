@page "/tourneys/pickban"
@using dsstats.razorlib.Tourneys
@using dsstats.shared
@layout TourneysLayout
@inject NavigationManager NavigationManager

<PageTitle>dsstats - pickban</PageTitle>

@if (pickBanSetting is null)
{
    <div class="bgchart2 rounded p-2">
        <h3>Pick-Ban-Helper</h3>
    </div>
    <div class="btn-group-vertical border rounded bgchart p-2 mt-2">
        <button type="button" class="btn btn-outline-light" @onclick="@(() => ChangeMode(PickBanMode.Standard))">Standard</button>
        <button type="button" class="btn btn-outline-light" @onclick="@(() => ChangeMode(PickBanMode.Commanders))">Commanders</button>
        <button type="button" class="btn btn-outline-light" @onclick="@(() => ChangeMode(PickBanMode.Name))">Name</button>
        <button type="button" class="btn btn-outline-light" @onclick="@(() => ChangeMode(PickBanMode.StdRandom))">Standard with Random</button>
    </div>
}
else
{
    <PickBanComponent PickBanSetting="pickBanSetting" />
}

@code {
    [SupplyParameterFromQuery]
    public Guid? Id { get; set; }

    [SupplyParameterFromQuery]
    public string? Mode { get; set; }

    PickBanSetting? pickBanSetting = null;

    protected override void OnInitialized()
    {
        if (Id is not null && Id != Guid.Empty
            && Enum.TryParse(typeof(PickBanMode), Mode, out var pickBanModeObj)
            && pickBanModeObj is PickBanMode pickBanMode
        )
        {
            pickBanSetting = new()
                {
                    Id = Id.Value,
                    PickBanMode = pickBanMode
                };
        }
        base.OnInitialized();
    }

    private void ChangeMode(PickBanMode pickBanMode)
    {
        pickBanSetting = new()
        {
            Id = Guid.NewGuid(),
            PickBanMode = pickBanMode
        };
        StateHasChanged();

        IReadOnlyDictionary<string, object?> qParams = new Dictionary<string, object?>
            {
                ["Mode"] = pickBanMode.ToString(),
                ["Id"] = pickBanSetting.Id
            };
        NavigationManager.NavigateTo(NavigationManager.GetUriWithQueryParameters(qParams));
    }
}
