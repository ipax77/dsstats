@page "/tourneys/upload"
@using dsstats.razorlib.Tourneys
@using dsstats.web.Client.Services
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ILogger<UploadPage> logger
@layout TourneysLayout
@implements IDisposable

<PageTitle>dsstats - tourneys upload</PageTitle>

<dsstats.web.Client.Pages.Auth.AuthStatusComponent RedirectUrl="/tourneys/upload" />

<AuthorizeView>
    <Authorized>
        <div>
            <button type="button" class="btn btn-primary" @onclick="LoadTourneyData">Load Tourney Data</button>
            <button type="button" class="btn btn-primary" @onclick="CheckRole">CheckRole</button>
        </div>

        <p>under construction</p>
        <p>@data</p>
        <p>@tourneyData</p>
        <p>@isInRole</p>
    </Authorized>
    <NotAuthorized>
        <p>NotAuthorized</p>
    </NotAuthorized>
</AuthorizeView>

@code {
    string data = string.Empty;
    string tourneyData = string.Empty;
    string isInRole = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
        AuthenticationStateProvider.AuthenticationStateChanged += AuthStateChanged;
        await base.OnInitializedAsync();
    }

    private void AuthStateChanged(Task<AuthenticationState> task)
    {
        _ = LoadData();
    }

    private async Task LoadData()
    {
        if (AuthenticationStateProvider is ExternalAuthStateProvider externalAuthStateProvider)
        {
            try
            {
                if (externalAuthStateProvider.TryGetApiHttpClient(out var httpClient)
                    && httpClient is not null)
                {
                    var controller = "api8/v1/ManageTourney";

                    var response = await httpClient.GetAsync($"{controller}/test1");
                    response.EnsureSuccessStatusCode();
                    data = await response.Content.ReadAsStringAsync();
                }
            }
            catch (Exception ex)
            {
                logger.LogError("failed getting data: {error}", ex.Message);
                data = ex.Message;
            }
        }
        await InvokeAsync(() => StateHasChanged());
    }

    private async Task LoadTourneyData()
    {
        if (AuthenticationStateProvider is ExternalAuthStateProvider externalAuthStateProvider)
        {
            try
            {
                if (externalAuthStateProvider.TryGetApiHttpClient(out var httpClient)
                    && httpClient is not null)
                {
                    var controller = "api8/v1/ManageTourney";

                    var response = await httpClient.GetAsync($"{controller}/test3");
                    response.EnsureSuccessStatusCode();
                    tourneyData = await response.Content.ReadAsStringAsync();
                }
            }
            catch (Exception ex)
            {
                logger.LogError("failed getting data: {error}", ex.Message);
                tourneyData = ex.Message;
            }
        }
        await InvokeAsync(() => StateHasChanged());
    }

    private async Task CheckRole()
    {
        if (AuthenticationStateProvider is ExternalAuthStateProvider externalAuthStateProvider)
        {
            try
            {
                if (externalAuthStateProvider.TryGetApiHttpClient(out var httpClient)
                    && httpClient is not null)
                {
                    var controller = "api8/v1/dsuser";

                    var response = await httpClient.GetAsync($"{controller}/isinrole/Admin");
                    response.EnsureSuccessStatusCode();
                    var result = await response.Content.ReadFromJsonAsync<bool>();
                    isInRole = result.ToString();
                }
            }
            catch (Exception ex)
            {
                logger.LogError("failed getting data: {error}", ex.Message);
                tourneyData = ex.Message;
            }
        }
        await InvokeAsync(() => StateHasChanged());
    }

    public void Dispose()
    {
        AuthenticationStateProvider.AuthenticationStateChanged -= AuthStateChanged;
    }
}
