@using dsstats.shared
@using dsstats.razorlib.Builds
@page "/review/2023"

<PageTitle>dsstats - review 2023 @(RequestName is null ? "" : RequestName.Name)</PageTitle>

<div class="">
    <button type="button" class="btn btn-outline-warning" @onclick="e => addPlayersModal?.Show(shared.RatingType.Cmdr)">Select Player Review</button>
</div>
@if (RequestName is null)
{
    <dsstats.razorlib.ReviewYearComponent Year="2023" />
}
else
{
    <dsstats.razorlib.Players.Profile.ReviewComponent @ref="reviewComponent" RequestName="RequestName" Year="2023" OnCloseRequested="Close" />
}

<AddPlayersModal @ref="addPlayersModal" OnPlayersSelected="AddPlayers" SinglePlayer="true" />

@code {
    [Parameter]
    [SupplyParameterFromQuery]
    public string? PlayerId { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public string? Name { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public string? RatingType { get; set; }

    private RequestNames? RequestName;
    AddPlayersModal? addPlayersModal;
    dsstats.razorlib.Players.Profile.ReviewComponent? reviewComponent;

    protected override void OnInitialized()
    {
        SetRequest();
        base.OnInitialized();
    }

    private void SetRequest()
    {
        if (!string.IsNullOrEmpty(PlayerId))
        {
            var playerId = Data.GetPlayerId(PlayerId);
            if (playerId is not null)
            {
                RequestName = new(Name ?? "", playerId.ToonId, playerId.RegionId, playerId.RealmId);
            }
        }
    }

    private void AddPlayers(List<RequestNames> players)
    {
        if (players.Count > 0)
        {
            RequestName = players.First();
            reviewComponent?.Update(RequestName);
            InvokeAsync(() => StateHasChanged());
        }
    }

    private void Close()
    {
        RequestName = null;
        InvokeAsync(() => StateHasChanged());
    }
}
