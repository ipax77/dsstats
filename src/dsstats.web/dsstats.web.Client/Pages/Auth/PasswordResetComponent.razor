@page "/auth/reset"
@using System.ComponentModel.DataAnnotations
@using dsstats.shared.Auth
@inject IAuthService authService

<div class="container">
    <div class="bgchart p-2 rounded" style="min-width: 400px; max-width: 600px;">
        <h3>Reset Password</h3>
        @if (!emailSuccess)
        {
            <div>
                <EditForm EditContext="emailEditContext" FormName="resetEmailForm" OnValidSubmit="RequestResetCode">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div class="form-group">
                        <label for="resetemail" class="form-label mt-4">Email address</label>
                        <InputText class="form-control" id="resetemail" @bind-Value="email" />
                    </div>
                </EditForm>
            </div>
        }
        else
        {
            <div>
                <EditForm EditContext="editContext" FormName="resetForm" OnValidSubmit="Reset">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div class="form-group">
                        <label for="registermail" class="form-label mt-4">Email address</label>
                        <InputText class="form-control" id="registermail" @bind-Value="resetPayload.Email" />
                    </div>
                    <div class="form-group">
                        <label for="resetcode" class="form-label mt-4">Reset Code</label>
                        <InputText class="form-control" id="resetcode" @bind-Value="resetPayload.ResetCode" />
                        <small id="emailHelp" class="form-text text-muted">Check your emails for the reset code.</small>
                    </div>
                    <div class="form-group">
                        <label for="registerpwd" class="form-label mt-4">Password</label>
                        <InputText type="password" class="form-control" id="registerpwd" placeholder="Password" autocomplete="off" @bind-Value="resetPayload.NewPassword" />
                    </div>
                    <div class="form-group">
                        <label for="confirmpwd" class="form-label mt-4">Confirm Password</label>
                        <InputText type="password" class="form-control" id="confirmpwd" placeholder="Password" autocomplete="off" @bind-Value="resetPayload.ConfirmPassword" />
                    </div>
                    <div class="btn-group mt-1">
                        <button type="submit" class="btn btn-primary">Reset</button>
                    </div>
                </EditForm>
            </div>
        }
        <div class="mt-2">
            @if (isLoading)
            {
                <div class="spinner-border spinner-border-sm text-danger" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            }
            @if (success)
            {
                <p class="text-success">Password reset successful.</p>
                <p><a href="auth/login">Login</a></p>
            }
            else if (errorResponse is not null)
            {
                <p class="text-danger">Password reset failed: @errorResponse.Status, @errorResponse.Detail</p>
            }
        </div>
    </div>
</div>

@code {
    private ResetFormPayload resetPayload = new();
    
    [EmailAddress]
    [Required]
    private string email = string.Empty;

    EditContext editContext = null!;
    bool isLoading = false;
    bool success = false;
    bool emailSuccess = false;
    ErrorResponse? errorResponse = null;
    EditContext? emailEditContext = null!;

    protected override void OnInitialized()
    {
        emailEditContext = new(email);
        editContext = new(resetPayload);
        base.OnInitialized();
    }

    private async Task Reset()
    {
        isLoading = true;
        await InvokeAsync(() => StateHasChanged());
        var result = await authService.ResetPassword(new()
            {
                Email = resetPayload.Email,
                ResetCode = resetPayload.ResetCode,
                NewPassword = resetPayload.NewPassword
            });

        if (result is ForgotPasswordSuccessResponse)
        {
            success = true;
        }
        else if (result is ForgotPasswordFailedResponse failedResposne)
        {
            errorResponse = failedResposne.Error;
        }

        isLoading = false;
        await InvokeAsync(() => StateHasChanged());
    }

    private async Task RequestResetCode()
    {
        isLoading = true;
        await InvokeAsync(() => StateHasChanged());
        var result = await authService.ForgotPassword(email);

        if (result is ForgotPasswordSuccessResponse)
        {
            emailSuccess = true;
            resetPayload.Email = email;
        }
        else if (result is ForgotPasswordFailedResponse failedResposne)
        {
            errorResponse = failedResposne.Error;
        }

        isLoading = false;
        await InvokeAsync(() => StateHasChanged());
    }
}
