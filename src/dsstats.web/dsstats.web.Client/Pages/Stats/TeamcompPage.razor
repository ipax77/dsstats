@page "/stats/teamcomps"
@using dsstats.razorlib.Stats;
@using dsstats.shared
@layout StatsLayout
@inject NavigationManager NavigationManager

<PageTitle>dsstats - std-teams</PageTitle>

<dsstats.razorlib.Stats.Teamcomp.TeamCompComponent Request="Request" OnRequestChanged="RequestChanged" />

@code {
    [Parameter, SupplyParameterFromQuery]
    public string? Tp { get; set; }

    [Parameter, SupplyParameterFromQuery]
    public string? Rt { get; set; }

    [Parameter, SupplyParameterFromQuery]
    public string? Int { get; set; }

    [Parameter, SupplyParameterFromQuery]
    public bool? WithLeavers { get; set; }

    [Parameter, SupplyParameterFromQuery]
    public bool? TE { get; set; }

    private TeamcompRequest Request = new()
        {
            TimePeriod = TimePeriod.Patch2_71,
            RatingType = RatingType.Std,
            WithLeavers = false,
            Interest = null
        };

    protected override void OnInitialized()
    {
        SetRequest();
        base.OnInitialized();
    }

    private void SetRequest()
    {
        if (Enum.TryParse(typeof(TimePeriod), Tp, out var tpObj)
            && tpObj is TimePeriod tp)
        {
            Request.TimePeriod = tp;
        }

        if (Enum.TryParse(typeof(RatingType), Rt, out var rtObj)
            && rtObj is RatingType rt)
        {
            Request.RatingType = rt;
        }

        if (!string.IsNullOrEmpty(Int))
        {
            Request.Interest = Int;
        }

        if (WithLeavers != null)
        {
            Request.WithLeavers = WithLeavers.Value;
        }

        if (TE is not null)
        {
            Request.TournamentEdition = TE.Value;
        }
    }

    private void RequestChanged(TeamcompRequest request)
    {
        Dictionary<string, object?> queryDic = new();

        if (request.RatingType != RatingType.Std)
        {
            queryDic.Add("Rt", request.RatingType.ToString());
        }
        else
        {
            queryDic.Add("Rt", null);
        }

        if (request.TimePeriod != TimePeriod.Patch2_71)
        {
            queryDic.Add("Tp", request.TimePeriod.ToString());
        }
        else
        {
            queryDic.Add("Tp", null);
        }

        if (!string.IsNullOrEmpty(request.Interest))
        {
            queryDic.Add("Int", request.Interest);

        }
        else
        {
            queryDic.Add("Int", null);

        }

        if (request.WithLeavers)
        {
            queryDic.Add("WithLeavers", true);
        }
        else
        {
            queryDic.Add("WithLeavers", null);
        }

        if (request.TournamentEdition)
        {
            queryDic.Add("TE", true);
        }
        else
        {
            queryDic.Add("TE", null);
        }

        NavigationManager.NavigateTo(
            NavigationManager.GetUriWithQueryParameters(
                new Dictionary<string, object?>(queryDic)
            )
        );
    }

}
