@using System.ComponentModel.DataAnnotations
@using dsstats.shared.Auth
@inject IAuthService authService

<div class="container">
    <div class="bgchart p-2 rounded" style="min-width: 400px; max-width: 600px;">
        <h3>Resend Confirmation Email</h3>
        <div>
            <EditForm EditContext="emailEditContext" FormName="resetEmailForm" OnValidSubmit="Resend">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="form-group">
                    <label for="resetemail" class="form-label mt-4">Email address</label>
                    <InputText class="form-control" id="resetemail" @bind-Value="email" />
                </div>
                <div class="btn-group mt-1">
                    <button type="submit" class="btn btn-primary">Resend</button>
                </div>
            </EditForm>
        </div>
        <div class="mt-2">
            @if (isLoading)
            {
                <div class="spinner-border spinner-border-sm text-danger" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            }
            @if (success)
            {
                <p class="text-success">Resending Confirmation Email Successful.</p>
                <p><a href="auth/login">Login</a></p>
            }
            else if (hasErrors)
            {
                <p class="text-danger">Resending Confirmation Email Failed.</p>
            }
        </div>
    </div>
</div>

@code {
    EditContext? emailEditContext = null!;

    [EmailAddress]
    [Required]
    string email = string.Empty;

    bool success = false;
    bool hasErrors = false;
    bool isLoading = false;

    protected override void OnInitialized()
    {
        emailEditContext = new(email);
        base.OnInitialized();
    }

    private async Task Resend()
    {
        isLoading = true;
        await InvokeAsync(() => StateHasChanged());

        success = await authService.ResendConfirmationEmail(email);
        if (!success)
        {
            hasErrors = true;
        }

        isLoading = false;
        await InvokeAsync(() => StateHasChanged());
    }
}
