@using dsstats.shared.Auth
@inject IAuthService authService


<div class="container">
    <div class="bgchart p-2 rounded" style="min-width: 400px; max-width: 600px;">
        <h3>Register New Account</h3>
        <div>
            <EditForm EditContext="editContext" FormName="restisterForm" OnValidSubmit="Register">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="form-group">
                    <label for="registermail" class="form-label mt-4">Email address</label>
                    <InputText class="form-control" id="registermail" @bind-Value="registerPayload.Email" />
                    <small id="emailHelp" class="form-text text-muted">We'll never share your email with anyone else.</small>
                </div>
                <div class="form-group">
                    <label for="confirmemail" class="form-label mt-4">Confirm Email address</label>
                    <InputText class="form-control" id="confirmemail" @bind-Value="registerPayload.ConfirmEmail" />
                    <small id="emailHelp" class="form-text text-muted">We'll never share your email with anyone else.</small>
                </div>
                <div class="form-group">
                    <label for="registerpwd" class="form-label mt-4">Password</label>
                    <InputText type="password" class="form-control" id="registerpwd" placeholder="Password" autocomplete="off" @bind-Value="registerPayload.Password" />
                </div>
                <div class="form-group">
                    <label for="confirmpwd" class="form-label mt-4">Confirm Password</label>
                    <InputText type="password" class="form-control" id="confirmpwd" placeholder="Password" autocomplete="off" @bind-Value="registerPayload.ConfirmPassword" />
                </div>
                <div class="btn-group mt-1">
                    <button type="submit" class="btn btn-primary">Register</button>
                </div>
            </EditForm>
        </div>
        <div class="mt-2">
            @if (isLoading)
            {
                <div class="spinner-border spinner-border-sm text-danger" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            }
            @if (success)
            {
                <p class="text-success">Registration successful, please check your Emails to confirm your account.</p>
                <p><a href="auth/login">Login</a></p>
            }
            else if (errorResponse is not null)
            {
                <p class="text-danger">Registration failed: @errorResponse.Status, @errorResponse.Detail</p>
            }
        </div>
    </div>
</div>

@code {
    private RegisterFormPayload registerPayload = new();
    EditContext editContext = null!;
    ErrorResponse? errorResponse = null;
    bool success = false;
    bool isLoading = false;

    protected override void OnInitialized()
    {
        editContext = new(registerPayload);
        base.OnInitialized();
    }

    private async Task Register()
    {
        isLoading = true;
        await InvokeAsync(() => StateHasChanged());
        var result = await authService.Register(new()
        {
            Email = registerPayload.Email,
            Password = registerPayload.Password
        });

        if (result is RegisterSuccessResponse)
        {
            errorResponse = null;
            success = true;
        }
        else if (result is RegisterFailedResponse failedResponse)
        {
            errorResponse = failedResponse.Error;
            success = false;
        }
        isLoading = false;
        await InvokeAsync(() => StateHasChanged());
    }
}
