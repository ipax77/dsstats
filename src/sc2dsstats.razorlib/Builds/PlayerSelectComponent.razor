@using Blazored.Toast.Services;
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Web.Virtualization
@using System.Globalization
@using pax.dsstats.shared
@using sc2dsstats.razorlib.Services
@inject IDataService dataService
@inject IToastService toastService
@implements IDisposable

<style>
    .tableFixHead {
        overflow-y: auto;
    }

        .tableFixHead thead th {
            position: sticky;
            top: 0;
        }

    table {
        border-collapse: collapse;
        width: 100%;
    }

    th, td {
        padding: 8px 16px;
        white-space: nowrap;
    }

    th {
        background: purple;
    }

    .tablebackground {
        position: absolute;
        z-index: -1;
        opacity: 0.15;
    }
</style>

<div>
    <div class="d-flex">
        <EditForm EditContext="editContext">
            <div class="row">
                <div class="col-auto">
                    <label class="form-label">
                        Search:
                        <InputText class="form-control" @bind-Value="ratingsRequest.Search"></InputText>
                    </label>
                </div>
            </div>
        </EditForm>
        <div class="align-self-center ms-2">
            <span class="oi oi-x text-danger pointer" @onclick="ResetSearch"></span>
        </div>
    </div>
    <div class="tableFixHead">
        <table class="table table-sm table-dark table-hover table-striped w-auto">
            <colgroup>
                <col class="col">
                <col class="col">
                <col class="col">
                <col class="col">
                <col class="col">
            </colgroup>
            <thead>
                <CascadingValue Value="ratingsRequest.Orders">
                    <tr>
                        <th>Select</th>
                        <th scope="col" class="pointer text-info" @onclick="@(e => SortList(e, "Player.Name"))">
                            <SortArrow Property="Player.Name">
                                Name
                            </SortArrow>
                        </th>
                        <th scope="col" class="pointer" @onclick="@(e => SortList(e, "Games"))">
                            <SortArrow Property="Games">
                                Games
                            </SortArrow>
                        </th>
                        <th scope="col" class="pointer text-warning" @onclick="@(e => SortList(e, "Rating"))">
                            <SortArrow Property="Rating">
                                Rating
                            </SortArrow>
                        </th>
                        <th scope="col" class="pointer" @onclick="@(e => SortList(e, "Wins"))">
                            <SortArrow Property="Wins">
                                Winrate
                            </SortArrow>
                        </th>
                    </tr>
                </CascadingValue>
            </thead>
            <tbody>
                @if (ratingsCount > 0)
                {
                    <Virtualize @ref="virtualize" Context="rating" ItemsProvider="LoadRatings">
                        <ItemContent>
                            <tr>
                                <td>
                                    <button type="button" class="btn btn-sm btn-primary" @onclick="e => OnPlayersSelected.InvokeAsync(rating.Player)">Select</button>
                                </td>
                                <td><span class="text-truncate text-info" style="display: block; width: 150px;">@rating.Player.Name</span></td>
                                <td class="border-start">@rating.Games</td>
                                <td class="text-warning">@Math.Round(rating.Rating, 2).ToString(CultureInfo.InvariantCulture)</td>
                                <td>@HelperService.GetPercentageString(rating.Wins, rating.Games)</td>
                            </tr>
                        </ItemContent>
                        <Placeholder>
                            <tr height="47px"><td>Loading ...</td></tr>
                        </Placeholder>
                    </Virtualize>
                }
            </tbody>
        </table>
    </div>
</div>

@code {
    [Parameter]
    public EventCallback<PlayerRatingPlayerDto> OnPlayersSelected { get; set; }

    private RatingsRequest ratingsRequest = new()
        {
            Type = RatingType.Cmdr,
            Skip = 0,
            Take = 20,
            Orders = new()
        {
            new()
            {
                Property = "Rating",
                Ascending = false
            },
        }
        };

    private EditContext editContext = null!;
    private int ratingsCount;
    private Virtualize<PlayerRatingDto>? virtualize;
    private CancellationTokenSource cts = new();

    protected override void OnInitialized()
    {
        _ = SetRatingsCount();
        editContext = new EditContext(ratingsRequest);
        editContext.OnFieldChanged += FieldChanged;
        base.OnInitialized();
    }

    private void FieldChanged(object? sender, FieldChangedEventArgs e)
    {
        _ = Reload();
    }

    private async Task SetRatingsCount()
    {
        ratingsCount = await dataService.GetRatingsCount(ratingsRequest, cts.Token);
        await InvokeAsync(() => StateHasChanged());
    }

    public async Task Reload()
    {
        await SetRatingsCount();
        if (virtualize != null)
        {
            await virtualize.RefreshDataAsync();
        }
        await InvokeAsync(() => StateHasChanged());
    }

    private async ValueTask<ItemsProviderResult<PlayerRatingDto>> LoadRatings(ItemsProviderRequest request)
    {
        var numRatings = Math.Min(request.Count, ratingsCount - request.StartIndex);
        ratingsRequest.Skip = request.StartIndex;
        ratingsRequest.Take = numRatings;

        if (ratingsRequest.Skip < 0 || ratingsRequest.Take < 0)
        {
            return new ItemsProviderResult<PlayerRatingDto>();
        }
        var result = await dataService.GetRatings(ratingsRequest, request.CancellationToken);

        return new ItemsProviderResult<PlayerRatingDto>(result.Players, ratingsCount);
    }

    private async Task SortList(MouseEventArgs e, string property)
    {
        var exOrder = ratingsRequest.Orders.FirstOrDefault(f => f.Property == property);
        if (e.ShiftKey)
        {
            if (exOrder == null)
            {
                ratingsRequest.Orders.Add(new TableOrder()
                    {
                        Property = property
                    });
            }
            else
            {
                exOrder.Ascending = !exOrder.Ascending;
            }
        }
        else
        {
            ratingsRequest.Orders.Clear();
            ratingsRequest.Orders.Add(new TableOrder()
                {
                    Property = property,
                    Ascending = exOrder == null ? false : !exOrder.Ascending
                });
        }
        await Reload();
    }

    private void ResetSearch()
    {
        ratingsRequest.Search = null;
        _ = Reload();
    }

    public void Dispose()
    {
        cts.Cancel();
        cts.Dispose();
        editContext.OnFieldChanged -= FieldChanged;
    }
}
