@using pax.dsstats.shared
@using sc2dsstats.razorlib.Options
@using sc2dsstats.razorlib.Replay;
@using sc2dsstats.razorlib.Services;
@inject IDataService dataService
@inject NavigationManager NavigationManager
@implements IDisposable

<div>
    <CascadingValue Value="BuildRequest">
        <BuildsRequestComponent MauiPlayers="MauiPlayers" OnRequestChanged="Load"></BuildsRequestComponent>
    </CascadingValue>
</div>

@if (isLoading && buildResponse == null)
{
    <div class="spinner-border spinner-border-sm text-info ms-2" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
}

@if (buildResponse != null)
{
    <div class="row">
        <div class="col-auto isdesktop">
            <div class="d-flex">
                <CmdrSelect Label="Commander" IsSelected="@BuildRequest.Interest" OnCmdrSelected="SelectCommander"></CmdrSelect>
                <CmdrSelect Label="Vs" IsSelected="@BuildRequest.Versus" OnCmdrSelected="SelectOpponent"></CmdrSelect>
            </div>
        </div>
        <div class="col-auto mt-2">
            <div class="fw-bold text-wrap h3">
                Average unit count for
                <span class="text-danger text-nowrap">
                    @buildResponse.Interest @(BuildRequest.Versus == Commander.None ? "" : $" vs {buildResponse.Versus}")
                </span>
            </div>
            <div class="fw-bold text-warning text-wrap h4">
                Players @(String.Join(", ", BuildRequest.PlayerNames.Select(s => s.Name).Distinct()))
            </div>
            <div>
                <div class="d-flex">
                    @if (isLoading)
                    {
                        <span style="font-size: 1rem;" class="col-auto spinner-border spinner-border-sm"></span>
                    }
                    else
                    {
                        <span style="width: 20px; display: inline-block;" class="col-auto"></span>
                    }
                    <div>
                        <span class="badge text-bg-primary display-block ms-1" style="font-size: 1rem;">∅ Winrate<br />@HelperService.GetPercentageString(buildResponse.Wins, buildResponse.Count)</span>
                    </div>
                    <div>
                        <span class="badge text-bg-primary display-block ms-1" style="font-size: 1rem;">Replays<br />@buildResponse.Count</span>
                    </div>
                    <div>
                        <span class="badge text-bg-primary text-light display-block ms-1" style="font-size: 1rem;">∅ Duration<br />@TimeSpan.FromSeconds(buildResponse.Duration).ToString(@"mm\:ss")min</span>
                    </div>
                    <div>
                        <span class="badge text-bg-primary text-warning display-block ms-1" style="font-size: 1rem;">Gas<br />@((buildResponse.Gas / (double)buildResponse.Count).ToString("N2"))</span>
                    </div>
                </div>
                <div class="d-flex mt-2 mb-3" style="font-size: 24px;">
                    <div class="col-auto" style="min-width: 175px;">
                        <span class="badge bg-primary">
                            Breakpoint @breakpoint
                        </span>
                    </div>
                    <div class="col-auto" style="min-width: 175px;">
                        <input type="range" class="form-range" value="@((int)breakpoint)" min="1" max="4" step="1" id="spawnrange" @onchange="ChangeBreakpoint">
                    </div>
                </div>
                <div class="">
                    @{
                        var bp = buildResponse.Breakpoints.FirstOrDefault(f => f.Breakpoint == breakpoint.ToString());
                        int i = 0;
                    }
                    <table class="table table-dark table-striped w-auto" style="min-width: 450px; overflow-y: auto;">
                        <thead>
                            <tr>
                                <th>Unit</th>
                                <th>Count</th>
                            </tr>
                        </thead>
                        <tbody>

                            @if (bp != null)
                            {
                                @foreach (var unit in bp.Units.OrderByDescending(o => o.Count))
                                {
                                    i++;
                                    string background = i switch
                                    {
                                        1 => "table-primary text-warning",
                                        2 => "table-primary text-warning",
                                        3 => "table-primary text-warning",
                                        _ => ""
                                    };
                                    <tr class="@background">
                                        <td>@unit.Name</td>
                                        <td>
                                            @(
                                                ((double)unit.Count / (double)bp.Count).ToString("N2")
                                                )
                                        </td>
                                    </tr>
                                }
                            }
                            else
                            {
                                <tr>
                                    <td clospan="100%">No data available.</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
        <div class="col-auto isdesktop ms-4 mt-3">
            <div style="max-height: 650px; overflow: auto;">
                <table class="table table-sm table-dark">
                    <thead>
                        <tr>
                            <th>Replays</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var brr in buildResponse.Replays.OrderByDescending(o => o.Gametime))
                        {
                            <tr class="pointer" style="text-decoration: underline;" @onclick="e => ShowReplay(brr.Hash)">
                                <td class="@(brr.Hash == replayHash ? "table-primary" : "")">@brr.Gametime.ToString("yyyy-MM-dd")</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
}

<div class="mt-2">
    @if (replayDto != null)
    {
        <sc2dsstats.razorlib.Replay.ReplayComponent @ref="replayComponent"
                                                replayDto="replayDto"
                                                OnCloseRequested="ReplayClose"
                                                ReplaysRequest="ReplaysToonIdRequest" />
    }
</div>

@code {
    [Parameter, EditorRequired]
    public BuildRequest BuildRequest { get; set; } = default!;

    [Parameter]
    public List<RequestNames> MauiPlayers { get; set; } = new();

    [Parameter]
    public EventCallback OnRequestChanged { get; set; }

    private ReplayComponent? replayComponent;

    private bool isLoading;
    private bool isReplayLoading;
    private BuildResponse? buildResponse;
    private ReplayDetailsDto? replayDto;
    private string replayHash = "";
    private Breakpoint breakpoint = Breakpoint.All;

    CancellationTokenSource cts = new();

    protected override void OnInitialized()
    {
        _ = Load();
        base.OnInitialized();
    }

    private async Task Load()
    {
        if (isLoading)
            return;
        isLoading = true;
        await InvokeAsync(() => StateHasChanged());
        buildResponse = await dataService.GetBuild(BuildRequest, cts.Token);
        isLoading = false;
        await InvokeAsync(() => StateHasChanged());
        if (buildResponse != null && buildResponse.Replays.Any())
        {
            await ShowReplay(buildResponse.Replays.OrderByDescending(o => o.Gametime).First().Hash);
        }

        await OnRequestChanged.InvokeAsync();
    }

    private void ChangeBreakpoint(ChangeEventArgs e)
    {
        if (int.TryParse(e?.Value?.ToString(), out int value))
        {
            breakpoint = (Breakpoint)value;
            StateHasChanged();
        }
    }

    void SelectCommander(Commander cmdr)
    {
        BuildRequest.Interest = cmdr;
        _ = Load();
        OnRequestChanged.InvokeAsync();
    }

    void SelectOpponent(Commander cmdr)
    {
        BuildRequest.Versus = cmdr;
        _ = Load();
        OnRequestChanged.InvokeAsync();
    }

    private async Task ShowReplay(string hash)
    {
        if (isReplayLoading)
            return;
        isReplayLoading = true;
        replayHash = hash;
        replayDto = await dataService.GetDetailReplay(hash);
        if (replayDto != null)
        {
            replayComponent?.Init(replayDto);
        }
        isReplayLoading = false;
        await InvokeAsync(() => StateHasChanged());
    }

    private void ReplaysToonIdRequest(ReplaysToonIdRequest request)
    {
        NavigationManager.NavigateTo(
            NavigationManager.GetUriWithQueryParameters("replays",
                new Dictionary<string, object?>()
                {
                    { "Players", request.Name },
                    { "ToonId", request.ToonId },
                    { "ToonIdWith", request.ToonIdWith == 0 ? null : request.ToonIdWith },
                    { "ToonIdVs", request.ToonIdVs == 0 ? null : request.ToonIdVs },
                    { "ToonIdName", request.ToonIdName },
                }
            )
        );
    }


    private void ReplayClose()
    {
        replayDto = null;
        StateHasChanged();
    }

    public void Dispose()
    {
        cts.Cancel();
        cts.Dispose();
    }
}
