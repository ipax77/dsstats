@using Microsoft.JSInterop
@using System.Globalization;
@using pax.BlazorChartJs
@using pax.dsstats.shared
@using sc2dsstats.razorlib.Services
@inject IJSRuntime JSRuntime
@inject IDataService dataService
@implements IDisposable

<div class="row @(Interest == null ? "" : "visually-hidden")">
    <div class="col-auto">
        <div class="card" style="max-width: 1200px; min-width: 600px;">
            <div class="card-header">
                <div class="row fw-bolder">
                    <div class="col">@replayDto.GameTime.ToShortDateString()</div>
                    <div class="col">Duration @duration</div>
                    <div class="col">
                        @replayDto.GameMode
                        @if (replayDto.TournamentEdition)
                        {
                            <span class="border rounded p-1 ms-2">TE</span>
                        }
                    </div>
                    <div class="col-2"><span class="oi oi-x text-danger pointer" @onclick="e => OnCloseRequested.InvokeAsync()"></span></div>
                </div>
            </div>
            <div class="card-body">
                @if (showMiddleChart)
                {
                    <div style="position: relative; width: 50vw; min-width: 600px; max-width: 1000px; height: calc(50vw * 0.5); min-height: 300px; max-height: 500px;">
                        <ChartComponent @ref="chartComponent" ChartJsConfig="chartJsConfig" OnEventTriggered="ChartEventTriggered"></ChartComponent>
                        <span class="oi oi-x pointer text-danger" style="position: absolute; top: 0; right: 0; padding: 10px; z-index: 1000;" @onclick="e => showMiddleChart = !showMiddleChart"></span>
                    </div>
                }
                <div class="row">
                    @for (int i = 1; i <= 2; i++)
                    {
                        var players = replayDto.ReplayPlayers.Where(x => x.Team == i).OrderBy(o => o.GamePos).ToList();
                        bool isWinner = replayDto.WinnerTeam == i;
                        var hasMmrChanges = replayDto.ReplayPlayers.Any(f => f.MmrChange.GetValueOrDefault(0) != 0);

                        <div class="col-auto">
                            <div class="d-flex">
                                @if (isWinner)
                                {
                                    @if (replayDto.ResultCorrected)
                                    {
                                        <button class="btn btn-sm" style="background-color: #BF40BF;"><b>@(replayDto.ReplayEvent != null ? replayDto.ReplayEvent.WinnerTeam : $"Team {i}") - Winner</b></button>
                                    }
                                    else
                                    {
                                        <button class="btn btn-sm btn-success"><b>@(replayDto.ReplayEvent != null ? replayDto.ReplayEvent.WinnerTeam : $"Team {i}") - Winner</b></button>
                                    }
                                }
                                else
                                {
                                    <button class="btn btn-sm btn-danger"><b>@(@replayDto.ReplayEvent != null ? replayDto.ReplayEvent.RunnerTeam : $"Team {i}")</b></button>
                                }
                                <button type="button" class="btn btn-sm btn-outline-light" @onclick="@(() => showMiddleChart = !showMiddleChart)">Middle @(i == 1 ? mid1 : mid2)%</button>
                            </div>
                            <div class="table-responsive" style="max-width: 560px;">
                                <table class="table table-sm table-hover table-dark pointer">
                                    <thead>
                                        <tr>
                                            <th style="width: 30px;">#</th>
                                            @if (hasMmrChanges)
                                            {
                                                <th>Mmr</th>
                                            }
                                            <th style="width: 120px;">Player</th>
                                            <th>APM</th>
                                            <th>Build</th>
                                            <th style="width: 120px;">Cmdr</th>
                                            @*<th>Build</th>*@
                                            <th>Income</th>
                                            <th>Army</th>
                                            <th>Kills</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var player in players)
                                        {
                                            <tr class="@GetPlayerTableRowCss(player)" @onclick="@(() => showBuilds[player.GamePos] = !showBuilds[player.GamePos])">
                                                <td class="table-dark">@player.GamePos</td>
                                                @if (hasMmrChanges)
                                                {
                                                    <td class="table-dark">
                                                        <span class="oi @(player.MmrChange.GetValueOrDefault(0) < 0 ? "oi-arrow-bottom text-danger" : "oi-arrow-top text-success")">@player.MmrChange.GetValueOrDefault(0).ToString("N1", CultureInfo.InvariantCulture)</span>
                                                    </td>
                                                }
                                                <td>
                                                    <span @onclick:stopPropagation @onclick="e => ShowPlayerDetails(player.Player)" class="d-inline-block text-truncate text-decoration-underline" style="max-width: 120px;" data-bs-toggle="tooltip" data-bs-placement="top" data-bs-title="@player.Name">
                                                        @player.Name
                                                    </span>
                                                </td>
                                                <td>@player.APM</td>
                                                <td>
                                                    <input id="@($"showbuild{player.GamePos}")" name="@($"showbuild{player.GamePos}")" type="checkbox" class="form-check-input" checked="@showBuilds[player.GamePos]" />
                                                </td>
                                                <td>
                                                    <div class="d-flex">
                                                        <img src="@HelperService.GetImageSrc(player.Race)"
                                                     alt="@player.Race"
                                                     title="@player.Race"
                                                     width="30"
                                                     height="30" />
                                                        <span><small>@player.Race</small></span>
                                                    </div>
                                                </td>
                                                <td>@HelperService.GetBigNumberString(player.Income)</td>
                                                <td>@HelperService.GetBigNumberString(player.Army)</td>
                                                <td>@HelperService.GetBigNumberString(player.Kills)</td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    }
                </div>
                <div class="d-flex">
                    <div>
                        <button class="btn btn-sm btn-outline-light"
                                type="button"
                                data-bs-toggle="collapse"
                                data-bs-target="#ReplayRatingInfo"
                                aria-expanded="false"
                                aria-controls="ReplayRatingInfo"
                                @onclick="ShowHideRatingInfo">
                            <span class="oi @(showRatingInfo ? "oi-caret-bottom" : "oi-caret-top")"></span>
                            Rating Info
                        </button>
                    </div>
                    @if (Data.IsMaui && (DateTime.UtcNow - replayDto.GameTime) < TimeSpan.FromHours(24))
                    {
                        <div class="ms-5 form-check form-switch align-self-center">
                            <label class="form-check-label">
                                Online Rating (expected)
                                <input type="checkbox" class="form-check-input" @onchange="ToggleOnlineRating">
                                </input>
                            </label>
                        </div>
                    }
                </div>
                <div class="collapse" id="ReplayRatingInfo">
                    <ReplayRatingInfo ReplayRatingDto="replayDto.ReplayRatingInfo"></ReplayRatingInfo>
                </div>
            </div>
            <div class="card-footer">
                <CascadingValue Value="replayDto">
                    <ReplayFooter OnCloseRequested="OnCloseRequested" HideCloseButton="HideCloseButton"></ReplayFooter>
                </CascadingValue>
            </div>
        </div>
    </div>
</div>

@if (Interest != null)
{
    <sc2dsstats.razorlib.PlayerDetailsNg.PlayerDetailsSummary RequestNames="Interest"
                                                          RatingType="@(replayDto.GameMode == GameMode.Standard ? RatingType.Std : RatingType.Cmdr)"
                                                          OnCloseRequested="DetailsClose"
                                                          ReplaysRequest="ReplaysRequest" />
}

@if (showBuilds.Where(x => x).Any())
{
    <div class="d-flex mt-2 mb-3" style="font-size: 24px;">
        <div class="col-auto" style="min-width: 175px;">
            <span class="badge bg-primary">
                Breakpoint @(breakpoint != Breakpoint.All ? breakpoint.ToString() : $"Min{TimeSpan.FromSeconds(replayDto.Duration).ToString(@"mm")}")
            </span>
        </div>
        <div class="col-auto" style="min-width: 175px;">
            <input type="range" class="form-range" value="@((int)breakpoint)" min="1" max="@breakpointsCount" step="1" id="spawnrange" @onchange="MoveSpawn">
        </div>
    </div>

    <CascadingValue Value="breakpoint">
        <div class="row">
            @for (int i = 0; i < showBuilds.Count; i++)
            {
                var player = showBuilds[i] ? replayDto.ReplayPlayers.FirstOrDefault(f => f.GamePos == i) : null;
                @if (player != null)
                {
                    <ReplayBuild replayPlayer="player" ShowPlayerNames="showPlayerNames"></ReplayBuild>
                }
            }
        </div>
    </CascadingValue>
}

@code {
    [Parameter]
    [EditorRequired]
    public ReplayDetailsDto replayDto { get; set; } = null!;

    [Parameter]
    public RequestNames? Interest { get; set; } = null;

    [Parameter]
    public EventCallback OnCloseRequested { get; set; }

    [Parameter]
    public EventCallback<ReplaysToonIdRequest> ReplaysRequest { get; set; }

    [Parameter]
    public bool HideCloseButton { get; set; }

    double mid1;
    double mid2;
    string duration = "";
    private Breakpoint breakpoint = Breakpoint.All;
    private int breakpointsCount = 1;
    private List<bool> showBuilds = new List<bool>() { false, false, false, false, false, false, false };
    private bool showPlayerNames = true;
    private bool showRatingInfo;

    private ChartJsConfig chartJsConfig = null!;
    private ChartComponent? chartComponent;

    private bool showMiddleChart;

    private CancellationTokenSource cts = new();
    private SemaphoreSlim ss = new(1, 1);
    private ReplayRatingDto? mauiRating;

    protected override void OnInitialized()
    {
        chartJsConfig = new()
            {
                Type = ChartType.line
            };
        Init(replayDto);
        base.OnInitialized();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            JSRuntime.InvokeVoidAsync("enableTooltips");
        }
        base.OnAfterRender(firstRender);
    }

    public async void Init(ReplayDetailsDto replay)
    {
        showRatingInfo = false;
        if (showMiddleChart)
        {
            showMiddleChart = false;
            await InvokeAsync(() => StateHasChanged());
        }
        showBuilds.ForEach(f => f = false);
        (int startTeam, int[] gameloops, int totalGameloops) = HelperService.GetMiddleInfo(replay.Middle, replay.Duration);
        (mid1, mid2) = HelperService.GetChartMiddle(startTeam, gameloops, totalGameloops);
        duration = replay.Duration >= 3600 ?
              $"{TimeSpan.FromSeconds(replay.Duration).ToString(@"hh\:mm\:ss")} h"
            : $"{TimeSpan.FromSeconds(replay.Duration).ToString(@"mm\:ss")} min";
        breakpoint = Breakpoint.All;
        breakpointsCount = replay.ReplayPlayers.Select(s => s.Spawns.Count).Max();
        chartJsConfig = GetMiddleChartConfig(replay.Middle, replay.Duration, replay.WinnerTeam, replay.Cannon, replay.Bunker);

        if (replay.ReplayRatingInfo != null)
        {
            foreach (var player in replay.ReplayPlayers)
            {
                var plRating = replay.ReplayRatingInfo.RepPlayerRatings.FirstOrDefault(f => f.GamePos == player.GamePos);
                player.MmrChange = plRating?.RatingChange ?? 0;
            }
        }

        await InvokeAsync(() => StateHasChanged());
        await JSRuntime.InvokeVoidAsync("enableTooltips");
    }

    private void ChartEventTriggered(ChartJsEvent chartJsEvent)
    {

    }

    private void ShowHideRatingInfo()
    {
        showRatingInfo = !showRatingInfo;
    }

    private void MoveSpawn(ChangeEventArgs e)
    {
        if (int.TryParse(e?.Value?.ToString(), out int value))
        {
            if (value == breakpointsCount)
            {
                breakpoint = Breakpoint.All;
            }
            else
            {
                breakpoint = (Breakpoint)value;
            }
            StateHasChanged();
        }
    }

    private string GetPlayerTableRowCss(ReplayPlayerDto replayPlayerDto)
    {
        if (replayPlayerDto.Kills == replayDto.Maxkillsum)
        {
            return "table-success";
        }

        else if (replayPlayerDto.Duration < replayDto.Duration - 89)
        {
            return "table-danger";
        }

        else if (replayPlayerDto.IsUploader)
        {
            return "table-primary";
        }

        return "";
    }

    private void ShowPlayerDetails(PlayerDto player)
    {
        Interest = new(player.Name, player.ToonId, player.RegionId, player.RealmId);
        InvokeAsync(() => StateHasChanged());
    }

    private async Task ToggleOnlineRating()
    {
        await ss.WaitAsync();
        try
        {
            if (mauiRating == null)
            {
                await SetOnlineRatings();
            }
            else
            {
                SetMauiRatings();
            }
        }
        finally
        {
            ss.Release();
        }
    }

    private async Task SetOnlineRatings()
    {
        if (replayDto.ReplayRatingInfo == null)
        {
            return;
        }

        ToonIdRatingRequest request = new()
            {
                RatingType = replayDto.ReplayRatingInfo.RatingType,
                ToonIds = replayDto.ReplayPlayers.Select(s => s.Player.ToonId).ToList()
            };

        List<PlayerRatingReplayCalcDto> playerCalcRatings = await dataService.GetToonIdCalcRatings(request, cts.Token);

        if (mauiRating == null)
        {
            mauiRating = replayDto.ReplayRatingInfo;
        }
        replayDto.ReplayRatingInfo = dataService.GetOnlineRating(replayDto, playerCalcRatings);
        await InvokeAsync(() => StateHasChanged());
    }

    private void SetMauiRatings()
    {
        replayDto.ReplayRatingInfo = mauiRating;

        if (mauiRating == null)
        {
            return;
        }

        foreach (var replayPlayer in replayDto.ReplayPlayers)
        {
            var replayPlayerRating = mauiRating.RepPlayerRatings
                .FirstOrDefault(f => f.GamePos == replayPlayer.GamePos);

            if (replayPlayerRating == null)
            {
                continue;
            }

            replayPlayer.MmrChange = replayPlayerRating.RatingChange;
        }
        mauiRating = null;
    }

    private void DetailsClose()
    {
        Interest = null;
        StateHasChanged();
    }

    private ChartJsConfig GetMiddleChartConfig(string middle, int duration, int winnerTeam, int cannon, int bunker)
    {
        List<object> team1mid = new List<object>();
        List<object> team2mid = new List<object>();
        List<string> labels = new List<string>();
        List<int> labelLoops = new List<int>();
        int gameloop = 0;
        int sec = 0;

        (int startTeam, int[] gameloops, int totalGameloops) = HelperService.GetMiddleInfo(middle, duration);

        while (gameloop <= totalGameloops)
        {
            labels.Add(sec < 3600 ? TimeSpan.FromSeconds(sec).ToString(@"mm\:ss") : TimeSpan.FromSeconds(sec).ToString(@"hh\:mm\:ss"));
            (double mid1, double mid2) = HelperService.GetChartMiddle(startTeam, gameloops, Math.Min(gameloop, totalGameloops));
            team1mid.Add(mid1);
            team2mid.Add(mid2);
            sec += 30;
            gameloop = (int)(sec * 22.4);
            labelLoops.Add(gameloop);
        }

        List<ArbitraryLineConfig> objectives = new();
        if (cannon > 0 && duration > cannon)
        {
            int nextLabelLoop = labelLoops.First(f => f > cannon * 22.4);
            objectives.Add(new()
                {
                    XPosition = labelLoops.IndexOf(nextLabelLoop),
                    ArbitraryLineColor = "yellow",
                    Text = "Cannon"
                });
        }
        if (bunker > 0 && duration > bunker)
        {
            int nextLabelLoop = labelLoops.First(f => f > bunker * 22.4);
            objectives.Add(new()
                {
                    XPosition = labelLoops.IndexOf(nextLabelLoop),
                    ArbitraryLineColor = "yellow",
                    Text = "Bunker"
                });
        }

        return new()
            {
                Type = ChartType.line,
                Data = new ChartJsData()
                {
                    Labels = labels,
                    Datasets = new List<ChartJsDataset>()
                {
                    new LineDataset()
                    {
                        Label = "Team 1",
                        Data = team1mid,
                        BorderColor = winnerTeam == 1 ? "green" : "red",
                        BorderWidth = 3,
                        Fill = false,
                        PointBackgroundColor = new IndexableOption<string>("white"),
                        PointBorderColor = new IndexableOption<string>("yellow"),
                        PointRadius = new IndexableOption<double>(1),
                        PointBorderWidth = new IndexableOption<double>(1),
                        PointHitRadius = new IndexableOption<double>(1),
                        Tension = 0
                    },
                    new LineDataset()
                    {
                        Label = "Team 2",
                        Data = team2mid,
                        BorderColor = winnerTeam == 2 ? "green" : "red",
                        BorderWidth = 3,
                        Fill = false,
                        PointBackgroundColor = new IndexableOption<string>("white"),
                        PointBorderColor = new IndexableOption<string>("yellow"),
                        PointRadius = new IndexableOption<double>(1),
                        PointBorderWidth = new IndexableOption<double>(1),
                        PointHitRadius = new IndexableOption<double>(1),
                        Tension = 0
                    }
                }
                },
                Options = new ChartJsOptions()
                {
                    Responsive = true,
                    Plugins = new Plugins()
                    {
                        ArbitraryLines = objectives,
                        Legend = new Legend()
                        {
                            Position = "top"
                        },
                        Title = new Title()
                        {
                            Display = true,
                            Text = new IndexableOption<string>("Middle"),
                            Color = "yellow",
                            Font = new Font()
                            {
                                Size = 16
                            }
                        }
                    },
                    Scales = new ChartJsOptionsScales()
                    {
                        X = new LinearAxis()
                        {
                            Display = true,
                            Position = "bottom",
                            BeginAtZero = true,
                            Title = new Title()
                            {
                                Display = true,
                                Text = new IndexableOption<string>("GameTime"),
                                Color = "yellow",
                            },
                            Ticks = new LinearAxisTick()
                            {
                                Color = "yellow",
                            }
                        },
                        Y = new LinearAxis()
                        {
                            Display = true,
                            BeginAtZero = true,
                            Title = new Title()
                            {
                                Display = true,
                                Text = new IndexableOption<string>("%"),
                                Color = "yellow",
                            },
                            Ticks = new LinearAxisTick()
                            {
                                Color = "yellow",
                            },
                            Grid = new ChartJsGrid()
                            {
                                Color = "grey",
                            }
                        }
                    }
                }
            };
    }

    public void Dispose()
    {
        cts.Cancel();
        cts.Dispose();
        ss.Dispose();
    }
}
