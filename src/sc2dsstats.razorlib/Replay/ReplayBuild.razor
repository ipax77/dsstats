@using pax.dsstats.shared
@using sc2dsstats.razorlib.Services

<CascadingValue Value="replayPlayer">
    <CascadingValue Value="spawn">
        <div class="col-auto bgchart p-2 border rounded border-secondary">
            <div class="d-flex justify-content-between">
                <div class="">
                    <h5>
                        <span class="d-inline-block text-truncate badge @(replayPlayer.PlayerResult == PlayerResult.Win ? "bg-success" : "bg-danger")" style="max-width: 165px;">
                            #@replayPlayer.GamePos Build @(ShowPlayerNames ? replayPlayer.Name : "")
                        </span>
                    </h5>
                </div>
                <div class="">
                    <button type="button" class="btn btn-sm btn-outline-light" @onclick="() => showMap = !showMap">Map</button>
                </div>
            </div>
            @if (showMap)
            {
                <div class="position-relative">
                    <div class="position-absolut d-flex justify-content-end">
                        <span class="oi oi-x text-danger pointer" @onclick="@(() => showMap = false)"></span>
                    </div>
                    <ReplayMap Team="replayPlayer.Team"></ReplayMap>
                </div>
            }
            <div class="d-flex justify-content-between">
                <img src="@HelperService.GetImageSrc(replayPlayer.Race)"
                     alt="@replayPlayer.Race"
                     title="@replayPlayer.Race"
                     width="30"
                     height="30" />
                <div class="">
                    <span class="badge bg-info">Gas @spawn?.GasCount</span>
                </div>
                <div class="">
                    <button type="button" class="btn btn-sm btn-outline-light" @onclick="() => showUpgrades = !showUpgrades">Upgrades @spawn?.UpgradeSpent</button>
                </div>
            </div>
            @if (showUpgrades)
            {
                <ReplayUpgrades></ReplayUpgrades>
            }
            <ReplayUnits></ReplayUnits>
        </div>
    </CascadingValue>
</CascadingValue>


@code {
    [CascadingParameter]
    [EditorRequired]
    public Breakpoint breakpoint { get; set; }

    [Parameter]
    [EditorRequired]
    public ReplayPlayerDto replayPlayer { get; set; } = default!;

    [Parameter]
    [EditorRequired]
    public bool ShowPlayerNames { get; set; }

    private bool showMap;
    private bool showUpgrades;

    private SpawnDto? spawn => replayPlayer.Spawns.FirstOrDefault(f => f.Breakpoint == breakpoint);
}
