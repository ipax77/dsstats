@using Microsoft.AspNetCore.Components.Web.Virtualization;
@using pax.dsstats.shared.Arcade;
@using pax.dsstats.shared;
@using sc2dsstats.razorlib.Services;
@using System.Globalization;
@inject IArcadeService arcadeService
@inject NavigationManager NavigationManager
@implements IDisposable

<div class="@(replayDto == null ? "" : "visually-hidden")">
    <CascadingValue Value="replaysRequest">
        <ArcadeReplaysRequestComponent OnFieldChanged="Reload" WithMmrChange="true"></ArcadeReplaysRequestComponent>
    </CascadingValue>
    <div class="d-flex" style="max-width: 850px;">
        <p class="ms-auto">#@replaysCount</p>
        <span class="oi oi-reload text-primary pointer ms-2" style="font-size: 1rem;" @onclick="Reload"></span>
        @if (replayLoading)
        {
            <div class="spinner-border spinner-border-sm text-info ms-2" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        }
    </div>
    <div class="table-responsive tableFixHead" style="width: 750px; max-height: 80vh;">
        <table id="replaylist" class="tptable table">
            <thead class="user-select-none">
                <CascadingValue Value="replaysRequest.Orders">
                    <tr>
                        @if (replaysRequest.PlayerId > 0)
                        {
                            <th scope="col" style="z-index: 1;">
                                Mmr
                            </th>
                        }
                        <th scope="col" class="pointer" @onclick="@(e => SortList(e, "RegionId"))">
                            <SortArrow Property="RegionId">
                                <div class="text-center">
                                    <span class="oi oi-globe rounded-circle bg-primary p-1"></span>
                                </div>
                            </SortArrow>
                        </th>
                        <th scope="col" class="pointer" @onclick="@(e => SortList(e, "CreatedAt"))">
                            <SortArrow Property="GameTime">
                                GameTime
                            </SortArrow>
                        </th>
                        <th scope="col" class="pointer" @onclick="@(e => SortList(e, "Duration"))">
                            <SortArrow Property="Duration">
                                Duration
                            </SortArrow>
                        </th>
                        <th scope="col" class="pointer" @onclick="@(e => SortList(e, "WinnerTeam"))">
                            <SortArrow Property="WinnerTeam">
                                Winner
                            </SortArrow>
                        </th>
                        <th scope="col" class="pointer" @onclick="@(e => SortList(e, "GameMode"))">
                            <SortArrow Property="GameMode">
                                GameMode
                            </SortArrow>
                        </th>
                    </tr>
                </CascadingValue>
            </thead>
            <tbody>
                @if (replaysCount > 0)
                {
                    <Virtualize @ref="virtualizeComponent" Context="replay" ItemsProvider="LoadReplays" ItemSize="47">
                        <ItemContent>
                            <tr height="47px" class="pointer @(lastVisitId == replay.ArcadeReplayId ? "table-primary" : "")" @onclick="e => ShowReplay(replay.ArcadeReplayId)">
                                @if (replaysRequest.PlayerId > 0)
                                {
                                    <td>
                                        <div style="width: 40px;">
                                            <span class="oi @(replay.MmrChange < 0 ? "oi-arrow-bottom text-danger" : "oi-arrow-top text-success") d-block">
                                                @replay.MmrChange.ToString("N1", CultureInfo.InvariantCulture)
                                            </span>
                                        </div>
                                    </td>
                                }                                
                                <td>@Data.GetRegionString(replay.RegionId)</td>
                                <td>@replay.CreatedAt.ToString(@"yyyy-MM-dd")</td>
                                <td>@TimeSpan.FromSeconds(replay.Duration).ToString(@"hh\:mm\:ss")</td>
                                <td>@replay.WinnerTeam</td>
                                <td><span style="display:block; width: 200px;">@replay.GameMode</span></td>
                            </tr>
                        </ItemContent>
                        <Placeholder>
                            <tr height="47px"><td colspan="@(replaysRequest.PlayerId > 0 ? "6" : "5")">Loading ...</td></tr>
                        </Placeholder>
                    </Virtualize>
                }
            </tbody>
        </table>
    </div>
</div>

<div>

@if (requestNames != null)
{
@*    <sc2dsstats.razorlib.Arcade.PlayerDetails.ArcadePlayerDetailsComponent
        RequestNames="requestNames" 
        OnCloseRequested="ClosePlayerDetails"
        OnReplaysRequest="ReplaysRequest" />   
*@
        <sc2dsstats.razorlib.PlayerDetailsNg.ComboPlayerDetails RequestNames="requestNames"
                                                            OnCloseRequested="ClosePlayerDetails"
                                                            RatingType="@(replayDto?.ArcadeReplayRating?.RatingType ?? RatingType.Cmdr)"
                                                            OnReplaysRequest="DsstatsReplaysRequest"
                                                            OnArcadeReplaysRequest="ReplaysRequest"
                                                            ArcadeDetails="true" />
}
else if (replayDto != null)
{
    <ArcadeReplayComponent Replay="replayDto" OnCloseRequested="OnReplayClose" OnPlayerRequested="PlayerRequest" />
}
</div>

@code {
    [Parameter]
    [EditorRequired]
    public ArcadeReplaysRequest replaysRequest { get; set; } = default!;

    [Parameter]
    public EventCallback<ArcadeReplaysRequest> OnRequestChanged { get; set; }

    private Virtualize<ArcadeReplayListDto>? virtualizeComponent;
    SemaphoreSlim semaphoreSlim = new SemaphoreSlim(1, 1);
    CancellationTokenSource cts = new();

    private ArcadeReplayDto? replayDto = null;
    private int lastVisitId = 0;
    private bool replayLoading;
    private int replaysCount = 0;
    private RequestNames? requestNames = null;

    protected override async Task OnInitializedAsync()
    {
        await SetCount(replaysRequest);

        if (replaysRequest.ReplayId > 0)
        {
            await ShowReplay(replaysRequest.ReplayId);
        }
    }

    private async Task Reload()
    {
        await semaphoreSlim.WaitAsync();
        try
        {
            await OnRequestChanged.InvokeAsync(replaysRequest);
            await SetCount(replaysRequest);
            if (virtualizeComponent != null)
            {
                await InvokeAsync(async () =>
               {
                   await virtualizeComponent.RefreshDataAsync();
                   StateHasChanged();
               });
            }
        }
        finally
        {
            semaphoreSlim.Release();
        }
    }

    private async Task SetCount(ArcadeReplaysRequest request)
    {
        replayLoading = true;
        await InvokeAsync(() => StateHasChanged());
        replaysCount = await arcadeService.GetReplayCount(request, cts.Token);
        replayLoading = false;
        await InvokeAsync(() => StateHasChanged());
    }

    private async ValueTask<ItemsProviderResult<ArcadeReplayListDto>> LoadReplays(ItemsProviderRequest prRequest)
    {
        replaysRequest.Skip = prRequest.StartIndex;
        replaysRequest.Take = Math.Min(prRequest.Count, replaysCount - prRequest.StartIndex);

        var replays = await arcadeService.GetArcadeReplays(replaysRequest, prRequest.CancellationToken);

        return new ItemsProviderResult<ArcadeReplayListDto>(replays ?? new List<ArcadeReplayListDto>(), replaysCount);
    }

    private async Task SortList(MouseEventArgs e, string property)
    {
        var exOrder = replaysRequest.Orders.FirstOrDefault(f => f.Property == property);
        if (e.ShiftKey)
        {
            if (exOrder == null)
            {
                replaysRequest.Orders.Add(new TableOrder()
                    {
                        Property = property
                    });
            }
            else
            {
                exOrder.Ascending = !exOrder.Ascending;
            }
        }
        else
        {
            replaysRequest.Orders.Clear();
            replaysRequest.Orders.Add(new TableOrder()
                {
                    Property = property,
                    Ascending = exOrder == null ? false : !exOrder.Ascending
                });
        }
        await Reload();
    }

    public async Task ShowReplay(int id)
    {
        replayLoading = true;
        await InvokeAsync(() => StateHasChanged());
        replaysRequest.ReplayId = id;
        await OnRequestChanged.InvokeAsync(replaysRequest);

        replayDto = await arcadeService.GetArcadeReplay(replaysRequest.ReplayId);
        lastVisitId = replaysRequest.ReplayId;
        if (replayDto != null)
        {
            // replayComponent?.Init(replayDto);
        }
        replayLoading = false;
        await InvokeAsync(() => StateHasChanged());
    }

    private async void OnReplayClose()
    {
        replaysRequest.ReplayId = 0;
        await OnRequestChanged.InvokeAsync(replaysRequest);

        replayDto = null;
        await InvokeAsync(() => StateHasChanged());
    }

    private async void PlayerRequest(int arcadePlayerId)
    {
        requestNames = await arcadeService.GetRequetNamesFromId(arcadePlayerId, cts.Token);
        await InvokeAsync(() => StateHasChanged());
    }

    private void ClosePlayerDetails()
    {
        requestNames = null;
        StateHasChanged();
    }

    private void ReplaysRequest(ReplaysToonIdRequest request)
    {
        requestNames = null;
        OnReplayClose();
        replaysRequest.Search = request.Name;
        replaysRequest.PlayerId = request.ToonId;
        replaysRequest.PlayerIdWith = request.ToonIdWith;
        replaysRequest.PlayerIdVs = request.ToonIdVs;
        replaysRequest.ProfileName = request.ToonIdName;
        _ = Reload();
    }

    private void DsstatsReplaysRequest(ReplaysToonIdRequest request)
    {
        NavigationManager.NavigateTo(
            NavigationManager.GetUriWithQueryParameters("replays",
                new Dictionary<string, object?>()
                                {
                    { "Players", request.Name },
                    { "ToonId", request.ToonId },
                    { "ToonIdWith", request.ToonIdWith == 0 ? null : request.ToonIdWith },
                    { "ToonIdVs", request.ToonIdVs == 0 ? null : request.ToonIdVs },
                    { "ToonIdName", request.ToonIdName },
                                }
            )
        );
    }

    public void Dispose()
    {
        cts.Cancel();
        cts.Dispose();
    }
}
