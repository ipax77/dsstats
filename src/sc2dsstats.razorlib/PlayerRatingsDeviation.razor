@using pax.dsstats.shared
@using pax.BlazorChartJs
@inject IDataService dataService
@implements IDisposable

<div style="width: 800px;">
    <ChartComponent @ref="chartComponent" ChartJsConfig="chartJsConfig" OnEventTriggered="EventTriggered"></ChartComponent>
</div>

@code {
    [Parameter]
    public bool Std { get; set; }

    ChartComponent? chartComponent;
    ChartJsConfig chartJsConfig = null!;
    SemaphoreSlim ss = new(1, 1);

    protected override void OnInitialized()
    {
        chartJsConfig = GetLineChartConfig();
        ss.WaitAsync();
        _ = LoadData();
        base.OnInitialized();
    }

    private void EventTriggered(ChartJsEvent e)
    {
        if (e is ChartJsInitEvent initEvent)
        {
            ss.Release();
        }
    }

    public async Task LoadData()
    {
        var devs = Std ? await dataService.GetRatingsDeviationStd() : await dataService.GetRatingsDeviation();

        if (devs.Any())
        {
            var maxDevs = devs.Where(x => x.Count == devs.Max(m => m.Count)).ToList();
            var max2 = devs.OrderByDescending(o => o.Count).Skip(1).FirstOrDefault();
            if (max2 != null)
            {
                maxDevs.ForEach(f => f.Count = max2.Count);
            }

            await ss.WaitAsync();
            try
            {
                foreach (var dataset in chartJsConfig.Data.Datasets.ToArray())
                {
                    chartJsConfig.RemoveDataset(dataset);
                }
                chartJsConfig.SetLabels(devs.Select(s => s.Mmr.ToString()).ToList());
                chartJsConfig.AddDataset(GetLineDataset(devs));
            }
            catch { }
            finally
            {
                ss.Release();
            }
        }
    }

    private LineDataset GetLineDataset(List<MmrDevDto> devs)
    {
        return new()
            {
                Label = $"{(Std ? "Std" : "Cmdr")} Rating distribution",
                Data = new List<object>(devs.Select(s => (object)s.Count)),
                BackgroundColor = "lightblue",
                BorderColor = "lightblue",
                BorderWidth = 4,
                Fill = false,
                PointBackgroundColor = new IndexableOption<string>("blue"),
                PointBorderColor = new IndexableOption<string>("blue"),
                PointRadius = new IndexableOption<double>(1),
                PointBorderWidth = new IndexableOption<double>(1),
                PointHitRadius = new IndexableOption<double>(1),
                Tension = 0.4
            };
    }

    private ChartJsConfig GetLineChartConfig()
    {
        return new()
            {
                Type = ChartType.line,
                Data = new ChartJsData()
                {
                    Labels = new List<string>()
                    {
                    },
                    Datasets = new List<ChartJsDataset>()
                    {
                    }
                },
                Options = new ChartJsOptions()
                {
                    Responsive = true,
                    Plugins = new Plugins()
                    {
                        ArbitraryLines = new List<ArbitraryLineConfig>()
                    },
                    Scales = new ChartJsOptionsScales()
                    {
                        X = new LinearAxis()
                        {
                            Display = true,
                            Position = "bottom",
                            BeginAtZero = true,
                            Title = new Title()
                            {
                                Display = true,
                                Text = new IndexableOption<string>("Rating"),
                                Color = "red",
                                Font = new()
                                {
                                    Size = 16
                                },
                                Padding = new()
                                {
                                    Top = 4,
                                    Bottom = 4
                                }
                            },
                            Ticks = new LinearAxisTick()
                            {
                                Color = "red",
                                Padding = 3,
                                AutoSkipPadding = 3,
                                BackdropColor = "rgba(255, 255, 255, 0.75)",
                                Align = "center",
                                CrossAlign = "near",
                                ShowLabelBackdrop = false,
                                BackdropPadding = new Padding(2)
                            },
                            Grid = new ChartJsGrid()
                            {
                                Display = true,
                                Color = "grey",
                                LineWidth = 1,
                                DrawOnChartArea = true,
                                TickLength = 8,
                                TickWidth = 1,
                                TickColor = "red",
                                Offset = false,
                            },
                            Border = new ChartJsAxisBorder()
                            {
                                Display = true,
                                Width = 1,
                                Color = "grey"
                            }
                        },
                        Y = new LinearAxis()
                        {
                            Display = true,
                            BeginAtZero = true,
                            Ticks = new LinearAxisTick()
                            {
                                Color = "red",
                                Padding = 3,
                                AutoSkipPadding = 3,
                                BackdropColor = "rgba(255, 255, 255, 0.75)",
                                Align = "center",
                                CrossAlign = "near",
                                ShowLabelBackdrop = false,
                                BackdropPadding = new Padding(2)
                            },
                            Grid = new ChartJsGrid()
                            {
                                Display = true,
                                Color = "grey",
                                LineWidth = 1,
                                DrawOnChartArea = true,
                                TickLength = 8,
                                TickWidth = 1,
                                TickColor = "red",
                                Offset = false,
                            },
                            Border = new ChartJsAxisBorder()
                            {
                                Display = true,
                                Width = 1,
                                Color = "grey"
                            }
                        }
                    }
                }
            };
    }

    public void Dispose()
    {
        //ss.Dispose();
    }
}
