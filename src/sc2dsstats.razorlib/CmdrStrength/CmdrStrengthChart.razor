@using Microsoft.JSInterop;
@using System.Text.Json;
@using System.Text.Json.Nodes;
@using pax.BlazorChartJs;
@using pax.dsstats.shared;
@inject IJSRuntime jsRuntime

<ChartComponent @ref="chartComponent" ChartJsConfig="chartConfig" OnEventTriggered="ChartEventTriggered" />

@code {
    [Parameter, EditorRequired]
    public pax.dsstats.shared.CmdrStrengthRequest Request { get; set; } = default!;

    [Parameter, EditorRequired]
    public CmdrStrengthResult Result { get; set; } = default!;

    [Parameter]
    public EventCallback<int> OnBubbleHover { get; set; }

    private ChartJsConfig chartConfig = null!;
    private ChartComponent? chartComponent;

    private bool chartIsReady;
    private bool bubbleLabelsRegistered;

    private const double rMin = 10.0;
    private const double rMax = 50.0;

    private CmdrStrengthItem? hoverItem;

    private readonly string mainColor = "#3F5FFA";

    protected override void OnInitialized()
    {
        chartConfig = GetBubbleChartConfig();
        base.OnInitialized();
    }

    public void Update(pax.dsstats.shared.CmdrStrengthRequest request, CmdrStrengthResult result)
    {
        if (!chartIsReady)
        {
            return;
        }

        if (chartConfig.Data.Datasets.Any())
        {
            chartConfig.RemoveDatasets(chartConfig.Data.Datasets);
        }

        if (!result.Items.Any())
        {
            return;
        }

        hoverItem = null;

        if (!bubbleLabelsRegistered)
        {
            jsRuntime.InvokeVoidAsync("registerbubbleLabelsPlugin");
            bubbleLabelsRegistered = true;
        }

        if (chartConfig.Options?.Scales?.Y != null
            && chartConfig.Options?.Plugins?.Title != null)
        {
            var yMax = Math.Max(result.Items.Select(s => s.AvgRatingGain).Max(), 0.1);

            chartConfig.Options.Scales.Y.SuggestedMax = yMax + yMax * 0.2;
            chartConfig.Options.Plugins.Title.Text = request.Interest == Commander.None
                ? new IndexableOption<string>($"Commaders Strength - {Data.GetRatingTypeLongName(request.RatingType)} - {Data.GetTimePeriodLongName(request.TimePeriod)}")
                : new IndexableOption<string>($"{request.Interest}s Strength - {Data.GetRatingTypeLongName(request.RatingType)} - {Data.GetTimePeriodLongName(request.TimePeriod)}")
            ;
            chartConfig.UpdateChartOptions();
        }

        double min = Math.Max(result.Items.Min(m => m.AvgRating), 100);
        double max = Math.Max(result.Items.Max(m => m.AvgRating), 200);

        chartConfig.AddDataset(GetBubbleChartDataset(request, result, min, max));

        jsRuntime.InvokeVoidAsync("setZeroLineColor", "rgba(113, 116, 143, 0.25)", mainColor, "rgb(142, 139, 112, 0.50)", chartConfig.ChartJsConfigGuid);

        jsRuntime.InvokeVoidAsync("setBubbleChartTooltips", request.Interest == Commander.None ? "" : request.Interest.ToString(), min, max, rMin, rMax, chartConfig.ChartJsConfigGuid);
    }

    private void ChartEventTriggered(ChartJsEvent e)
    {
        if (e is ChartJsInitEvent initEvent)
        {
            chartIsReady = true;
            Update(Request, Result);
        }
        else if (e is ChartJsLabelHoverEvent hoverEvent)
        {
            if (hoverEvent.Value != null
                && hoverEvent.Value is JsonElement jsonElement)
            {
                if (jsonElement.TryGetProperty("label", out JsonElement labelEle)
                    && Enum.TryParse(typeof(Commander), labelEle.GetString(), out var cmdrObj)
                    && cmdrObj is Commander cmdr)
                {
                    var item = Result.Items.FirstOrDefault(f => f.Commander == cmdr);
                    if (item != null && hoverItem != item)
                    {
                        hoverItem = item;
                        OnBubbleHover.InvokeAsync(Result.Items.IndexOf(item));
                    }
                }
            }
        }
    }

    private int FindClosestPoint(double x, double y)
    {
        int closestIndex = -1;
        double closestDistance = double.MaxValue;

        for (int i = 0; i < Result.Items.Count; i++)
        {
            var item = Result.Items[i];
            double distance = Math.Sqrt(Math.Pow(x - (Math.Round(item.Wins * 100.0 / (double)item.Matchups, 2)), 2) + Math.Pow(y - item.Matchups, 2));
            if (distance < closestDistance)
            {
                closestIndex = i;
                closestDistance = distance;
            }
        }

        return closestIndex;
    }

    public void AnimateBubble(int index)
    {
        if (!chartIsReady)
        {
            return;
        }
        jsRuntime.InvokeVoidAsync("bubblePointHover", chartConfig.ChartJsConfigGuid, index);
    }

    public ChartJsDataset GetBubbleChartDataset(pax.dsstats.shared.CmdrStrengthRequest request, CmdrStrengthResult result, double min, double max)
    {
        return new BubbleDataset()
            {
                Label = $"{Data.GetRatingTypeLongName(request.RatingType)} - {Data.GetTimePeriodLongName(request.TimePeriod)}",
                Data = result.Items.Select(s => (object)(new CmdrBubbleDataPoint()
                {
                    X = Math.Round(s.Matchups == 0 ? 0 : s.Wins * 100.0 / s.Matchups, 2),
                    // Y = s.Matchups,
                    Y = Math.Round(s.AvgRatingGain, 2),
                    R = GetRadius(s.AvgRating, min, max),
                    Label = s.Commander.ToString()
                })).ToList(),
                BorderWidth = new IndexableOption<double>(2),
                BorderColor = new IndexableOption<string>(result.Items.Select(s => Data.GetBackgroundColor(s.Commander, "90")).ToList()),
                BackgroundColor = new IndexableOption<string>(result.Items.Select(s => Data.GetBackgroundColor(s.Commander, "66")).ToList()),
                HoverBorderColor = new IndexableOption<string>("red"),
                HoverBorderWidth = new IndexableOption<double>(4),
            };
    }

    private double GetRadius(double avgRating, double min, double max)
    {
        return Math.Round((((avgRating - min) * (rMax - rMin)) / (max - min)) + rMin, 2);
    }

    public ChartJsConfig GetBubbleChartConfig()
    {
        return new()
            {
                Type = ChartType.bubble,
                Data = new ChartJsData()
                {
                    Datasets = new List<ChartJsDataset>()
                },
                Options = new ChartJsOptions()
                {
                    Responsive = true,
                    MaintainAspectRatio = true,
                    OnHoverEvent = true,
                    Plugins = new()
                    {
                        Title = new()
                        {
                            Display = true,
                            Text = new IndexableOption<string>("Commaders Strength"),
                            Color = "#CED0DD",
                            Font = new()
                            {
                                Size = 16,
                            }
                        },
                        Legend = new Legend()
                        {
                            Display = false,
                            Labels = new Labels()
                            {
                                Color = "#CED0DD",
                                BoxHeight = 0,
                                BoxWidth = 0
                            }
                        }
                    },
                    Scales = new ChartJsOptionsScales()
                    {
                        X = new LinearAxis()
                        {
                            Type = "linear",
                            Position = "bottom",
                            Title = new()
                            {
                                Display = true,
                                Text = new IndexableOption<string>("Winrate"),
                                Color = mainColor
                            },
                            Ticks = new LinearAxisTick()
                            {
                                Color = mainColor,
                            },
                            Grid = new ChartJsGrid()
                            {
                                Display = true,
                                Color = "rgba(113, 116, 143, 0.25)",
                                TickColor = "rgba(113, 116, 143, 0.75)",
                                Z = -1
                            },
                            Border = new ChartJsAxisBorder()
                            {
                                Display = true,
                                Color = "rgba(113, 116, 143)",
                                Dash = new List<double>() { 2, 4 }
                            }
                        },
                        Y = new LinearAxis()
                        {
                            Title = new()
                            {
                                Display = true,
                                Text = new IndexableOption<string>("Average Rating Gained"),
                                Color = mainColor,
                            },
                            Ticks = new LinearAxisTick()
                            {
                                Display = true,
                                Color = "lightred",
                            },
                            Grid = new ChartJsGrid()
                            {
                                Display = true,
                                Color = "rgba(113, 116, 143, 0.25)",
                                TickColor = "rgba(113, 116, 143, 0.75)",
                                Z = -1
                            },
                            Border = new ChartJsAxisBorder()
                            {
                                Display = true,
                                Color = "rgba(113, 116, 143)",
                                Dash = new List<double>() { 2, 4 }
                            }
                        }
                    }
                }
            };
    }

    public record CmdrBubbleDataPoint : BubbleDataPoint
    {
        public string Label { get; set; } = string.Empty;
    }
}
