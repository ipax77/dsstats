@using System.Diagnostics;
@using pax.dsstats.shared;
@inject IDataService dataService
@implements IDisposable

<div>
    <CmdrStrengthRequest Request="Request" OnRequestChanged="RequestChanged"></CmdrStrengthRequest>
</div>

<div class="mt-2">
    <p class="text-warning">
        Only replays with no leavers were used.
        AvgRating is the average rating of players that picked the corresponding commander in the given time period.
        AvgGain is the average rating gained.
    </p>
</div>

@if (result == null)
{
    <div class="spinner-border spinner-border-sm text-info ms-2" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
}
else
{
    @if (isLoading)
    {
        <div class="spinner-border spinner-border-sm text-info ms-2" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    }
    <div class="mt-2">
        <div class="row">
            <div class="col-auto">
                <CmdrStrengthTable @ref="cmdrStrengthTable" Result="result" OnTableHover="TableHover"></CmdrStrengthTable>
            </div>
            <div class="col-auto">
                <div class="border rounded border-secondary" style="min-width: 550px; width: 44vw; height: calc(44vw * 0.5); min-height: 275px;">
                    <CmdrStrengthChart @ref="cmdrStrengthChart" Request="Request" Result="result" OnBubbleHover="BubbleHover"></CmdrStrengthChart>
                </div>
                <div style="min-width: 550px; max-width: 45vw;">
@*                    @if (result.Items.Any(a => a.Matchups < 961))
                    {
                        <div class="ms-2 mt-2 p-2 bg-dark">
                            <h3 class="text-danger">Warning</h3>
                            <p>
                                At least one matchups sample size is less than 961 which would be required to have a significant (p &lt; 0.05) result.
                                Try to increase the Time Peroid to get a better sample size.
                            </p>
                        </div>
                    }*@
                    @if (Request.Interest == Commander.None)
                    {
                        <div class="ms-2 mt-2 p-2 bg-dark">
                            <h3 class="text-warning">Interpretation</h3>
                            <p class="fw-bold">
                                TL;DR Top right is good, bottom left is bad
                            </p>
                            <p>
                                <span class="oi oi-chevron-right"></span>
                                The further right the bubble is, the higher the commanders winrate
                            </p>
                            <p>
                                <span class="oi oi-chevron-right"></span>
                                The higher the bubble, the more rating was gained while playing the commander
                            </p>
                            <p>
                                <span class="oi oi-chevron-right"></span>
                                The bigger the bubble, the stronger the players who played the commander
                            </p>
                        </div>
                    }
                    else
                    {
                        <div class="ms-2 mt-2 p-2 bg-dark">
                            <h3 class="text-warning">Interpretation</h3>
                            <p class="fw-bold">
                                TL;DR Top right <span class="text-warning">@Request.Interest</span> is good against, bottom left is bad
                            </p>
                            <p>
                                <span class="oi oi-chevron-right"></span>
                                The further right the bubble is, the higher <span class="text-warning">@Request.Interest</span>s winrate vs the commander
                            </p>
                            <p>
                                <span class="oi oi-chevron-right"></span>
                                The higher the bubble, the more rating was gained by the players who played <span class="text-warning">@Request.Interest</span>
                            </p>
                            <p>
                                <span class="oi oi-chevron-right"></span>
                                The bigger the bubble, the stronger the players who played <span class="text-warning">@Request.Interest</span> vs the commander
                            </p>
                        </div>
                    }
                </div>
            </div>
            <div class="col-auto">
                <div class="ms-2 mt-2 p-2 bg-dark" style="max-width: 1000px;">
                    <p>
                        The <b>Strength</b> value is a measure of a commander's overall effectiveness in StarCraft II Direct Strike, calculated based on factors such as their win rate, average rating, and matchup frequency. It gives an indication of how well a commander is performing in the game, with higher values indicating greater strength.
                    </p>
                    <p>
                        <b>Error</b> represents the margin of error, it is a statistical measure that shows the range of possible error in a dataset. In the context of these commander strength rankings, it represents the range of possible values for the commander's true strength based on the available data. The smaller the margin of error, the more reliable the strength ranking is likely to be. In general, a margin of error of less than 0.05 can be considered small enough to suggest that the commander's strength ranking is statistically significant
                    </p>
                </div>
            </div>
        </div>

    </div>
}


@code {
    [Parameter, EditorRequired]
    public pax.dsstats.shared.CmdrStrengthRequest Request { get; set; } = default!;

    [Parameter]
    public EventCallback<pax.dsstats.shared.CmdrStrengthRequest> OnRequestChanged { get; set; }

    private CmdrStrengthResult? result;
    private CancellationTokenSource cts = new();
    private bool isLoading;

    private CmdrStrengthChart? cmdrStrengthChart;
    private CmdrStrengthTable? cmdrStrengthTable;

    protected override void OnInitialized()
    {
        _ = LoadData();
        base.OnInitialized();
    }

    private void RequestChanged()
    {
        OnRequestChanged.InvokeAsync(Request);
        _ = LoadData();
    }

    public async Task LoadData()
    {
        isLoading = true;
        await InvokeAsync(() => StateHasChanged());
        result = await dataService.GetCmdrStrengthResults(Request, cts.Token);
        isLoading = false;
        cmdrStrengthChart?.Update(Request, result);
        TableHover(0);
        SetStrength(result.Items);
        await InvokeAsync(() => StateHasChanged());
    }

    public void SetStrength(List<CmdrStrengthItem> items)
    {
        if (!items.Any())
        {
            return;
        }

        double weightMatchups = 1;
        double weightWinrate = 5;
        double weightRating = 8;
        double weightGain = 8;

        double z = 1.96; // 95% confidence interval

        double minMatchups = items.Min(m => m.Matchups);
        double maxMatchups = items.Max(m => m.Matchups);

        var winrates = items.Select(s => s.Wins * 100.0 / (double)s.Matchups).ToList();
        double minWinrate = winrates.Min();
        double maxWinrate = winrates.Max();

        double minRating = items.Min(m => m.AvgRating);
        double maxRating = items.Max(m => m.AvgRating);

        double minGain = items.Min(m => m.AvgRatingGain);
        double maxGain = items.Max(m => m.AvgRatingGain);

        foreach (var item in items)
        {
            var normalizedMatchups = (item.Matchups - minMatchups) / (maxMatchups - minMatchups);
            var normalizedWinrate = (item.Wins * 100.0 / (double)item.Matchups - minWinrate) / (maxWinrate - minWinrate);
            var normalizedRating = (item.AvgRating - minRating) / (maxRating - minRating);
            var normalizedGain = (item.AvgRatingGain - minGain) / (maxGain - minGain);

            double p = item.Wins / (double)item.Matchups;
            double stdErr = Math.Sqrt(p * (1 - p) / item.Matchups);
            double marginOfError = z * stdErr;

            item.Strength =
                  weightMatchups * normalizedMatchups
                + weightWinrate * normalizedWinrate
                + weightRating * normalizedRating
                + weightGain * normalizedGain;

            item.MarginOfError = marginOfError;
        }

        //var minStrength = items.Min(m => m.Strength);
        //var maxStrength = items.Max(m => m.Strength);

        //items.ForEach(f => f.Strength = Math.Round(1 + 9 * (f.Strength - minStrength) / (maxStrength - minStrength), 2));
    }

    private void TableHover(int index)
    {
        cmdrStrengthChart?.AnimateBubble(index);
    }

    private void BubbleHover(int index)
    {
        cmdrStrengthTable?.BubbleHover(index);
    }

    public void Dispose()
    {
        cts.Cancel();
        cts.Dispose();
    }
}
