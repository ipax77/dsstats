@using pax.BlazorChartJs;
@using pax.dsstats.shared;
@using sc2dsstats.razorlib.Builds
@inject IDataService dataService
@implements IDisposable

<div>
    <CascadingValue Value="BuildRequest">
        <StatsUpgradesRequestComponent MauiPlayers="MauiPlayers" OnRequestChanged="Load"></StatsUpgradesRequestComponent>
    </CascadingValue>
</div>

<div class="d-flex mt-2 mb-3" style="font-size: 24px;">
    <div class="col-auto" style="min-width: 175px;">
        <span class="badge bg-primary">
            Breakpoint @breakpoint
        </span>
    </div>
    <div class="col-auto ms-1 mt-1" style="min-width: 150px;">
        <input type="range" class="form-range" value="@((int)breakpoint)" min="1" max="3" step="1" id="spawnrange" @onchange="ChangeBreakpoint">
    </div>
</div>

@if (isLoading)
{
    <div class="spinner-border spinner-border-sm text-info ms-2" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
}

<div class="w-75 bg-dark border rounded" style="min-width: 550px; height: @(chartHeight)px;">
    <ChartComponent @ref="chartComponent" ChartJsConfig="chartJsConfig" OnEventTriggered="ChartEventTriggered"></ChartComponent>
</div>

@code {
    [Parameter, EditorRequired]
    public BuildRequest BuildRequest { get; set; } = default!;

    [Parameter]
    public List<RequestNames> MauiPlayers { get; set; } = new();

    [Parameter]
    public EventCallback OnRequestChanged { get; set; }

    private bool isLoading;
    private StatsUpgradesResponse? statsUpgradesResponse;
    private ChartComponent? chartComponent;
    private ChartJsConfig chartJsConfig = null!;
    private bool isChartInit;
    private bool isDataReady;
    private Breakpoint breakpoint = Breakpoint.Min5;
    private int chartHeight = 1000;
    private readonly int barHeight = 30;

    CancellationTokenSource cts = new();

    protected override void OnInitialized()
    {
        chartJsConfig = GetChartJsConfig();
        _ = Load();
        base.OnInitialized();
    }

    private void ChartEventTriggered(ChartJsEvent chartJsEvent)
    {
        if (chartJsEvent is ChartJsInitEvent initEvent)
        {
            isChartInit = true;
            if (isChartInit && isDataReady)
            {
                SetupChart();
            }
        }
    }

    private async Task Load()
    {
        if (isLoading)
            return;
        isLoading = true;
        await InvokeAsync(() => StateHasChanged());
        statsUpgradesResponse = await dataService.GetUpgradeStats(BuildRequest, cts.Token);
        isLoading = false;
        await InvokeAsync(() => StateHasChanged());
        await OnRequestChanged.InvokeAsync();
        isDataReady = true;
        if (isChartInit && isDataReady)
        {
            SetupChart();
        }
    }

    private void SetupChart()
    {
        if (chartComponent == null || statsUpgradesResponse == null)
        {
            return;
        }

        if (chartJsConfig.Data.Datasets.Any())
        {
            chartJsConfig.RemoveDatasets(chartJsConfig.Data.Datasets);
        }

        var armyDataset = GetArmyDataset();
        var upgradeDataset = GetUpgradesDataset();
        var killsDataset = GetKillsDataset();

        List<ChartHelper> chartHelpers = new();

        foreach (var ent in statsUpgradesResponse.BpInfos)
        {
            var bpInfo = ent.Value.FirstOrDefault(x => x.Breakpoint == breakpoint);

            if (bpInfo == null)
            {
                continue;
            }

            chartHelpers.Add(new()
            {
                Label = $"{ent.Key.ToString()} ({bpInfo.Count})",
                Army = (object)(bpInfo.ArmyValue / (double)bpInfo.Count),
                Upgrades = (object)(bpInfo.UpgradeSpent / (double)bpInfo.Count),
                Kills = (object)(bpInfo.Kills / (double)bpInfo.Count)
            });
        }

        if (chartHelpers.Any())
        {
            chartHeight = chartHelpers.Count * barHeight + 150;
            StateHasChanged();

            chartHelpers = chartHelpers.OrderBy(o => o.Army).ToList();
            chartJsConfig.SetLabels(chartHelpers.Select(s => s.Label).ToList());
            armyDataset.Data = chartHelpers.Select(s => s.Army).ToList();
            upgradeDataset.Data = chartHelpers.Select(s => s.Upgrades).ToList();
            killsDataset.Data = chartHelpers.Select(s => s.Kills).ToList();

            // chartJsConfig.AddDatasets(new List<ChartJsDataset>() { armyDataset, upgradeDataset, getKillsDataset });
            chartJsConfig.AddDatasets(new List<ChartJsDataset>() { armyDataset, upgradeDataset });
        }
    }

    public record ChartHelper
    {
        public string Label { get; init; } = null!;
        public object Army { get; init; } = null!;
        public object Upgrades { get; init; } = null!;
        public object Kills { get; init; } = null!;
    }

    private void ChangeBreakpoint(ChangeEventArgs e)
    {
        if (int.TryParse(e?.Value?.ToString(), out int value))
        {
            breakpoint = (Breakpoint)value;
            SetupChart();
        }
    }

    private ChartJsDataset GetArmyDataset()
    {
        return new BarDataset()
            {
                Label = "Armyvalue",
                Data = new List<object>(),
                BackgroundColor = new IndexableOption<string>("rgba(255, 99, 132, 0.4)"),
                BorderColor = new IndexableOption<string>("rgba(255, 99, 132, 1)"),
                BorderWidth = new IndexableOption<double>(1),
                BarThickness = barHeight
            };
    }

    private ChartJsDataset GetUpgradesDataset()
    {
        return new BarDataset()
            {
                Label = "Upgrades",
                Data = new List<object>(),
                BackgroundColor = new IndexableOption<string>("rgba(54, 162, 235, 0.4)"),
                BorderColor = new IndexableOption<string>("rgba(54, 162, 235, 1)"),
                BorderWidth = new IndexableOption<double>(1),
                BarThickness = barHeight,
            };
    }

    private ChartJsDataset GetKillsDataset()
    {
        return new BarDataset()
            {
                Label = "KilledValue",
                Data = new List<object>(),
                BackgroundColor = new IndexableOption<string>("rgba(255, 206, 86, 0.4)"),
                BorderColor = new IndexableOption<string>("rgba(255, 206, 86, 1)"),
                BorderWidth = new IndexableOption<double>(1),
                BarThickness = barHeight,
            };
    }

    private ChartJsConfig GetChartJsConfig()
    {
        return new()
            {
                Type = ChartType.bar,
                Data = new ChartJsData()
                {
                    Labels = new List<string>()
                    {
                    },
                    Datasets = new List<ChartJsDataset>()
                    {
                    }
                },
                Options = new ChartJsOptions()
                {
                    Responsive = true,
                    MaintainAspectRatio = false,
                    IndexAxis = "y",
                    Plugins = new Plugins()
                    {
                        Legend = new Legend()
                        {
                            Display = true,
                            Position = "right",
                            Labels = new Labels()
                            {
                                Color = "lightgrey",
                            }
                        }
                    },
                    Scales = new ChartJsOptionsScales()
                    {
                        X = new LinearAxis()
                        {
                            BeginAtZero = true,
                            Stacked = true,
                            Ticks = new LinearAxisTick()
                            {
                                Color = "lightgrey",
                                Padding = 3,
                                AutoSkipPadding = 3,
                                BackdropColor = "rgba(255, 255, 255, 0.75)",
                                Align = "center",
                                CrossAlign = "near",
                                ShowLabelBackdrop = false,
                                BackdropPadding = new Padding(2)
                            },
                        },
                        Y = new LinearAxis()
                        {
                            Stacked = true,
                            Display = true,
                            Ticks = new LinearAxisTick()
                            {
                                Color = "lightgrey",
                                Padding = 3,
                                AutoSkipPadding = 3,
                                BackdropColor = "rgba(255, 255, 255, 0.75)",
                                Align = "center",
                                CrossAlign = "near",
                                ShowLabelBackdrop = false,
                                BackdropPadding = new Padding(2)
                            },
                            Grid = new ChartJsGrid()
                            {
                                Display = false,
                                DrawBorder = false
                            }
                        }
                    },

                }

            };
    }

    public void Dispose()
    {
        cts.Cancel();
        cts.Dispose();
    }
}
