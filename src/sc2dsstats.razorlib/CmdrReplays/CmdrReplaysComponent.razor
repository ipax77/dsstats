@using pax.dsstats.shared
@using sc2dsstats.razorlib.CmdrReplayInfo
@using Microsoft.AspNetCore.Components.Web.Virtualization
@using System.Globalization
@using Microsoft.JSInterop
@inject IDataService dataService
@inject NavigationManager NavigationManager
@inject IJSRuntime jsRuntime
@implements IDisposable

<style>
    .tableFixHead {
        overflow-y: auto;
        overflow-x: auto;
        height: 800px;
    }

        .tableFixHead thead th {
            position: sticky;
            top: 0;
        }

    table {
        border-collapse: collapse;
        width: 100%;
    }

    th,
    td {
        padding: 8px 16px;
        white-space: nowrap;
    }

    .tablebackground {
        position: absolute;
        z-index: -1;
        opacity: 0.15;
    }

    .preload-terran {
        background-image: url("/_content/sc2dsstats.razorlib/images/terran-min.png");
        background-repeat: no-repeat;
        height: 28.5px;
        width: 28.5px;
        background-size: cover;
    }

    .preload-protoss {
        background-image: url("/_content/sc2dsstats.razorlib/images/protoss-min.png");
        background-repeat: no-repeat;
        height: 28.5px;
        width: 28.5px;
        background-size: cover;
    }

    .preload-zerg {
        background-image: url("/_content/sc2dsstats.razorlib/images/zerg-min.png");
        background-repeat: no-repeat;
        height: 28.5px;
        width: 28.5px;
        background-size: cover;
    }

    .preload-abathur {
        background-image: url("/_content/sc2dsstats.razorlib/images/abathur-min.png");
        background-repeat: no-repeat;
        height: 28.5px;
        width: 28.5px;
        background-size: cover;
    }

    .preload-alarak {
        background-image: url("/_content/sc2dsstats.razorlib/images/alarak-min.png");
        background-repeat: no-repeat;
        height: 28.5px;
        width: 28.5px;
        background-size: cover;
    }

    .preload-artanis {
        background-image: url("/_content/sc2dsstats.razorlib/images/artanis-min.png");
        background-repeat: no-repeat;
        height: 28.5px;
        width: 28.5px;
        background-size: cover;
    }

    .preload-dehaka {
        background-image: url("/_content/sc2dsstats.razorlib/images/dehaka-min.png");
        background-repeat: no-repeat;
        height: 28.5px;
        width: 28.5px;
        background-size: cover;
    }

    .preload-fenix {
        background-image: url("/_content/sc2dsstats.razorlib/images/fenix-min.png");
        background-repeat: no-repeat;
        height: 28.5px;
        width: 28.5px;
        background-size: cover;
    }

    .preload-horner {
        background-image: url("/_content/sc2dsstats.razorlib/images/horner-min.png");
        background-repeat: no-repeat;
        height: 28.5px;
        width: 28.5px;
        background-size: cover;
    }

    .preload-karax {
        background-image: url("/_content/sc2dsstats.razorlib/images/karax-min.png");
        background-repeat: no-repeat;
        height: 28.5px;
        width: 28.5px;
        background-size: cover;
    }

    .preload-kerrigan {
        background-image: url("/_content/sc2dsstats.razorlib/images/kerrigan-min.png");
        background-repeat: no-repeat;
        height: 28.5px;
        width: 28.5px;
        background-size: cover;
    }

    .preload-mengsk {
        background-image: url("/_content/sc2dsstats.razorlib/images/mengsk-min.png");
        background-repeat: no-repeat;
        height: 28.5px;
        width: 28.5px;
        background-size: cover;
    }

    .preload-nova {
        background-image: url("/_content/sc2dsstats.razorlib/images/nova-min.png");
        background-repeat: no-repeat;
        height: 28.5px;
        width: 28.5px;
        background-size: cover;
    }

    .preload-raynor {
        background-image: url("/_content/sc2dsstats.razorlib/images/raynor-min.png");
        background-repeat: no-repeat;
        height: 28.5px;
        width: 28.5px;
        background-size: cover;
    }

    .preload-stetmann {
        background-image: url("/_content/sc2dsstats.razorlib/images/stetmann-min.png");
        background-repeat: no-repeat;
        height: 28.5px;
        width: 28.5px;
        background-size: cover;
    }

    .preload-stukov {
        background-image: url("/_content/sc2dsstats.razorlib/images/stukov-min.png");
        background-repeat: no-repeat;
        height: 28.5px;
        width: 28.5px;
        background-size: cover;
    }

    .preload-swann {
        background-image: url("/_content/sc2dsstats.razorlib/images/swann-min.png");
        background-repeat: no-repeat;
        height: 28.5px;
        width: 28.5px;
        background-size: cover;
    }

    .preload-tychus {
        background-image: url("/_content/sc2dsstats.razorlib/images/tychus-min.png");
        background-repeat: no-repeat;
        height: 28.5px;
        width: 28.5px;
        background-size: cover;
    }

    .preload-vorazun {
        background-image: url("/_content/sc2dsstats.razorlib/images/vorazun-min.png");
        background-repeat: no-repeat;
        height: 28.5px;
        width: 28.5px;
        background-size: cover;
    }

    .preload-zagara {
        background-image: url("/_content/sc2dsstats.razorlib/images/zagara-min.png");
        background-repeat: no-repeat;
        height: 28.5px;
        width: 28.5px;
        background-size: cover;
    }

    .preload-zeratul {
        background-image: url("/_content/sc2dsstats.razorlib/images/zeratul-min.png");
        background-repeat: no-repeat;
        height: 28.5px;
        width: 28.5px;
        background-size: cover;
    }
</style>

<div class="@(replayDto != null || Interest != null ? "visually-hidden" : "")">
    <div>
        <CascadingValue Value="showReplays">
            <CmdrReplaysRequestComponent Request="Request" OnRequestChanged="RequestChanged" />
        </CascadingValue>
    </div>
    <div class="row">
        <div class="col-auto mt-2">
            <div class="d-flex">
                <div>
                    <h4>
                        Players who played
                        <span class="text-warning">@Request.Interest </span>
                        and their success
                        <span class="text-light" style="font-size: 1rem;"> (&sum; > @(Request.RatingType == RatingType.CmdrTE ? "1" : "9"))</span>
                    </h4>
                </div>
                <div>
                    <label class="form-label ms-2" style="max-width: 160px;">
                        <input type="text" class="form-control" placeholder="Search Name" value="@searchName" @oninput="SearchName" />
                    </label>
                </div>
                <div class="ms-1">
                    <span class="oi oi-x text-danger pointer" @onclick="ResetSearchName"></span>
                </div>
                <div class="ms-auto">
                    &Oslash;
                    <span class="@(avgGain < 0 ? "text-danger" : "text-success")">
                        @avgGain.ToString("N2", CultureInfo.InvariantCulture)
                    </span>
                </div>
            </div>
            <CmdrPlayerInfoComponent @ref="cmdrPlayerInfoComponent" CmdrPlayerInfos="playerInfos"
                                     OnPlayerDetailsRequest="PlayerDetailsRequest" OnPlayerReplaysRequest="PlayerReplaysRequest" />
        </div>
        <div class="col-auto mt-2">
            <div class="d-flex" style="max-width: 850px;">
                <div class="me-2">
                    @if (showReplays)
                    {
                        <button type="button" class="btn btn-sm btn-outline-warning" @onclick="e => ShowHideReplays(false)">
                            <span class="oi oi-caret-top"></span>
                            Hide
                        </button>
                    }
                    else
                    {
                        <button type="button" class="btn btn-sm btn-outline-warning" @onclick="e => ShowHideReplays(true)">
                            <span class="oi oi-caret-bottom"></span>
                            Show
                        </button>
                    }
                </div>
                <div>
                    @if (ReplaysInterest == null)
                    {
                        <h4>Replays with <span class="text-warning">@Request.Interest</span></h4>
                    }
                    else
                    {
                        <h4>
                            Replays with <span class="text-warning">@ReplaysInterest.Name</span> playing <span class="text-warning">@Request.Interest</span>
                        </h4>
                    }
                </div>
                <div class="ms-auto">
                    @if (showReplays)
                    {
                        <span>#@replaysCount</span>
                        <span class="oi oi-reload text-primary pointer ms-2" style="font-size: 1rem;"
                              @onclick="RequestChanged"></span>
                    }
                </div>
                @if (isLoading)
                {
                    <div class="spinner-border spinner-border-sm text-info ms-2" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                }
            </div>
            <div class="table-responsive tableFixHead">
                <table class="table table-dark table-hover w-auto">
                    <CascadingValue Value="Request.Orders">
                        <thead class="user-select-none">
                            <tr>
                                <th scope="col" class="pointer" @onclick="@(e => SortList(e, "GameTime"))">
                                    <SortArrow Property="GameTime">
                                        GameTime
                                    </SortArrow>
                                </th>
                                <th scope="col" class="pointer" @onclick="@(e => SortList(e, "Duration"))">
                                    <SortArrow Property="Duration">
                                        Duration
                                    </SortArrow>
                                </th>
                                <th scope="col" class="pointer" @onclick="@(e => SortList(e, "CommandersTeam1"))">
                                    <SortArrow Property="CommandersTeam1">
                                        Team1
                                    </SortArrow>
                                </th>
                                <th scope="col" class="pointer" @onclick="@(e => SortList(e, "CommandersTeam2"))">
                                    <SortArrow Property="CommandersTeam2">
                                        Team2
                                    </SortArrow>
                                </th>
                                @*                                    <th scope="col" class="pointer" @onclick="@(e => SortList(e, "WinnerTeam"))">
                                <SortArrow Property="WinnerTeam">
                                <span data-bs-toggle="tooltip" data-bs-placement="top"
                                data-bs-title="Winner Team">Win</span>
                                </SortArrow>
                                </th>*@
                                <th scope="col" class="text-warning pointer" style="z-index: 1;" @onclick="@(e => SortList(e, "ReplayRatingInfo.ExpectationToWin"))">
                                    <SortArrow Property="ReplayRatingInfo.ExpectationToWin">
                                        <span data-bs-toggle="tooltip"
                                              data-bs-placement="top" data-bs-title="WinnerTeam Expectation to Win">Exp2Win</span>
                                    </SortArrow>
                                </th>
                                <th scope="col" style="z-index: 1;">
                                    <span data-bs-toggle="tooltip" data-bs-placement="top"
                                          data-bs-title="Rating gained of the selected commander (average if there are multiple)">AvgGain</span>
                                </th>
@*                                <th scope="col" class="pointer" @onclick="@(e => SortList(e, "MaxLeaver"))">
                                    <SortArrow Property="MaxLeaver">
                                        <span data-bs-toggle="tooltip" data-bs-placement="top"
                                              data-bs-title="The maximum amount of time the game lasts with at least one Leaver">Leaver</span>
                                    </SortArrow>
                                </th>*@
                            </tr>
                        </thead>
                    </CascadingValue>
                    <tbody>
                        @if (showReplays && replaysCount > 0)
                        {
                            <Virtualize @ref="virtualizeComponent" Context="replay" ItemsProvider="LoadReplays"
                                    ItemSize="47">
                                <ItemContent>
                                    @{
                                        var cmdrAvgGain = GetAvgGain(replay);
                                    }
                                    <tr class="pointer @(lastVisitHash == replay.ReplayHash ? "table-primary" : "")"
                                    @onclick="e => ShowReplay(replay.ReplayHash)">
                                        <td>@replay.GameTime.ToString(@"yyyy-MM-dd")</td>
                                        <td>@TimeSpan.FromSeconds(replay.Duration).ToString(@"hh\:mm\:ss")</td>
                                        <td>
                                            <div class="d-flex @(replay.WinnerTeam == 1 ? "border border-success" : "border border-danger")">
                                                @foreach (var cmdr in replay.CommandersTeam1
                                                   .Split('|', StringSplitOptions.RemoveEmptyEntries)
                                                   .Select(s => int.Parse(s))
                                                   .Cast<Commander>()
                                                   .ToArray())
                                                {
                                                    <div class="preload-@(cmdr.ToString().ToLower()) @(cmdr == Request.Interest ? "border border-warning" : "")"
                                                    style="width: 28.5px; height: 28.5px;"></div>
                                                }
                                            </div>
                                        </td>
                                        <td>
                                            <div class="d-flex @(replay.WinnerTeam == 2 ? "border border-success" : "border border-danger")">
                                                @foreach (var cmdr in replay.CommandersTeam2
                                                   .Split('|', StringSplitOptions.RemoveEmptyEntries)
                                                   .Select(s => int.Parse(s))
                                                   .Cast<Commander>()
                                                   .ToArray())
                                                {
                                                    <div class="preload-@(cmdr.ToString().ToLower()) @(cmdr == Request.Interest ? "border border-warning" : "")"
                                                    style="width: 28.5px; height: 28.5px;"></div>
                                                }
                                            </div>
                                        </td>
                                        @*<td>@replay.WinnerTeam</td>*@
                                        <td class="@(replay.ReplayRatingInfo.ExpectationToWin >= 0.5f ? "text-success" : "text-danger")">
                                            @replay.ReplayRatingInfo.ExpectationToWin.ToString("P0",CultureInfo.InvariantCulture)
                                        </td>
                                        <td class="@(cmdrAvgGain >= 0 ? "text-success" : "text-danger")">
                                            <span class="@(cmdrAvgGain >= 0 ? "oi oi-arrow-top" : "oi oi-arrow-bottom")"></span>
                                            @cmdrAvgGain.ToString("N2",CultureInfo.InvariantCulture)
                                        </td>
                                        @*<td>@TimeSpan.FromSeconds(replay.Maxleaver).ToString(@"mm\:ss")</td>*@
                                    </tr>
                                </ItemContent>
                                <Placeholder>
                                    <tr height="47px">
                                        <td colspan="7">Loading ...</td>
                                    </tr>
                                </Placeholder>
                            </Virtualize>
                        }
                    </tbody>
                </table>
            </div>
        </div>

    </div>
    <div class="col-auto">
        <div class="ms-2 mt-2 p-2 bg-dark" style="max-width: 1000px;">
            <p>
                The <b>Strength</b> value is a measure of a players's overall effectiveness at playing <span class="text-warning">@Request.Interest</span>, calculated based on factors such as their win rate,
                average rating, and matchup frequency. It gives an indication of how well a player is performing with
                the commander, with higher values indicating greater strength.
            </p>
        </div>
    </div>
</div>

@if (replayDto != null)
{
    <sc2dsstats.razorlib.Replay.ReplayComponent @ref="replayComponent" replayDto="replayDto"
                                            OnCloseRequested="OnReplayClose" ReplaysRequest="ReplaysToonIdRequest" />
}

@if (Interest != null)
{
    <sc2dsstats.razorlib.PlayerDetailsNg.PlayerDetailsSummary RequestNames="Interest" OnCloseRequested="DetailsClose"
                                                          RatingType="Request.RatingType" ReplaysRequest="ReplaysToonIdRequest" />
}

@code {
    [Parameter, EditorRequired]
    public CmdrInfosRequest Request { get; set; } = default!;
    [Parameter]
    public EventCallback<CmdrInfosRequest> OnRequestChanged { get; set; }

    CancellationTokenSource cts = new();
    SemaphoreSlim ss = new(1, 1);

    bool isLoading = false;
    int replaysCount = 0;

    private Virtualize<ReplayCmdrListDto>? virtualizeComponent;

    ReplayDetailsDto? replayDto = null;
    Replay.ReplayComponent? replayComponent;
    string? lastVisitHash = null;

    List<CmdrPlayerInfo> playerInfos = new();
    double avgGain => !playerInfos.Any() ? 0 : Math.Round(playerInfos.Average(a => a.AvgGain), 2);

    private RequestNames? Interest;
    private RequestNames? ReplaysInterest;
    private string searchName = "";
    private bool showReplays;

    CmdrPlayerInfoComponent? cmdrPlayerInfoComponent;

    protected override async Task OnInitializedAsync()
    {
        // await SetCount(Request);
        await LoadPlayerInfos(Request);
        await base.OnInitializedAsync();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            jsRuntime.InvokeVoidAsync("enableTooltips");
        }
        base.OnAfterRender(firstRender);
    }

    private async Task LoadPlayerInfos(CmdrInfosRequest request)
    {
        playerInfos = await dataService.GetCmdrPlayerInfos(new(request), cts.Token);
        cmdrPlayerInfoComponent?.SetStrength(playerInfos, Request.PlayerId);
    }

    private void ShowHideReplays(bool show)
    {
        showReplays = show;
        if (showReplays)
        {
            RequestChanged();
        }
        else
        {
            InvokeAsync(() => StateHasChanged());
        }
    }

    private async Task SetCount(CmdrInfosRequest request)
    {
        replaysCount = await dataService.GetCmdrReplaysCount(request, cts.Token);
    }

    private async ValueTask<ItemsProviderResult<ReplayCmdrListDto>> LoadReplays(ItemsProviderRequest prRequest)
    {
        Request.Skip = prRequest.StartIndex;
        Request.Take = Math.Min(prRequest.Count, replaysCount - prRequest.StartIndex);

        var replays = await dataService.GetCmdrReplays(Request, prRequest.CancellationToken);

        return new ItemsProviderResult<ReplayCmdrListDto>(replays ?? new List<ReplayCmdrListDto>(), replaysCount);
    }


    public async void RequestChanged()
    {
        await ss.WaitAsync();
        lastVisitHash = null;

        if (Request.PlayerId?.ToonId == 0)
        {
            ReplaysInterest = null;
        }

        try
        {
            isLoading = true;
            await InvokeAsync(() => StateHasChanged());
            await LoadPlayerInfos(Request);
            if (showReplays)
            {
                await SetCount(Request);
                if (virtualizeComponent != null)
                {
                    await InvokeAsync(async () =>
                    {
                        await virtualizeComponent.RefreshDataAsync();
                        StateHasChanged();
                    });
                }
            }
            isLoading = false;
            await InvokeAsync(() => StateHasChanged());
            await jsRuntime.InvokeVoidAsync("enableTooltips");
            await OnRequestChanged.InvokeAsync(Request);
        }
        finally
        {
            ss.Release();
        }
    }

    private void SortList(MouseEventArgs e, string property)
    {
        var exOrder = Request.Orders.FirstOrDefault(f => f.Property == property);
        if (e.ShiftKey)
        {
            if (exOrder == null)
            {
                Request.Orders.Add(new TableOrder()
                    {
                        Property = property
                    });
            }
            else
            {
                exOrder.Ascending = !exOrder.Ascending;
            }
        }
        else
        {
            Request.Orders.Clear();
            Request.Orders.Add(new TableOrder()
                {
                    Property = property,
                    Ascending = exOrder == null ? false : !exOrder.Ascending
                });
        }
        RequestChanged();
    }

    private float GetAvgGain(ReplayCmdrListDto replay)
    {
        if (Request.Interest != Commander.None)
        {
            var cmdrs1 = replay.CommandersTeam1
            .Split('|', StringSplitOptions.RemoveEmptyEntries)
            .Select(s => int.Parse(s))
            .Cast<Commander>()
            .ToList();
            var cmdrs2 = replay.CommandersTeam2
            .Split('|', StringSplitOptions.RemoveEmptyEntries)
            .Select(s => int.Parse(s))
            .Cast<Commander>()
            .ToList();
            cmdrs1.AddRange(cmdrs2);
            var poss = Enumerable.Range(0, cmdrs1.Count)
            .Where(i => cmdrs1[i] == Request.Interest)
            .ToList();

            return replay.ReplayRatingInfo.RepPlayerRatings
            .Where(x => poss.Contains(x.GamePos - 1))
            .Select(s => s.RatingChange)
            .DefaultIfEmpty()
            .Average();
        }
        return 0;
    }

    public void SearchName(ChangeEventArgs e)
    {
        searchName = e.Value?.ToString() ?? "";
        cmdrPlayerInfoComponent?.SetSearch(searchName);

    }

    private void ResetSearchName()
    {
        searchName = string.Empty;
        cmdrPlayerInfoComponent?.SetSearch(searchName);
    }

    public void PlayerDetailsRequest(RequestNames requestNames)
    {
        Interest = requestNames;
        InvokeAsync(() => StateHasChanged());
    }

    public void PlayerReplaysRequest(RequestNames requestNames)
    {
        if (!showReplays)
        {
            showReplays = true;
        }
        ReplaysInterest = requestNames;
        Request.PlayerId = new(ReplaysInterest.ToonId, ReplaysInterest.RealmId, ReplaysInterest.RegionId);
        RequestChanged();
    }

    public void DetailsClose()
    {
        Interest = null;
        InvokeAsync(() => StateHasChanged());
    }

    public async Task ShowReplay(string replayHash)
    {
        isLoading = true;
        await InvokeAsync(() => StateHasChanged());
        await OnRequestChanged.InvokeAsync(Request);

        replayDto = await dataService.GetDetailReplay(replayHash);
        lastVisitHash = replayDto?.ReplayHash;
        if (replayDto != null)
        {
            replayComponent?.Init(replayDto);
        }
        isLoading = false;
        await InvokeAsync(() => StateHasChanged());
    }

    private async void OnReplayClose()
    {
        replayDto = null;
        await InvokeAsync(() => StateHasChanged());
    }

    private void ReplaysToonIdRequest(Services.ReplaysToonIdRequest request)
    {
        NavigationManager.NavigateTo(
        NavigationManager.GetUriWithQueryParameters("replays",
        new Dictionary<string, object?>()
                    {
{ "Players", request.Name },
{ "ToonId", request.ToonId },
{ "ToonIdWith", request.ToonIdWith == 0 ? null : request.ToonIdWith },
{ "ToonIdVs", request.ToonIdVs == 0 ? null : request.ToonIdVs },
{ "ToonIdName", request.ToonIdName },
                    }
        )
        );
    }

    public void Dispose()
    {
        cts.Cancel();
        cts.Dispose();
        ss.Dispose();
    }
}