@using System.Globalization;
@using pax.dsstats.shared;
@using sc2dsstats.razorlib.Extensions;
@using sc2dsstats.razorlib.Services;

<style>
    .tableFixHead {
        overflow-y: auto;
        overflow-x: auto;
    }

        .tableFixHead thead th {
            position: sticky;
            top: 0;
        }

    table {
        border-collapse: collapse;
        width: 100%;
    }

    th, td {
        padding: 8px 16px;
        white-space: nowrap;
    }

    th {
        background: purple;
    }

    .tablebackground {
        position: absolute;
        z-index: -1;
        opacity: 0.15;
    }
</style>

<div class="tableFixHead, table-responsive">
    <table class="table table-dark table-hover table-striped">
        <thead style="user-select: none;">
            <tr>
                <CascadingValue Value="tableOrders">
                    <th><span class="oi oi-bar-chart" aria-hidden="true"></span></th>
                    <th class="pointer" @onclick="@(e => SetOrder(nameof(DurTableData.Commander)))">
                        <SortArrow Property="@nameof(DurTableData.Commander)">
                            Commander
                        </SortArrow>
                    </th>
                    <th class="pointer" @onclick="@(e => SetOrder(nameof(DurTableData.Dur1)))">
                        <SortArrow Property="@nameof(DurTableData.Dur1)">
                            5-8 min
                        </SortArrow>
                    </th>
                    <th class="pointer" @onclick="@(e => SetOrder(nameof(DurTableData.Dur2)))">
                        <SortArrow Property="@nameof(DurTableData.Dur2)">
                            8-11 min
                        </SortArrow>
                    </th>
                    <th class="pointer" @onclick="@(e => SetOrder(nameof(DurTableData.Dur3)))">
                        <SortArrow Property="@nameof(DurTableData.Dur3)">
                            11-14 min
                        </SortArrow>
                    </th>
                    <th class="pointer" @onclick="@(e => SetOrder(nameof(DurTableData.Dur4)))">
                        <SortArrow Property="@nameof(DurTableData.Dur4)">
                            14-17 min
                        </SortArrow>
                    </th>
                    <th class="pointer" @onclick="@(e => SetOrder(nameof(DurTableData.Dur5)))">
                        <SortArrow Property="@nameof(DurTableData.Dur5)">
                            17-20 min
                        </SortArrow>
                    </th>
                    <th class="pointer" @onclick="@(e => SetOrder(nameof(DurTableData.Dur6)))">
                        <SortArrow Property="@nameof(DurTableData.Dur6)">
                            20-23 min
                        </SortArrow>
                    </th>
                    <th class="pointer" @onclick="@(e => SetOrder(nameof(DurTableData.Dur7)))">
                        <SortArrow Property="@nameof(DurTableData.Dur7)">
                            23-26 min
                        </SortArrow>
                    </th>
                    <th class="pointer" @onclick="@(e => SetOrder(nameof(DurTableData.Dur8)))">
                        <SortArrow Property="@nameof(DurTableData.Dur8)">
                            26-29 min
                        </SortArrow>
                    </th>
                    <th class="pointer" @onclick="@(e => SetOrder(nameof(DurTableData.Dur9)))">
                        <SortArrow Property="@nameof(DurTableData.Dur9)">
                            29-32 min
                        </SortArrow>
                    </th>
                    <th class="pointer" @onclick="@(e => SetOrder(nameof(DurTableData.Dur10)))">
                        <SortArrow Property="@nameof(DurTableData.Dur10)">
                            32+ min
                        </SortArrow>
                    </th>
                </CascadingValue>
            </tr>
            <tr class="table-primary">
                <th></th>
                <th>Matchups</th>
                <th>@GetDurPercentage(1)</th>
                <th>@GetDurPercentage(2)</th>
                <th>@GetDurPercentage(3)</th>
                <th>@GetDurPercentage(4)</th>
                <th>@GetDurPercentage(5)</th>
                <th>@GetDurPercentage(6)</th>
                <th>@GetDurPercentage(7)</th>
                <th>@GetDurPercentage(8)</th>
                <th>@GetDurPercentage(9)</th>
                <th>@GetDurPercentage(10)</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var durData in tableDatasSorted)
            {
                <tr class="pointer" @onclick:stopPropagation @onclick="e => LineChartRequest(durData)">
                    <td>
                        <div class="form-check">
                            <input type="checkbox" checked="@durData.Chart" class="form-check-input" @onclick:stopPropagation @onchange="e => ChartRequest(e, durData.Commander)" />
                        </div>
                    </td>
                    <td>
                        <img src="@HelperService.GetImageSrc(durData.Commander)"
                             alt="@durData.Commander"
                             title="@durData.Commander"
                             width="30"
                             height="30" />
                        @durData.Commander
                    </td>
                    <td style="color: @GetColumnColor(1, durData.Commander);">@durData.Dur1</td>
                    <td style="color: @GetColumnColor(2, durData.Commander);">@durData.Dur2</td>
                    <td style="color: @GetColumnColor(3, durData.Commander);">@durData.Dur3</td>
                    <td style="color: @GetColumnColor(4, durData.Commander);">@durData.Dur4</td>
                    <td style="color: @GetColumnColor(5, durData.Commander);">@durData.Dur5</td>
                    <td style="color: @GetColumnColor(6, durData.Commander);">@durData.Dur6</td>
                    <td style="color: @GetColumnColor(7, durData.Commander);">@durData.Dur7</td>
                    <td style="color: @GetColumnColor(8, durData.Commander);">@durData.Dur8</td>
                    <td style="color: @GetColumnColor(9, durData.Commander);">@durData.Dur9</td>
                    <td style="color: @GetColumnColor(10, durData.Commander);">@durData.Dur10</td>
                </tr>
            }
        </tbody>
    </table>
</div>


@code {
    [Parameter, EditorRequired]
    public DurationResponse Response { get; set; } = default!;

    [Parameter]
    public EventCallback<KeyValuePair<Commander, bool>> OnChartRequest { get; set; }

    TableOrder tableOrder = new()
        {
            Property = nameof(DurTableData.Commander),
            Ascending = true
        };
    List<TableOrder> tableOrders = new();

    List<DurTableData> tableDatas = new();
    List<DurTableData> tableDatasSorted => tableOrder.Ascending ?
        tableDatas.AsQueryable().AppendOrderBy(tableOrder.Property).ToList()
        : tableDatas.AsQueryable().AppendOrderByDescending(tableOrder.Property).ToList();

    List<DurInfo> durInfos = new();
    private bool shouldRender = true;

    protected override bool ShouldRender() => shouldRender;

    protected override void OnInitialized()
    {
        tableOrders.Add(tableOrder);
        PrepareData(Response, RatingType.Cmdr);
        base.OnInitialized();
    }

    private void ChartRequest(ChangeEventArgs e, Commander cmdr)
    {
        if (e.Value is bool value)
        {
            OnChartRequest.InvokeAsync(new(cmdr, value));
        }
    }

    private void LineChartRequest(DurTableData data)
    {
        data.Chart = !data.Chart;
        OnChartRequest.InvokeAsync(new(data.Commander, data.Chart));
    }

    private static string GetDRangeLabel(int drange)
    {
        return drange switch
        {
            1 => "5 - 8",
            2 => "8 - 11",
            3 => "11 - 14",
            4 => "14 - 17",
            5 => "17 - 20",
            6 => "20 - 23",
            7 => "23 - 26",
            8 => "26 - 29",
            9 => "29 - 32",
            _ => "32+"
        };
    }

    public void ClearChart()
    {
        tableDatas.ForEach(f => f.Chart = false);
    }

    public void SetChart()
    {
        tableDatas.ForEach(f => f.Chart = true);
    }

    public void PrepareData(DurationResponse response, RatingType ratingType)
    {
        shouldRender = false;
        var commanders = ratingType == RatingType.Std ?
              new List<Commander>() { Commander.Protoss, Commander.Terran, Commander.Zerg }
            : Data.GetCommanders(Data.CmdrGet.NoStd);

        tableDatas.Clear();

        foreach (var commander in commanders)
        {
            DurTableData data = new() { Commander = commander, Chart = true };

            var cmdrData = response.ChartDatas.FirstOrDefault(f => f.Commander == commander);

            if (cmdrData == null || cmdrData.Counts.Count != cmdrData.Data.Count || cmdrData.Counts.Count > 10)
            {
                continue;
            }

            for (int i = 0; i < cmdrData.Counts.Count; i++)
            {
                var prop = data.GetType().GetProperty($"Dur{i+1}");
                if (prop != null)
                {
                    // prop.SetValue(data, $"{cmdrData.Data[i].ToString("N2", CultureInfo.InvariantCulture)} ({cmdrData.Counts[i]})");
                    prop.SetValue(data, $"{cmdrData.Data[i].ToString("N2", CultureInfo.InvariantCulture)}%");
                }
            }

            tableDatas.Add(data);
        }
        SetInfos(response, commanders);

        shouldRender = true;
        InvokeAsync(() => StateHasChanged());
    }

    private void SetInfos(DurationResponse response, List<Commander> cmdrs)
    {
        durInfos.Clear();
        if (response.ChartDatas.Count < 6 || response.ChartDatas.Any(a => a.Data.Count != 10))
        {
            return;
        }

        int total = response.ChartDatas.Sum(s => s.Counts.Sum());

        for (int i = 0; i < 10; i++)
        {
            var sum = response.ChartDatas.Sum(s => s.Counts[i]);
            var orderedData = response.ChartDatas.OrderByDescending(o => o.Data[i]).ToList();
            durInfos.Add(new()
            {
                Percentage = (sum * 100.0 / total).ToString("N2", CultureInfo.InvariantCulture),
                Total = sum,
                TopCmdr = orderedData[0].Commander,
                Top2Cmdr = orderedData[1].Commander,
                Top3Cmdr = orderedData[2].Commander,
                BottomCmdr = orderedData[orderedData.Count - 1].Commander,
                Bottom2Cmdr = orderedData[orderedData.Count - 2].Commander,
                Bottom3Cmdr = orderedData[orderedData.Count - 3].Commander,
            });
        }
    }

    private void SetOrder(string propertyName)
    {
        if (tableOrder.Property == propertyName)
        {
            tableOrder.Ascending = !tableOrder.Ascending;
        }
        else
        {
            tableOrder.Property = propertyName;
            tableOrder.Ascending = true;
        }
        StateHasChanged();
    }

    private string GetColumnColor(int dur, Commander cmdr)
    {
        int index = dur - 1;
        if (durInfos.Count < index)
        {
            return "";
        }

        var durInfo = durInfos[index];

        if (durInfo.TopCmdr == cmdr)
        {
            return "#69D867";
        }

        if (durInfo.Top2Cmdr == cmdr)
        {
            return "#51A750";
        }

        if (durInfo.Top3Cmdr == cmdr)
        {
            return "#4E974D";
        }

        if (durInfo.BottomCmdr == cmdr)
        {
            return "#E91626";
        }

        if (durInfo.Bottom2Cmdr == cmdr)
        {
            return "#C2101D";
        }

        if (durInfo.Bottom3Cmdr == cmdr)
        {
            return "#9C0D17";
        }

        return "";
    }

    private string GetDurPercentage(int dur)
    {
        int index = dur - 1;
        if (durInfos.Count == 0 || durInfos.Count < index)
        {
            return "";
        }
        else
        {
            var durInfo = durInfos[index];
            return $"{HelperService.GetBigNumberString(durInfo.Total)} ({durInfo.Percentage}%)";
        }
    }

    private record DurTableData
    {
        public bool Chart { get; set; }
        public Commander Commander { get; set; }
        public string Dur1 { get; set; } = string.Empty;
        public string Dur2 { get; set; } = string.Empty;
        public string Dur3 { get; set; } = string.Empty;
        public string Dur4 { get; set; } = string.Empty;
        public string Dur5 { get; set; } = string.Empty;
        public string Dur6 { get; set; } = string.Empty;
        public string Dur7 { get; set; } = string.Empty;
        public string Dur8 { get; set; } = string.Empty;
        public string Dur9 { get; set; } = string.Empty;
        public string Dur10 { get; set; } = string.Empty;
    }

    private record DurInfo
    {
        public string Percentage { get; set; } = "0%";
        public int Total { get; set; }
        public Commander TopCmdr { get; set; }
        public Commander Top2Cmdr { get; set; }
        public Commander Top3Cmdr { get; set; }
        public Commander BottomCmdr { get; set;  }
        public Commander Bottom2Cmdr { get; set;  }
        public Commander Bottom3Cmdr { get; set; }
    }
}
