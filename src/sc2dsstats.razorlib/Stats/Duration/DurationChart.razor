@using Microsoft.JSInterop;
@using pax.BlazorChartJs;
@using pax.dsstats.shared;
@inject IJSRuntime JSRuntime

<ChartComponent @ref="chartComponent" ChartJsConfig="chartConfig" OnEventTriggered="ChartEventTriggered"></ChartComponent>

@code {
    [CascadingParameter]
    public DurationRequest Request { get; set; } = null!;

    [Parameter, EditorRequired]
    public DurationResponse Response { get; set; } = default!;

    ChartJsConfig chartConfig = null!;
    ChartComponent? chartComponent;
    bool chartReady;

    protected override void OnInitialized()
    {
        chartConfig = GetChartConfig();
        base.OnInitialized();
    }

    private void ChartEventTriggered(ChartJsEvent chartEvent)
    {
        if (chartEvent is ChartJsInitEvent initEvent)
        {
            chartReady = true;
            SetupChart(Response, Request.RatingType);
        }
    }

    public void SetupChart(DurationResponse response, RatingType ratingType)
    {
        if (!chartReady)
        {
            return;
        }

        Response = response;

        if (chartConfig.Data.Datasets.Any())
        {
            chartConfig.RemoveDatasets(chartConfig.Data.Datasets);
        }

        if (chartConfig.Options?.Plugins?.Title != null)
        {
            chartConfig.Options.Plugins.Title.Text = new IndexableOption<string>($"Duration - {Data.GetTimePeriodLongName(Request.TimePeriod)}");
            chartConfig.UpdateChartOptions();
            JSRuntime.InvokeVoidAsync("setChartLegendFilter", chartConfig.ChartJsConfigGuid);
        }

        SetLabels();
        List<ChartJsDataset> datasets = new();

        var commanders = ratingType == RatingType.Std ?
            Data.GetCommanders(Data.CmdrGet.Std)
            : Data.GetCommanders(Data.CmdrGet.NoStd);

        foreach (var cmdr in commanders)
        {
            datasets.Add(GetLineDataset(response, cmdr));
            datasets.Add(GetPointDataset(response, cmdr));
        }

        chartConfig.AddDatasets(datasets);
    }

    private void SetLabels()
    {
        chartConfig.SetLabels(new List<string>() 
            { 
                "5 - 8",
                "8 - 11",
                "11 - 14",
                "14 - 17",
                "17 - 20",
                "20 - 23",
                "23 - 26",
                "26 - 29",
                "29 - 32",
                "32+"
            });
    }

    public void AddDataset(Commander commander)
    {
        chartConfig.AddDataset(GetLineDataset(Response, commander));
        chartConfig.AddDataset(GetPointDataset(Response, commander));
    }

    public void RemoveDataset(Commander commander)
    {
        var datasets = chartConfig.Data.Datasets
            .Cast<LineDataset>()
            .Where(x => x.Label == commander.ToString());

        if (!datasets.Any())
        {
            return;
        }

        chartConfig.RemoveDatasets(datasets.Cast<ChartJsDataset>().ToList());
    }

    public void ClearDatasets()
    {
        if (chartConfig.Data.Datasets.Any())
        {
            chartConfig.RemoveDatasets(chartConfig.Data.Datasets);
        }
    }

    private ChartJsDataset GetLineDataset(DurationResponse response, Commander commander)
    {
        var chartData = response.ChartDatas.FirstOrDefault(x => x.Commander == commander);

        return new LineDataset()
            {
                Label = commander.ToString(),
                Data = chartData == null ? new List<object>() : chartData.NiceData.Cast<object>().ToList(),
                BorderColor = Data.GetBackgroundColor(commander, "90"),
                BorderWidth = 2,
                PointRadius = new IndexableOption<double>(3),
                Tension = 0.4,
            };
    }

    private ChartJsDataset GetPointDataset(DurationResponse response, Commander commander)
    {
        var chartData = response.ChartDatas.FirstOrDefault(x => x.Commander == commander);

        return new LineDataset()
            {
                Label = commander.ToString(),
                Data = chartData == null ? new List<object>() : chartData.Data.Cast<object>().ToList(),
                BorderWidth = 0,
                PointRadius = new IndexableOption<double>(2),
                PointBackgroundColor = new IndexableOption<string>(Data.GetBackgroundColor(commander, "90"))
            };
    }

    private ChartJsConfig GetChartConfig()
    {
        string mainColor = "#3F5FFA";

        return new ChartJsConfig()
            {
                Type = ChartType.line,
                Options = new ChartJsOptions()
                {
                    Responsive = true,
                    MaintainAspectRatio = true,
                    Plugins = new Plugins()
                    {
                        Title = new Title()
                        {
                            Display = true,
                            Text = new IndexableOption<string>("Duration"),
                            Color = "#CED0DD",
                            Font = new()
                            {
                                Size = 16,
                            }
                        },
                        Legend = new Legend()
                        {
                            Display = true,
                            Position = "right",
                            Labels = new Labels()
                            {
                                Color = "#CED0DD",
                            }
                        }
                    },
                    Scales = new ChartJsOptionsScales()
                    {
                        X = new LinearAxis()
                        {
                            Title = new()
                            {
                                Display = true,
                                Text = new IndexableOption<string>("Game duration in minutes"),
                                Color = mainColor
                            },
                            Ticks = new LinearAxisTick()
                            {
                                Display = true,
                                Color = mainColor,
                            },
                            Grid = new ChartJsGrid()
                            {
                                Display = true,
                                Color = "rgba(113, 116, 143, 0.25)",
                                TickColor = "rgba(113, 116, 143, 0.75)"
                            },
                            Border = new ChartJsAxisBorder()
                            {
                                Display = true,
                                Color = "rgba(113, 116, 143)",
                                Dash = new List<double>() { 2, 4 }
                            }
                        },
                        Y = new LinearAxis()
                        {
                            Title = new()
                            {
                                Display = true,
                                Text = new IndexableOption<string>("Winrate"),
                                Color = mainColor,
                            },
                            Ticks = new LinearAxisTick()
                            {
                                Display = true,
                                Color = mainColor,
                            },
                            Grid = new ChartJsGrid()
                            {
                                Display = true,
                                Color = "rgba(113, 116, 143, 0.25)",
                                TickColor = "rgba(113, 116, 143, 0.75)"
                            },
                            Border = new ChartJsAxisBorder()
                            {
                                Display = true,
                                Color = "rgba(113, 116, 143)",
                                Dash = new List<double>() { 2, 4 }
                            }
                        }
                    }
            },
        };
    }
}