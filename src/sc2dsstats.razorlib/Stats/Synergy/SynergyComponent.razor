@using pax.dsstats.shared;
@using pax.dsstats.shared.Interfaces;
@inject ISynergyService synergyService
@implements IDisposable

<div>
    <CascadingValue Value="Request">
        <CascadingValue Value="CmdrSelects">
            <SynergyRequestComponent OnRequestChanged="LoadData" OnCmdrSelected="CmdrSelected"></SynergyRequestComponent>
        </CascadingValue>
    </CascadingValue>
</div>

<div class="row">
    <div class="col-auto">
        <div class="d-none d-xl-block">
            <CascadingValue Value="CmdrSelects">
                <CmdrCheckSelectComponent OnCommanderSelected="CmdrSelected"></CmdrCheckSelectComponent>
            </CascadingValue>
        </div>
    </div>
    <div class="col-auto">
        @if (response != null)
        {
            <div class="border rounded border-secondary"
                 style="min-width: 850px; width: 55vw; height: calc(55vw * 0.5); min-height: 425px;">
                <SynergyChart @ref="synergyChart" Request="Request" Response="response"></SynergyChart>
            </div>
        }
    </div>
</div>

@code {
    [Parameter, EditorRequired]
    public SynergyRequest Request { get; set; } = default!;

    [Parameter]
    public EventCallback<SynergyRequest> OnRequestChanged { get; set; }

    bool isLoading;
    CancellationTokenSource cts = new();

    SynergyResponse? response = null;
    SynergyChart? synergyChart;

    Dictionary<Commander, bool> CmdrSelects = Data.GetCommanders(Data.CmdrGet.All).ToDictionary(k => k, v => false);

    protected override void OnInitialized()
    {
        _ = LoadData();
        base.OnInitialized();
    }

    private async Task LoadData()
    {
        isLoading = true;
        await InvokeAsync(() => StateHasChanged());
        response = await synergyService.GetSynergy(Request, cts.Token);

        synergyChart?.PrepareData(Request, response, CmdrSelects);

        isLoading = false;
        await InvokeAsync(() => StateHasChanged());
        await OnRequestChanged.InvokeAsync(Request);
    }

    private void CmdrSelected()
    {
        synergyChart?.AddRemoveDatasets(CmdrSelects);
    }

    public void Dispose()
    {
        cts.Cancel();
        cts.Dispose();
    }
}
