@using Blazored.Toast.Services;
@using Microsoft.AspNetCore.Components.Forms;
@using Microsoft.Extensions.Logging
@using Microsoft.JSInterop;
@using pax.dsstats.shared;
@using sc2dsstats.razorlib.Builds;
@inject IDataService dataService
@inject IJSRuntime IJSRuntime
@inject IToastService toastService
@implements IDisposable

<EditForm EditContext="editContext">
    <div class="row">
        <div class="col-auto">
            <label class="form-label">
                StatsMode
                <InputSelect class="form-select" @bind-Value="StatsRequest.StatsMode">
                    @foreach (StatsMode statsMode in Enum.GetValues(typeof(StatsMode)))
                    {
                        @if ((int)statsMode > 0)
                        {
                            <option value="@statsMode">@statsMode</option>
                        }
                    }
                </InputSelect>
            </label>
        </div>
        <div class="col-auto">
            <label class="form-label">
                Time Period
                <InputSelect class="form-select" @bind-Value="StatsRequest.TimePeriod">
                    @foreach (TimePeriod time in Data.GetTimePeriods(Data.TimePeriodGet.NoNone))
                    {
                        <option value="@time">@Data.GetTimePeriodLongName(time)</option>
                    }
                </InputSelect>
            </label>
        </div>

        @if (StatsRequest.StatsMode == StatsMode.Synergy || StatsRequest.StatsMode == StatsMode.Timeline || StatsRequest.StatsMode == StatsMode.Duration)
        {
            <div class="col-auto">
                <label class="form-label">
                    Commanders
                    <select id="addremovecmdr" class="form-select" multiple aria-label="multiple" @onchange="AddRemoveCmdr">
                        @foreach (Commander cmdr in Data.GetCommanders(Data.CmdrGet.NoNone))
                        {
                            <option value="@cmdr.ToString()">@cmdr</option>
                        }
                    </select>
                </label>
            </div>
        }
        else
        {
            <div class="col-auto">
                <label class="form-label">
                    Commander
                    <InputSelect class="form-select" @bind-Value="StatsRequest.Interest">
                        <option value="@Commander.None">All</option>
                        @foreach (Commander cmdr in Data.GetCommanders(Data.CmdrGet.NoNone))
                        {
                            <option value="@cmdr">@cmdr</option>
                        }
                    </InputSelect>
                </label>
            </div>
        }
        <div class="col-auto">
            <div>
                <label for="gamemodeselect" class="form-label">
                    GameModes
                </label>
            </div>
            <div>
                <select id="gamemodeselect" class="selectpicker" multiple aria-label="multiple" @onchange="GameModeChange">
                    <option>All GameModes</option>
                    <option value="@GameMode.Commanders">@GameMode.Commanders</option>
                    <option value="@GameMode.CommandersHeroic">@GameMode.CommandersHeroic</option>
                    <option value="@GameMode.Standard">@GameMode.Standard</option>
                    <option value="@GameMode.BrawlCommanders">@GameMode.BrawlCommanders</option>
                    <option value="@GameMode.Switch">@GameMode.Switch</option>
                    <option value="@GameMode.Gear">@GameMode.Gear</option>
                    <option value="@GameMode.Sabotage">@GameMode.Sabotage</option>
                    <option value="@GameMode.Tutorial">@GameMode.Tutorial</option>
                </select>
            </div>
        </div>
        <div class="col-auto">
            <div class="form-check form-switch">
                <label class="form-check-label">
                    @(!Data.IsMaui || dataService.GetFromServer() ? "Uploaders" : "Players")
                    <InputCheckbox class="form-check-input" @bind-Value="StatsRequest.Uploaders">
                    </InputCheckbox>
                </label>
            </div>
            <div class="form-check form-switch">
                <label class="form-check-label">
                    DefaultFilter
                    <InputCheckbox class="form-check-input" @bind-Value="StatsRequest.DefaultFilter">
                    </InputCheckbox>
                </label>
            </div>
            <div class="form-check form-switch">
                <label class="form-check-label">
                    Chart BeginAtZero
                    <InputCheckbox class="form-check-input" @bind-Value="StatsRequest.BeginAtZero">
                    </InputCheckbox>
                </label>
            </div>
            @if (StatsRequest.StatsMode == StatsMode.Winrate || StatsRequest.StatsMode == StatsMode.Mvp)
            {
                <div class="d-flex">
                    <div class="form-check form-switch">
                        <label class="form-check-label">
                            TE Maps only
                            <InputCheckbox class="form-check-input" @bind-Value="StatsRequest.TeMaps">
                            </InputCheckbox>
                        </label>
                    </div>
                    <div class="ms-2">
                        <span class="oi oi-info pointer" onclick="window.location.href='https://github.com/ipax77/dsstats/wiki#te-map'"></span>
                    </div>
                </div>
            }
            @if (Data.IsMaui)
            {
                <div class="form-check form-switch align-self-center">
                    <label class="form-check-label">
                        Online Stats
                        <input type="checkbox" class="form-check-input" @onchange="FromServerChange">
                        </input>
                    </label>
                </div>
            }
        </div>
        @if (withPlayers)
        {
            <div class="col-auto">
                <div class="d-flex">
                    <div class="form-group" style="max-width: 250px;">
                        <select id="playerselect" class="selectpicker" multiple aria-label="playerselect" @onchange="PlayersSelected">
                            <option value="All" selected>All Players</option>
                            @foreach (var player in requestNames)
                            {
                                <option value="@player.ToonId">@player.Name (@Data.GetRegionString(player.RegionId))</option>
                            }
                        </select>
                    </div>
                    <div class="align-items-center">
                        <div class="btn-group-vertical ms-2">
                            <button type="button" class="btn btn-sm btn-outline-light" @onclick="e => playerSelectModal?.Show()">Add Player</button>
                            <button type="button" class="btn btn-sm btn-outline-light" @onclick="e => playerDeselectModal?.Show()">Remove Player</button>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</EditForm>

<PlayerSelectModal @ref="playerSelectModal" OnPlayerSelected="AddPlayer"></PlayerSelectModal>
<PlayerDeselectModal @ref="playerDeselectModal" OnPlayerDeSelected="RemovePlayer" RequestNames="requestNames"></PlayerDeselectModal>

@code {
    [CascadingParameter]
    [EditorRequired]
    public StatsRequest StatsRequest { get; set; } = default!;

    [Parameter]
    public EventCallback OnRequestChanged { get; set; }

    [Parameter]
    public EventCallback OnChartOptionsChanged { get; set; }

    [Parameter]
    public EventCallback<List<Commander>> OnAddRemoveCmdrsChanged { get; set; }

    [Parameter]
    public List<RequestNames> DefaultPlayers { get; set; } = new();

    private bool withPlayers => DefaultPlayers.Any()
        && StatsRequest.Uploaders
        && (StatsRequest.StatsMode == StatsMode.Winrate || StatsRequest.StatsMode == StatsMode.Mvp);

    private PlayerSelectModal? playerSelectModal;
    private PlayerDeselectModal? playerDeselectModal;
    private List<RequestNames> requestNames = new();

    EditContext editContext = null!;

    protected override void OnInitialized()
    {
        editContext = new EditContext(StatsRequest);
        editContext.OnFieldChanged += FieldChanged;
        requestNames = new(DefaultPlayers);
        base.OnInitialized();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            IJSRuntime.InvokeVoidAsync("setMultiSelect", "gamemodeselect", StatsRequest.GameModes.Select(s => s.ToString()).ToArray());
        }
        base.OnAfterRender(firstRender);
    }

    private void FieldChanged(object? sender, FieldChangedEventArgs e)
    {
        if (e.FieldIdentifier.FieldName == nameof(StatsRequest.TimePeriod))
        {
            if (IsMultiselect(StatsRequest.StatsMode))
            {
                SetMultiSelect(StatsRequest.Interest);
            }
        }
        else if (e.FieldIdentifier.FieldName == nameof(StatsRequest.Uploaders))
        {
            if (!StatsRequest.Uploaders && StatsRequest.PlayerNames.Any())
            {
                StatsRequest.PlayerNames.Clear();
                IJSRuntime.InvokeVoidAsync("setMultiSelect", "playerselect", new string[] { "All" });
            }
            if (IsMultiselect(StatsRequest.StatsMode))
            {
                SetMultiSelect(StatsRequest.Interest);
            }
        }
        else if (e.FieldIdentifier.FieldName == nameof(StatsRequest.BeginAtZero))
        {
            OnChartOptionsChanged.InvokeAsync();
            return;
        }
        else if (e.FieldIdentifier.FieldName == nameof(StatsRequest.StatsMode))
        {
            if (!(StatsRequest.StatsMode == StatsMode.Winrate || StatsRequest.StatsMode == StatsMode.Mvp))
            {
                StatsRequest.TeMaps = false;
            }

            if (IsMultiselect(StatsRequest.StatsMode))
            {
                if (StatsRequest.Interest == Commander.None)
                {
                    StatsRequest.Interest = Commander.Abathur;
                    SetMultiSelect(Commander.Abathur);
                }
                else
                {
                    SetMultiSelect(StatsRequest.Interest);
                }
            }
            else
            {
                ClearMultiSelect();
            }
        }
        else if (e.FieldIdentifier.FieldName == nameof(StatsRequest.Interest))
        {
            IJSRuntime.InvokeVoidAsync("setMultiSelect", "addremovecmdr", Array.Empty<string>());
            StatsRequest.AddRemoveCommanders.Clear();
        }
        OnRequestChanged.InvokeAsync();
    }

    private void FromServerChange(ChangeEventArgs e)
    {
        if (e.Value is bool value)
        {
            dataService.SetFromServer(value);
            StatsRequest.Uploaders = !value;
            OnRequestChanged.InvokeAsync();
        }
    }

    private bool IsMultiselect(StatsMode statsMode)
    {
        return statsMode == StatsMode.Synergy || statsMode == StatsMode.Timeline || statsMode == StatsMode.Duration;
    }

    private void ClearMultiSelect()
    {
        IJSRuntime.InvokeVoidAsync("setMultiSelect", "addremovecmdr", Array.Empty<string>());
        StatsRequest.AddRemoveCommanders.Clear();
    }

    private void SetMultiSelect(Commander cmdr)
    {
        StatsRequest.AddRemoveCommanders = new List<Commander>() { cmdr };
        IJSRuntime.InvokeVoidAsync("setMultiSelect", "addremovecmdr", new string[1] { $"{cmdr.ToString()}" });
    }

    private void GameModeChange(ChangeEventArgs e)
    {
        if (e.Value is string[] values)
        {
            List<GameMode> gameModes = new();
            for (int i = 0; i < values.Length; i++)
            {
                if (Enum.TryParse(values[i], out GameMode gameMode))
                {
                    gameModes.Add(gameMode);
                }
            }
            StatsRequest.GameModes = gameModes;

            if (IsMultiselect(StatsRequest.StatsMode))
            {
                if (StatsRequest.Interest == Commander.None)
                {
                    StatsRequest.Interest = Commander.Abathur;
                    SetMultiSelect(Commander.Abathur);
                }
                else
                {
                    SetMultiSelect(StatsRequest.Interest);
                }
            }
            else
            {
                ClearMultiSelect();
            }

            OnRequestChanged.InvokeAsync();
        }
    }

    private void AddRemoveCmdr(ChangeEventArgs e)
    {
        List<Commander> cmdrs = new();
        if (e.Value is string[] values)
        {
            for (int i = 0; i < values.Length; i++)
            {
                if (Enum.TryParse(values[i], out Commander cmdr))
                {
                    cmdrs.Add(cmdr);
                }
            }
        }

        OnAddRemoveCmdrsChanged.InvokeAsync(cmdrs);
    }

    void PlayersSelected(ChangeEventArgs e)
    {
        if (e.Value is string[] toonIdStrs)
        {
            if (!toonIdStrs.Any() || (toonIdStrs.Contains("All")))
            {
                StatsRequest.PlayerNames = new();
            }
            else
            {
                List<RequestNames> newNames = new();
                foreach (var toonIdStr in toonIdStrs)
                {
                    if (int.TryParse(toonIdStr, out int toonId))
                    {
                        var pl = requestNames.FirstOrDefault(f => f.ToonId == toonId);
                        if (pl != null)
                        {
                            newNames.Add(pl);
                        }
                    }
                }
                StatsRequest.PlayerNames = newNames;
            }

            if (IsMultiselect(StatsRequest.StatsMode))
            {
                if (StatsRequest.Interest == Commander.None)
                {
                    StatsRequest.Interest = Commander.Abathur;
                    SetMultiSelect(Commander.Abathur);
                }
                else
                {
                    SetMultiSelect(StatsRequest.Interest);
                }
            }
            else
            {
                ClearMultiSelect();
            }

            OnRequestChanged.InvokeAsync();
        }
    }

    private void AddPlayer(PlayerRatingPlayerDto player)
    {
        if (requestNames.Count >= 10)
        {
            toastService.ShowError("Maximum number of players exceeded.");
            return;
        }

        var requestName = new RequestNames()
            {
                Name = player.Name,
                ToonId = player.ToonId,
                RegionId = player.RegionId
            };
        if (!requestNames.Contains(requestName))
        {
            requestNames.Add(requestName);
        }
        if (!StatsRequest.PlayerNames.Contains(requestName))
        {
            StatsRequest.PlayerNames.Add(requestName);
        }
        StateHasChanged();
        UpdateMultiselect();
        OnRequestChanged.InvokeAsync();
    }

    private void RemovePlayer(RequestNames requestName)
    {
        requestNames.Remove(requestName);
        if (StatsRequest.PlayerNames.Contains(requestName))
        {
            StatsRequest.PlayerNames.Remove(requestName);
        }
        StateHasChanged();
        OnRequestChanged.InvokeAsync();
    }

    private void UpdateMultiselect()
    {
        var selected = StatsRequest.PlayerNames.Any() ?
            StatsRequest.PlayerNames.Select(s => s.ToonId.ToString()).ToArray() :
            new string[1] { "All" };

        IJSRuntime.InvokeVoidAsync("setMultiSelect", "playerselect", selected);
    }

    public void Dispose()
    {
        editContext.OnFieldChanged -= FieldChanged;
    }
}
