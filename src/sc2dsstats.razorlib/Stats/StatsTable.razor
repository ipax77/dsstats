@using pax.dsstats.shared;
@using sc2dsstats.razorlib.Extensions;
@using sc2dsstats.razorlib.Services;

<div class="table-responsive tableFixHead">
    <table class="tptable table w-auto">
        <colgroup>
            <col class="col">
            <col class="col">
            <col class="col">
            <col class="col">
        </colgroup>
        <thead class="user-select-none">
            <CascadingValue Value="Orders">
            <tr>
                <th scope="col" class="pointer" @onclick="e => SortList(e, nameof(StatsResponseItem.Label))">
                    <SortArrow Property="@nameof(StatsResponseItem.Label)">
                        Label
                    </SortArrow>
                </th>
                <th scope="col" class="pointer" @onclick="e => SortList(e, nameof(StatsResponseItem.Matchups))">
                    <SortArrow Property="@nameof(StatsResponseItem.Matchups)">
                        Matchups
                    </SortArrow>
                </th>
                <th scope="col" class="pointer" @onclick="e => SortList(e, nameof(StatsResponseItem.Wins))">
                    <SortArrow Property="@nameof(StatsResponseItem.Wins)">
                        Wins
                    </SortArrow>
                </th>
                <th scope="col" class="pointer" @onclick="e => SortList(e, nameof(StatsResponseItem.Winrate))">
                    <SortArrow Property="@nameof(StatsResponseItem.Winrate)">
                        @StatsResponse.Request.StatsMode
                    </SortArrow>
                </th>
            </tr>
            </CascadingValue>
        </thead>
        <tbody>
            @foreach (var item in GetSortedList())
            {
                <tr class="pointer" @onclick="e => RowClicked(item)">
                    <td>
                        <img src="@HelperService.GetImageSrc(item.Cmdr)"
                         alt="@item.Label"
                         title="@item.Label"
                         width="30"
                         height="30" />
                        @item.Label
                    </td>
                    <td class="text-center">@item.Matchups</td>
                    <td class="text-center">@item.Wins</td>
                    <td>@item.Winrate.ToString("N2") %</td>
                </tr>
            }
        </tbody>
    </table>
</div>


@code {
    [CascadingParameter]
    [EditorRequired]
    public StatsResponse StatsResponse { get; set; } = default!;

    [Parameter]
    public EventCallback<Commander> OnCommanderClicked { get; set; }

    private List<TableOrder> Orders = new List<TableOrder>()
    {
        new TableOrder() { Property = "Winrate", Ascending = false }
    };

    private void SortList(MouseEventArgs e, string property)
    {
        var exOrder = Orders.FirstOrDefault(f => f.Property == property);
        if (e.ShiftKey)
        {
            if (exOrder == null)
            {
                Orders.Add(new TableOrder()
                    {
                        Property = property
                    });
            }
            else
            {
                exOrder.Ascending = !exOrder.Ascending;
            }
        }
        else
        {
            Orders.Clear();
            Orders.Add(new TableOrder()
                {
                    Property = property,
                    Ascending = exOrder == null ? false : !exOrder.Ascending
                });
        }
        StateHasChanged();
    }

    private List<StatsResponseItem> GetSortedList()
    {
        List<StatsResponseItem> items = new();

        if (StatsResponse.Items.Any())
        {
            var itemsQ = StatsResponse.Items.AsQueryable();

            foreach (var order in Orders)
            {
                if (order.Ascending)
                {
                    itemsQ = itemsQ.AppendOrderBy(order.Property);
                }
                else
                {
                    itemsQ = itemsQ.AppendOrderByDescending(order.Property);
                }
            }

            items = itemsQ.ToList();
        }

        return items;
    }

    private void RowClicked(StatsResponseItem item)
    {
        var cmdr = item.Cmdr;
        if (cmdr != Commander.None)
        {
            OnCommanderClicked.InvokeAsync(cmdr);
        }
    }
}
