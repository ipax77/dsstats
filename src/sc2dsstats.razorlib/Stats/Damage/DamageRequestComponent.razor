@using pax.dsstats.shared;
@using Microsoft.AspNetCore.Components.Forms;
@inject NavigationManager NavigationManager
@implements IDisposable;

<EditForm EditContext="editContext">
    <div class="row">
        <div class="col-auto">
            <label class="form-label">
                Time Period
                <InputSelect class="form-select" @bind-Value="Request.TimePeriod">
                    @foreach (TimePeriod time in Data.GetTimePeriods(Data.TimePeriodGet.NoNone))
                    {
                        <option value="@time">@Data.GetTimePeriodLongName(time)</option>
                    }
                </InputSelect>
            </label>
        </div>
        <div class="col-auto">
            <label class="form-label">
                Type
                <InputSelect class="form-select" @bind-Value="Request.RatingType">
                    <option value="@RatingType.Cmdr">Commanders</option>
                    <option value="@RatingType.Std">Standard</option>
                    <option value="@RatingType.CmdrTE">Commanders TE</option>
                    <option value="@RatingType.StdTE">Standard TE</option>
                </InputSelect>
            </label>
        </div>
        <div class="col-auto">
            <label class="form-label">
                Interest
                <InputSelect class="form-select" @bind-Value="Request.Interest">
                    <option value="@Commander.None">All</option>
                    @if (Request.RatingType == RatingType.Std || Request.RatingType == RatingType.StdTE)
                    {
                        @foreach (var cmdr in Data.GetCommanders(Data.CmdrGet.Std))
                        {
                            <option value="@cmdr">@cmdr</option>
                        }
                    }
                    else
                    {
                        @foreach (var cmdr in Data.GetCommanders(Data.CmdrGet.NoStd))
                        {
                            <option value="@cmdr">@cmdr</option>
                        }
                    }
                </InputSelect>
            </label>
        </div>
        <div class="col-auto" style="width: 175px;">
            <label class="form-label">
                Breakpoint <span class="text-info bgchart p-1">@Request.Breakpoint</span>
                <input type="range" class="form-range" value="@((int)Request.Breakpoint)" min="1" max="4"
                       step="1" @oninput="BreakpointChange">
            </label>
        </div>
        <div class="col-auto">
            <div class="form-check form-switch">
                <label class="form-check-label">
                    With Leavers
                    <InputCheckbox class="form-check-input" @bind-Value="Request.WithLeavers">
                    </InputCheckbox>
                </label>
            </div>
        </div>
    </div>
</EditForm>
<div class="row ms-2">
    <div class="col-auto">
        <button class="btn btn-sm btn-outline-light"
        type="button"
        data-bs-toggle="collapse"
        data-bs-target="#RatingRange"
        aria-expanded="false"
        aria-controls="RatingRange"
        @onclick="ShowHideRatingRange">
            <span class="oi @(showRatingRange ? "oi-caret-bottom" : "oi-caret-top")"></span>
            Rating Range
        </button>
    </div>
    <div class="col-auto">
        <div class="d-flex">
            <div>
                <button class="btn btn-sm btn-outline-light"
                        type="button"
                        data-bs-toggle="collapse"
                        data-bs-target="#Exp2WinOffset"
                        aria-expanded="false"
                        aria-controls="Exp2WinOffset"
                @onclick="ShowHideExp2Win">
                    <span class="oi @(showExp2Win ? "oi-caret-bottom" : "oi-caret-top")"></span>
                    Win Probability Range
                </button>
            </div>
            <div class="ms-2">
                <span class="oi oi-info pointer" onclick="window.location.href='https://github.com/ipax77/dsstats/wiki#win-probability-range'"></span>
            </div>
        </div>
    </div>
</div>

<div class="row mt-1">
    <div class="col-auto">
        <div class="collapse" id="RatingRange">
            <div class="row">
                <div class="col-auto" style="width: 175px;">
                    <label class="form-label">
                        From Rating <span class="text-info">@(
                        fromRating == Data.MaxBuildRating ? $"{Data.MaxBuildRating}+" : $"{fromRating}"
                                )
                        </span>
                        <input type="range" class="form-range" value="@(fromRating)" min="@Data.MinBuildRating" max="@Data.MaxBuildRating"
                        step="50" id="spawnrange" @oninput="FromRatingChange">
                    </label>
                </div>
                <div class="col-auto" style="width: 175px;">
                    <label class="form-label">
                        To Rating <span class="text-info">@(
                        toRating >= Data.MaxBuildRating ? $"{Data.MaxBuildRating}+" : $"{toRating}"
                                )
                        </span>
                        <input type="range" class="form-range" value="@(toRating)" min="@Data.MinBuildRating" max="@Data.MaxBuildRating"
                        step="50" id="spawnrange" @oninput="ToRatingChange">
                    </label>
                </div>
                <div class="col-auto">
                    <button type="button" class="btn btn-sm btn-outline-warning bgchart" @onclick="RequestRange">Set Range</button>
                    <div class="btn-group bgchart">
                        <button type="button" class="btn btn-sm btn-outline-info" @onclick="@(() => { fromRating = 500; toRating = 950;})">Learners</button>
                        <button type="button" class="btn btn-sm btn-outline-info" @onclick="@(() => { fromRating = 950; toRating = 1150;})">Average</button>
                        <button type="button" class="btn btn-sm btn-outline-info" @onclick="@(() => { fromRating = 1150; toRating = 1500;})">Advanced</button>
                        <button type="button" class="btn btn-sm btn-outline-info" @onclick="@(() => { fromRating = 1500; toRating = 2500;})">Top</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="col-auto">
        <div class="collapse" id="Exp2WinOffset">
            <div class="row">
                <div class="col-auto" style="width: 225px;">
                    <label class="form-label">
                        Exp2Win Offset <span class="text-info">@exp2WinInfo</span>
                        <input type="range" class="form-range" value="@exp2winOffset" min="0" max="50"
                        step="5" id="spawnrange" @oninput="Exp2WinChange">
                    </label>
                </div>
                <div class="col-auto">
                    <button type="button" class="btn btn-sm btn-outline-warning bgchart" @onclick="RequestExp2Win">Set Exp2Win</button>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [CascadingParameter]
    public DamageRequest Request { get; set; } = default!;
    EditContext editContext = null!;

    [Parameter]
    public EventCallback OnRequestChanged { get; set; }

    [Parameter]
    public EventCallback OnBreakpointChanged { get; set; }

    private int fromRating;
    private int toRating;
    bool showRatingRange;
    bool showExp2Win;
    private int exp2winOffset;
    string exp2WinInfo => exp2winOffset == 0 || exp2winOffset == 50 ? "All" : $"{50 - exp2winOffset}% - {50 + exp2winOffset}%";

    protected override void OnInitialized()
    {
        fromRating = Request.FromRating == 0 ? Data.MinBuildRating : Request.FromRating;
        toRating = Request.ToRating == 0 ? Data.MaxBuildRating : Request.ToRating;
        exp2winOffset = Request.Exp2WinOffset;
        editContext = new(Request);
        editContext.OnFieldChanged += FieldChanged;
        base.OnInitialized();
    }

    private void FieldChanged(object? sender, FieldChangedEventArgs e)
    {
        if (e.FieldIdentifier.FieldName == nameof(WinrateRequest.RatingType))
        {
            Request.Interest = Commander.None;
        }
        OnRequestChanged.InvokeAsync();
    }

    private void BreakpointChange(ChangeEventArgs e)
    {
        if (e.Value is string value && int.TryParse(value, out int intvalue))
        {
            Request.Breakpoint = (Breakpoint)intvalue;
            OnBreakpointChanged.InvokeAsync();
        }
    }

    private void FromRatingChange(ChangeEventArgs e)
    {
        if (e.Value is string value && int.TryParse(value, out int intvalue))
        {
            fromRating = intvalue;
            if (toRating <= fromRating)
            {
                toRating = fromRating + 50;
            }
        }
    }

    private void ToRatingChange(ChangeEventArgs e)
    {
        if (e.Value is string value && int.TryParse(value, out int intvalue))
        {
            toRating = intvalue;
            if (toRating <= fromRating)
            {
                toRating = fromRating + 50;
            }
        }
    }

    private void RequestRange()
    {
        Request.FromRating = fromRating;
        Request.ToRating = toRating;
        OnRequestChanged.InvokeAsync();
    }

    private void ShowHideRatingRange()
    {
        showRatingRange = !showRatingRange;
        if (!showRatingRange)
        {
            fromRating = Request.FromRating = 0;
            toRating = Request.ToRating = 0;
            OnRequestChanged.InvokeAsync();
        }
    }

    private void Exp2WinChange(ChangeEventArgs e)
    {
        if (e.Value is string value && int.TryParse(value, out int intvalue))
        {
            exp2winOffset = intvalue;
        }
    }

    private void ShowHideExp2Win()
    {
        showExp2Win = !showExp2Win;
        if (!showExp2Win)
        {
            exp2winOffset = Request.Exp2WinOffset = 0;
            OnRequestChanged.InvokeAsync();
        }
    }

    private void RequestExp2Win()
    {
        Request.Exp2WinOffset = exp2winOffset;
        OnRequestChanged.InvokeAsync();
    }

    public void Dispose()
    {
        editContext.OnFieldChanged -= FieldChanged;
    }

}