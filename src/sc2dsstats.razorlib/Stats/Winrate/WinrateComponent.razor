@using pax.dsstats.shared.Interfaces;
@using pax.dsstats.shared;
@using sc2dsstats.razorlib.Extensions;
@inject IWinrateService winrateService
@implements IDisposable

<style>
    .check-label:hover {
        color: white !important;
        background-color: #adb5bd !important;
        border-color: white !important;
    }
</style>

<CascadingValue Value="Request">
    <WinrateRequestComponent OnRequestChanged="LoadData"></WinrateRequestComponent>
    <div class="d-flex">
        <div>
            @if (isLoading)
            {
                <div class="spinner-border spinner-border-sm text-info ms-2" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            }
            else
            {
                <div class="ms-4"></div>
            }
        </div>
        <div class="ms-2">
            <button class="btn btn-sm btn-outline-light"
                    type="button"
                    data-bs-toggle="collapse"
                    data-bs-target="#RatingRange"
                    aria-expanded="false"
                    aria-controls="RatingRange"
            @onclick="ShowHideRatingRange">
                <span class="oi @(showRatingRange ? "oi-caret-bottom" : "oi-caret-top")"></span>
                Rating Range
            </button>
        </div>
    </div>
    <div class="collapse mt-1" id="RatingRange">
        <WinrateRatingRequestComponent OnRangeSelected="LoadData"></WinrateRatingRequestComponent>
    </div>
</CascadingValue>

<div class="row mt-2">
    <div class="col-auto">
        <div class="d-none d-xl-block">
            <CmdrSelectComponent @ref="cmdrSelectComponent" OnCommanderSelected="CommanderSelected"></CmdrSelectComponent>
        </div>
    </div>
    <div class="col-auto">
        <div>
            @if (response != null)
            {
                <div class="border rounded border-secondary bgchart"
                     style="min-width: 850px; width: 55vw; height: calc(55vw * 0.5); min-height: 425px;">

                    <WinrateChart @ref="winrateChart" Request="Request" Response="orderedResponse"></WinrateChart>
                </div>
            }
        </div>
        <div class="mt-2">
            <div class="btn-group" role="group" aria-label="Chart type toggle group">
                @{
                    int i = -1;
                }
                @foreach (WinrateType winrateType in Enum.GetValues(typeof(WinrateType)))
                {
                    i++;
                    <input type="radio" class="btn-check" name="@($"btnwinrate{i}")" id="@($"winratetype{i}")" autocomplete="off" checked="@(Request.WinrateType == winrateType)" @onchange="e => SetWinrateType(e, winrateType)">
                    <label class="btn btn-sm btn-outline-light bgchart check-label" for="@($"winratetype{i}")">@winrateType</label>
                }
            </div>
        </div>
        <div class="mt-2 bgchart d-inline-block p-1">
            <p class="text-warning">
                @GetDescription()
            </p>
        </div>
    </div>
</div>
@if (response != null)
{
    <CascadingValue Value="tableOrders">
        <div class="mt-2">
            <WinrateTable @ref="winrateTable" Response="orderedResponse" OnOrderChanged="OrderChanged"></WinrateTable>
        </div>
    </CascadingValue>
}

@code {
    [Parameter, EditorRequired]
    public WinrateRequest Request { get; set; } = default!;

    [Parameter]
    public EventCallback<WinrateRequest> OnRequestChanged { get; set; }

    CancellationTokenSource cts = new();
    SemaphoreSlim ss = new(1, 1);
    bool isLoading;
    bool showRatingRange;

    WinrateResponse? response = null;
    WinrateChart? winrateChart;
    WinrateTable? winrateTable;
    CmdrSelectComponent? cmdrSelectComponent;

    TableOrder tableOrder = new()
        {
            Property = nameof(WinrateEnt.AvgGain),
            Ascending = false
        };
    List<TableOrder> tableOrders = new();

    WinrateResponse orderedResponse => response == null ? new() : new()
        {
            Interest = response.Interest,
            WinrateEnts = tableOrder.Property == "Winrate" ?
                                tableOrder.Ascending ? response.WinrateEnts.OrderBy(o => o.Wins * 100.0 / o.Count).ToList()
                                : response.WinrateEnts.OrderByDescending(o => o.Wins * 100.0 / o.Count).ToList()
                            : tableOrder.Ascending ? response.WinrateEnts.AsQueryable().AppendOrderBy(tableOrder.Property).ToList()
                                : response.WinrateEnts.AsQueryable().AppendOrderByDescending(tableOrder.Property).ToList()
        };

    protected override void OnInitialized()
    {
        tableOrders.Add(tableOrder);
        _ = LoadData();
        base.OnInitialized();
    }

    private async Task LoadData()
    {
        await ss.WaitAsync();
        try
        {
            isLoading = true;
            await InvokeAsync(() => StateHasChanged());
            response = await winrateService.GetWinrate(Request, cts.Token);

            winrateChart?.PrepareData(orderedResponse, Request);
            winrateTable?.SetTable(orderedResponse);
            cmdrSelectComponent?.SetParameters(Request.RatingType == RatingType.Std || Request.RatingType == RatingType.StdTE, true, Request.Interest);
            await OnRequestChanged.InvokeAsync(Request);

            isLoading = false;
            await InvokeAsync(() => StateHasChanged());
        }
        finally
        {
            ss.Release();
        }
    }

    private void CommanderSelected(Commander cmdr)
    {
        Request.Interest = cmdr;
        _ = LoadData();
    }

    private void SetWinrateType(ChangeEventArgs e, WinrateType winrateType)
    {
        Request.WinrateType = winrateType;

        tableOrder.Property = Request.WinrateType switch
        {
            WinrateType.AvgGain => nameof(WinrateEnt.AvgGain),
            WinrateType.Matchups => nameof(WinrateEnt.Count),
            WinrateType.AvgRating => nameof(WinrateEnt.AvgRating),
            WinrateType.Winrate => "Winrate",
            _ => nameof(WinrateEnt.AvgGain)
        };
        tableOrder.Ascending = false;

        winrateChart?.PrepareData(orderedResponse, Request);
        winrateTable?.SetTable(orderedResponse);
        OnRequestChanged.InvokeAsync(Request);
    }

    private string GetDescription()
    {
        return (Request.WinrateType, Request.Interest == Commander.None) switch
        {
            (WinrateType.AvgGain, true) => $"The average rating gain of players who played the Commanders.",
            (WinrateType.Matchups, true) => $"The number of matchups (up to 6 per game)",
            (WinrateType.AvgRating, true) => $"The average player rating of players who played the Commanders",
            (WinrateType.Winrate, true) => $"Winrate - average wins per 100 matchups",
            (WinrateType.AvgGain, false) => $"The average rating gain of players who played {Request.Interest} vs the Commanders.",
            (WinrateType.Matchups, false) => $"The number of matchups (up to 6 per game) of {Request.Interest} vs the Commanders",
            (WinrateType.AvgRating, false) => $"The average player rating of players who played {Request.Interest} vs the Commanders",
            (WinrateType.Winrate, false) => $"Winrate - average wins per 100 matchups of {Request.Interest} vs the Commanders",
            _ => ""
        };
    }

    private void OrderChanged()
    {
        winrateTable?.SetTable(orderedResponse);
        winrateChart?.ChangeOrder(orderedResponse);
    }

    private void ShowHideRatingRange()
    {
        showRatingRange = !showRatingRange;
        if (!showRatingRange)
        {
            Request.FromRating = 0;
            Request.ToRating = 0;
            _ = LoadData();
        }
    }

    public void Dispose()
    {
        cts.Cancel();
        cts.Dispose();
        ss.Dispose();
    }
}
