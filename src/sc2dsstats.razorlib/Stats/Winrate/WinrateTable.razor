@using System.Globalization;
@using pax.dsstats.shared;
@using sc2dsstats.razorlib.Services;

<style>
    .tableFixHead {
        overflow-y: auto;
        overflow-x: auto;
    }

        .tableFixHead thead th {
            position: sticky;
            top: 0;
        }

    table {
        border-collapse: collapse;
        width: 100%;
    }

    th, td {
        padding: 8px 16px;
        white-space: nowrap;
    }

    th {
        background: purple;
    }

    .tablebackground {
        position: absolute;
        z-index: -1;
        opacity: 0.15;
    }
</style>

<div class="table-responsive tableFixHead">
    <table class="table bgchart table-hover w-auto">
        <thead>
            <tr>
                <CascadingValue Value="TableOrders">
                    <th class="pointer" @onclick="e => SetOrder(e, nameof(WinrateEnt.Commander))">
                        <SortArrow Property="@nameof(WinrateEnt.Commander)">
                            @nameof(WinrateEnt.Commander)
                        </SortArrow>
                    </th>
                    <th class="pointer" @onclick="e => SetOrder(e, nameof(WinrateEnt.AvgGain))">
                        <SortArrow Property="@nameof(WinrateEnt.AvgGain)">
                            @nameof(WinrateEnt.AvgGain)
                        </SortArrow>
                    </th>
                    <th class="pointer" @onclick="@(e => SetOrder(e, "Winrate"))">
                        <SortArrow Property="Winrate">
                            Winrate
                        </SortArrow>
                    </th>
                    <th class="pointer" @onclick="e => SetOrder(e, nameof(WinrateEnt.Count))">
                        <SortArrow Property="@nameof(WinrateEnt.Count)">
                            Matchups
                        </SortArrow>
                    </th>
                    <th class="pointer" @onclick="e => SetOrder(e, nameof(WinrateEnt.AvgRating))">
                        <SortArrow Property="@nameof(WinrateEnt.AvgRating)">
                            @nameof(WinrateEnt.AvgRating)
                        </SortArrow>
                    </th>
                </CascadingValue>
            </tr>
            <tr class="table-primary">
                <th></th>
                <th>&Oslash; @GetAverageRatingGain().ToString("N2", CultureInfo.InvariantCulture)</th>
                <th>&Oslash; @GetAverageWinrate().ToString("N2", CultureInfo.InvariantCulture)</th>
                <th>&sum; @HelperService.GetBigNumberString(Response.WinrateEnts.Sum(s => s.Count))</th>
                <th>&Oslash; @GetAverageRating().ToString("N2", CultureInfo.InvariantCulture)</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var ent in Response.WinrateEnts)
            {
                <tr>
                    <td>
                        <img src="@HelperService.GetImageSrc(ent.Commander)"
                             alt="@ent.Commander"
                             title="@ent.Commander"
                             width="30"
                             height="30" />
                        @ent.Commander
                    </td>
                    <td>@ent.AvgGain.ToString("N2", CultureInfo.InvariantCulture)</td>
                    <td>@HelperService.GetPercentageString(ent.Wins, ent.Count)</td>
                    <td>@ent.Count</td>
                    <td>@ent.AvgRating.ToString("N2", CultureInfo.InvariantCulture)</td>
                </tr>
            }
        </tbody>
    </table>
</div>


@code {
    [CascadingParameter]
    public List<TableOrder> TableOrders { get; set; } = new();

    [Parameter, EditorRequired]
    public WinrateResponse Response { get; set; } = null!;

    [Parameter]
    public EventCallback OnOrderChanged { get; set; }

    public void SetTable(WinrateResponse response)
    {
        Response = response;
        StateHasChanged();
    }

    private void SetOrder(MouseEventArgs e, string property)
    {
        var tableOrder = TableOrders.FirstOrDefault();
        if (tableOrder == null)
        {
            tableOrder = new()
                {
                    Property = property,
                    Ascending = false
                };
        }
        else
        {
            if (tableOrder.Property == property)
            {
                tableOrder.Ascending = !tableOrder.Ascending;
            }
            else
            {
                tableOrder.Property = property;
                tableOrder.Ascending = false;
            }
        }
        OnOrderChanged.InvokeAsync();
    }

    private double GetAverageRatingGain()
    {
        if (!Response.WinrateEnts.Any())
        {
            return 0;
        }

        return Response.WinrateEnts.Sum(s => s.Count * s.AvgGain) / Response.WinrateEnts.Sum(s => s.Count);
    }

    private double GetAverageWinrate()
    {
        if (!Response.WinrateEnts.Any())
        {
            return 0;
        }

        return Response.WinrateEnts.Sum(s => s.Wins) * 100.0 / Response.WinrateEnts.Sum(s => s.Count);
    }

    private double GetAverageRating()
    {
        if (!Response.WinrateEnts.Any())
        {
            return 0;
        }
        return Response.WinrateEnts.Sum(s => s.Count * s.AvgRating) / Response.WinrateEnts.Sum(s => s.Count);
    }
}
