@using System.Globalization;
@using Microsoft.JSInterop;
@using pax.dsstats.shared;
@using pax.dsstats.shared.Interfaces;
@using sc2dsstats.razorlib.Services;
@inject IWinrateService winrateService
@inject IJSRuntime JSRuntime
@implements IDisposable

@if (response != null)
{
    <div>
        <h3 class="text-warning fw-bold"><a href="/stats">Top Commanders</a> past 90 days</h3>
    </div>
    <div class="table-responsive tableFixHead">
        <table class="tptable table table-sm">
            <thead>
                <tr>
                    <th>Commander</th>
                    <th><spnn data-bs-toggle="tooltip" data-bs-placement="top" data-bs-title="Average rating gain">AvgGain</spnn></th>
                    <th>Winrate</th>
                    <th>Matchups</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in response.WinrateEnts.OrderByDescending(o => o.AvgGain).Take(7))
                {
                    <tr>
                        <td>
                            <img src="@HelperService.GetImageSrc(item.Commander)"
                                 alt="@item.Commander"
                                 title="@item.Commander"
                                 width="30"
                                 height="30" />
                            @item.Commander
                        </td>
                        <td><span class="text-warning fw-bold">@item.AvgGain.ToString("N2", CultureInfo.InvariantCulture)</span></td>
                        <td>@HelperService.GetPercentageString(item.Wins, item.Count) %</td>
                        <td class="text-center">@item.Count</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {
    private WinrateRequest WinrateRequest = new()
    {
        TimePeriod = TimePeriod.Past90Days,
        RatingType = RatingType.Cmdr,
        Interest = Commander.None
    };

    private WinrateResponse? response;
    private CancellationTokenSource cts = new();

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            _ = LoadData();
            JSRuntime.InvokeVoidAsync("enableTooltips");
        }
        base.OnAfterRender(firstRender);
    }

    private async Task LoadData()
    {
        response = await winrateService.GetWinrate(WinrateRequest, cts.Token);
        await InvokeAsync(() => StateHasChanged());
    }

    public void Dispose()
    {
        cts.Cancel();
        cts.Dispose();
    }
}
