@using System.Globalization;
@using Microsoft.JSInterop;
@using pax.dsstats.shared
@using pax.BlazorChartJs
@using sc2dsstats.razorlib.Services
@inject NavigationManager NavigationManager
@inject IDataService dataService

<div>
    <div class="d-flex bg-secondary p-2">
        <div class="align-self-center me-2 border p-1">
            <span>@Data.GetRegionString(PlayerRatingDto.RegionId)</span>
        </div>
        <div class="align-self-center">
            <h3 class="text-warning fw-bold">@PlayerRatingDto.Name Details</h3>
        </div>
        <div class="align-self-center">
            @if (PlayerRatingDto.CmdrRatingStats.Mmr > 0)
            {
                <span class="badge bg-primary ms-3" style="font-size: 1.2rem;"><span class="small">Cmdr Rating</span><br/><span class="text-warning">@PlayerRatingDto.CmdrRatingStats.Mmr.ToString("N2", CultureInfo.InvariantCulture)</span></span>
            }
        </div>
        <div class="align-self-center">
            @if (PlayerRatingDto.StdRatingStats.Mmr > 0)
            {
                <span class="badge bg-primary ms-3" style="font-size: 1.2rem;"><span class="small">Std Rating</span><br/><span class="text-warning">@PlayerRatingDto.StdRatingStats.Mmr.ToString("N2", CultureInfo.InvariantCulture)</span></span>
            }
        </div>
        <div class="align-self-center ms-3">
            <button type="button" class="btn btn-outline-light" @onclick="ShowReplays">Replays</button>
        </div>
    </div>
    <div class="row">
        <div class="col-auto" style="width: 600px;">
            <ChartComponent @ref="chartComponent" ChartJsConfig="chartJsConfig" OnEventTriggered="EventTriggered"></ChartComponent>
        </div>
        <div class="col-auto" style="width: 600px;">
            <ChartComponent @ref="chartComponentStd" ChartJsConfig="chartJsConfigStd" OnEventTriggered="EventTriggered"></ChartComponent>
        </div>
        <div class="col-auto">
            <span class="oi oi-x text-danger pointer" style="font-size: 2rem; z-index: 1000;" @onclick="Close"></span>
        </div>
    </div>

    @if (playerDetailInfo != null)
    {
        <PlayerDetailsSubComponent PlayerDetailInfo="playerDetailInfo"></PlayerDetailsSubComponent>
    }
    else
    {
        <div class="spinner-border text-danger" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    }
</div>

@code {
    [Parameter]
    [EditorRequired]
    public PlayerRatingDto PlayerRatingDto { get; set; } = default!;

    [Parameter]
    public EventCallback OnCloseRequested { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "return")]
    public string? ReturnPath { get; set; }

    ChartComponent? chartComponent;
    ChartComponent? chartComponentStd;
    ChartJsConfig chartJsConfig = null!;
    ChartJsConfig chartJsConfigStd = null!;
    PlayerDetailInfo? playerDetailInfo;
    private string? ratingOtInfo;

    private int chartSetups;
    private bool chartsSetup;
    private bool chartDataUp;

    protected override void OnInitialized()
    {
        chartJsConfig = GetLineChartConfig();
        chartJsConfigStd = GetLineChartConfig();

        base.OnInitialized();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            _ = LoadChartData();
            _ = LoadPlayerDetails();
        }
        base.OnAfterRender(firstRender);
    }

    private void EventTriggered(ChartJsEvent e)
    {
        if (e is ChartJsInitEvent initEvent)
        {
            Interlocked.Increment(ref chartSetups);
            if (chartSetups >= 2)
            {
                chartsSetup = true;
            }
            if (chartsSetup && chartDataUp)
            {
                SetupCharts();
            }
        }
    }

    public async Task LoadPlayerDetails()
    {
        var matchupInfos = await dataService.GetPlayerDetailInfo(PlayerRatingDto.ToonId);
        playerDetailInfo = new PlayerDetailInfo()
            {
                MatchupInfos = matchupInfos.ToList()
            };
        await InvokeAsync(() => StateHasChanged());
    }

    public async Task LoadChartData()
    {
        ratingOtInfo = await dataService.GetPlayerRatings(PlayerRatingDto.ToonId);
        chartDataUp = true;
        if (chartsSetup && chartDataUp)
        {
            SetupCharts();
        }
    }

    private void Close()
    {

        OnCloseRequested.InvokeAsync();
    }

    private void ShowReplays()
    {
        NavigationManager.NavigateTo(
            NavigationManager.GetUriWithQueryParameters("replays",
                new Dictionary<string, object?>() { { "Players", PlayerRatingDto.Name } }
            )
        );
    }

    private void SetupCharts()
    {
        if (String.IsNullOrEmpty(ratingOtInfo))
        {
            return;
        }

        var plRatingsOt = ratingOtInfo.Split('X');

        for (int j = 0; j < plRatingsOt.Length; j++)
        {
            List<string> labels = new();
            List<double> ratings = new();

            var ents = plRatingsOt[j].Split('|');
            for (int i = 0; i < ents.Length; i++)
            {
                var entData = ents[i].Split(',');
                if (double.TryParse(entData[0], NumberStyles.AllowDecimalPoint, CultureInfo.InvariantCulture, out double rating))
                {
                    ratings.Add(Math.Round(rating, 1));
                    labels.Add(entData[1]);
                }
            }

            if (j == 0)
            {
                if (chartJsConfig.Data.Datasets.Any())
                {
                    foreach (var dataset in chartJsConfig.Data.Datasets.ToArray())
                    {
                        chartJsConfig.RemoveDataset(dataset);
                    }
                }
                chartJsConfig.SetLabels(labels);
                chartJsConfig.AddDataset(GetLineDataset(ratings, PlayerRatingDto.Name));
            }
            else if (j == 1)
            {
                if (chartJsConfigStd.Data.Datasets.Any())
                {
                    foreach (var dataset in chartJsConfigStd.Data.Datasets.ToArray())
                    {
                        chartJsConfigStd.RemoveDataset(dataset);
                    }
                }
                chartJsConfigStd.SetLabels(labels);
                chartJsConfigStd.AddDataset(GetLineDataset(ratings, PlayerRatingDto.Name, true));
            }
        }
    }

    private LineDataset GetLineDataset(List<double> ratings, string name, bool std = false)
    {
        return new()
            {
                Label = $"{(std ? "Std" : "Cmdr")} {name} development",
                Data = new List<object>(ratings.Cast<object>()),
                BackgroundColor = "lightblue",
                BorderColor = "lightblue",
                BorderWidth = 4,
                Fill = false,
                PointBackgroundColor = new IndexableOption<string>("blue"),
                PointBorderColor = new IndexableOption<string>("blue"),
                PointRadius = new IndexableOption<double>(1),
                PointBorderWidth = new IndexableOption<double>(1),
                PointHitRadius = new IndexableOption<double>(1),
                Tension = 0.4
            };
    }

    private ChartJsConfig GetLineChartConfig()
    {
        return new()
            {
                Type = ChartType.line,
                Data = new ChartJsData()
                {
                    Labels = new List<string>()
                    {
                    },
                    Datasets = new List<ChartJsDataset>()
                    {
                    }
                },
                Options = new ChartJsOptions()
                {
                    Responsive = true,
                    Plugins = new Plugins()
                    {
                        ArbitraryLines = new List<ArbitraryLineConfig>()
                    },
                    Scales = new ChartJsOptionsScales()
                    {
                        X = new LinearAxis()
                        {
                            Display = true,
                            Position = "bottom",
                            Ticks = new LinearAxisTick()
                            {
                                Color = "red",
                                Padding = 3,
                                AutoSkipPadding = 3,
                                BackdropColor = "rgba(255, 255, 255, 0.75)",
                                Align = "center",
                                CrossAlign = "near",
                                ShowLabelBackdrop = false,
                                BackdropPadding = new Padding(2)
                            },
                            Grid = new ChartJsGrid()
                            {
                                Display = true,
                                Color = "grey",
                                LineWidth = 1,
                                DrawBorder = true,
                                DrawOnChartArea = true,
                                TickLength = 8,
                                TickWidth = 1,
                                TickColor = "red",
                                Offset = false,
                                BorderWidth = 1,
                                BorderColor = "grey"
                            }
                        },
                        Y = new LinearAxis()
                        {
                            Display = true,
                            Ticks = new LinearAxisTick()
                            {
                                Color = "red",
                                Padding = 3,
                                AutoSkipPadding = 3,
                                BackdropColor = "rgba(255, 255, 255, 0.75)",
                                Align = "center",
                                CrossAlign = "near",
                                ShowLabelBackdrop = false,
                                BackdropPadding = new Padding(2)
                            },
                            Grid = new ChartJsGrid()
                            {
                                Display = true,
                                Color = "grey",
                                LineWidth = 1,
                                DrawBorder = true,
                                DrawOnChartArea = true,
                                TickLength = 8,
                                TickWidth = 1,
                                TickColor = "red",
                                Offset = false,
                                BorderWidth = 1,
                                BorderColor = "grey"
                            }
                        }
                    }
                }
            };
    }
}
