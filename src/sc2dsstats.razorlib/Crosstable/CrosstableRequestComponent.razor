@using Microsoft.AspNetCore.Components.Forms;
@using pax.dsstats.shared;
@implements IDisposable

<EditForm EditContext="editContext">
    <div class="row">
@*        <div class="col-auto">
            <label class="form-label">
                Mode
                <InputSelect class="form-select" @bind-Value="CrossTableRequest.Mode">
                    <option value="Standard" selected>Standard</option>
                    <option value="Commanders">Commanders</option>
                </InputSelect>
            </label>
        </div>*@
        <div class="col-auto">
            <label class="form-label">
                Time Period
                <InputSelect class="form-select" @bind-Value="CrossTableRequest.TimePeriod">
                    @foreach (TimePeriod time in Data.GetTimePeriods(Data.TimePeriodGet.NoNone))
                    {
                        <option value="@time">@Data.GetTimePeriodLongName(time)</option>
                    }
                </InputSelect>
            </label>
        </div>
        <div class="col-auto align-self-center">
            <div class="d-flex">
                <div class="form-check form-switch">
                    <label class="form-check-label">
                        TE Maps only
                        <InputCheckbox class="form-check-input" @bind-Value="CrossTableRequest.TeMaps">
                        </InputCheckbox>
                    </label>
                </div>
                <div class="ms-2">
                    <span class="oi oi-info pointer" onclick="window.location.href='https://github.com/ipax77/dsstats/wiki#te-map'"></span>
                </div>
            </div>
        </div>
    </div>
</EditForm>


@code {
    [CascadingParameter, EditorRequired]
    public CrossTableRequest CrossTableRequest { get; set; } = default!;

    [Parameter]
    public EventCallback OnRequestChanged { get; set; }

    private EditContext editContext = null!;

    protected override void OnInitialized()
    {
        editContext = new EditContext(CrossTableRequest);
        editContext.OnFieldChanged += FieldChanged;
        base.OnInitialized();
    }

    private void FieldChanged(object? sender, FieldChangedEventArgs e)
    {
        OnRequestChanged.InvokeAsync();
    }

    public void Dispose()
    {
        editContext.OnFieldChanged -= FieldChanged;
    }
}
