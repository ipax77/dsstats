@using pax.dsstats.shared;
@using sc2dsstats.razorlib.Extensions;

<div class="d-flex">
    <div>
        <h3>Results</h3>
    </div>
    <div class="d-flex ms-3">
        @foreach (var cmdr in TeamCrossTables.Comp.Cmdrs)
        {
            <div class="preload-@(cmdr.ToString().ToLower())" style="width: 30px; height: 30px;"></div>
        }
    </div>
    <div class="ms-3">
        <span class="oi oi-x text-danger pointer" @onclick="e => OnCloseRequested.InvokeAsync()"></span>
    </div>
</div>

<div class="table-responsive tableFixHead">
    <table class="table table-dark table-hover w-auto">
        <colgroup>
            <col class="col">
            <col class="col">
            <col class="col">
            <col class="col">
        </colgroup>
        <thead>
            <CascadingValue Value="Orders">
                <tr>
                    <th scope="col" class="pointer" @onclick="e => SortList(e, nameof(TeamCrossTable.Comp))">
                        <SortArrow Property="@nameof(TeamCrossTable.Comp)">
                            Team
                        </SortArrow>
                    </th>
                    <th scope="col" class="pointer" @onclick="e => SortList(e, nameof(TeamCrossTable.Count))">
                        <SortArrow Property="@nameof(TeamCrossTable.Count)">
                            Replays
                        </SortArrow>
                    </th>
                    <th scope="col" class="pointer" @onclick="e => SortList(e, nameof(TeamCrossTable.Wins))">
                        <SortArrow Property="@nameof(TeamCrossTable.Wins)">
                            Wins
                        </SortArrow>
                    </th>
                    <th scope="col" class="pointer" @onclick="e => SortList(e, nameof(TeamCrossTable.Winrate))">
                        <SortArrow Property="@nameof(TeamCrossTable.Winrate)">
                            Winrate %
                        </SortArrow>
                    </th>
                </tr>
            </CascadingValue>
        </thead>
        <tbody>
            @foreach (var team in GetSortedList())
            {
                <tr class="pointer @(Interest == team ? "table-primary" : "")" @onclick="e => RequestTeamReplays(team)">
                    <td>
                        <div class="d-flex">
                            @foreach (var cmdr in team.Comp.Cmdrs)
                            {
                                <div class="preload-@(cmdr.ToString().ToLower())" style="width: 30px; height: 30px;"></div>
                            }
                        </div>
                    </td>
                    <td>@team.Count</td>
                    <td>@team.Wins</td>
                    <td>@team.Winrate.ToString("N2")</td>
                </tr>
            }
        </tbody>
    </table>
</div>

@code {
    [Parameter, EditorRequired]
    public TeamCrossTable TeamCrossTables { get; set; } = default!;

    [Parameter]
    public EventCallback<TeamCmdrs> TeamRequest { get; set; }

    [Parameter]
    public EventCallback OnCloseRequested { get; set; }

    private List<TableOrder> Orders = new List<TableOrder>()
    {
        new TableOrder() { Property = nameof(TeamCrossTable.Winrate), Ascending = false }
    };

    private TeamResult? Interest = null;

    private void RequestTeamReplays(TeamResult teamResult)
    {
        Interest = teamResult;
        TeamRequest.InvokeAsync(teamResult.Comp);
        StateHasChanged();
    }

    private void SortList(MouseEventArgs e, string property)
    {
        var exOrder = Orders.FirstOrDefault(f => f.Property == property);
        if (e.ShiftKey)
        {
            if (exOrder == null)
            {
                Orders.Add(new TableOrder()
                    {
                        Property = property
                    });
            }
            else
            {
                exOrder.Ascending = !exOrder.Ascending;
            }
        }
        else
        {
            Orders.Clear();
            Orders.Add(new TableOrder()
                {
                    Property = property,
                    Ascending = exOrder == null ? false : !exOrder.Ascending
                });
        }
        StateHasChanged();
    }

    private List<TeamResult> GetSortedList()
    {
        List<TeamResult> items = new();

        if (TeamCrossTables.TeamResults.Any())
        {
            var itemsQ = TeamCrossTables.TeamResults.AsQueryable();

            foreach (var order in Orders)
            {
                if (order.Property == nameof(TeamCrossTable.Comp))
                {
                    if (order.Ascending)
                    {
                        itemsQ = itemsQ.OrderBy(o => String.Concat(o.Comp.Cmdrs));
                    }
                    else
                    {
                        itemsQ = itemsQ.OrderByDescending(o => String.Concat(o.Comp.Cmdrs));
                    }
                }
                else if (order.Ascending)
                {
                    itemsQ = itemsQ.AppendOrderBy(order.Property);
                }
                else
                {
                    itemsQ = itemsQ.AppendOrderByDescending(order.Property);
                }
            }

            items = itemsQ.ToList();
        }
        return items;
    }
}
