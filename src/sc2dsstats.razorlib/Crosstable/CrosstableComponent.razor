@using Microsoft.JSInterop;
@using pax.dsstats.shared;
@using sc2dsstats.razorlib.Extensions;
@using sc2dsstats.razorlib.Replay;
@using sc2dsstats.razorlib.Services;
@inject IDataService dataService
@inject IJSRuntime jsRuntime
@inject NavigationManager NavigationManager
@implements IDisposable


<style>
    .tableFixHead {
        overflow-y: auto;
        height: 750px;
    }

        .tableFixHead thead th {
            position: sticky;
            top: 0;
        }

    table {
        border-collapse: collapse;
        width: 100%;
    }

    th, td {
        padding: 8px 16px;
        white-space: nowrap;
    }

    .tablebackground {
        position: absolute;
        z-index: -1;
        opacity: 0.15;
    }

    .preload-terran {
        background-image: url("/_content/sc2dsstats.razorlib/images/terran-min.png");
        background-repeat: no-repeat;
        height: 30px;
        width: 30px;
        background-size: cover;
    }

    .preload-protoss {
        background-image: url("/_content/sc2dsstats.razorlib/images/protoss-min.png");
        background-repeat: no-repeat;
        height: 30px;
        width: 30px;
        background-size: cover;
    }

    .preload-zerg {
        background-image: url("/_content/sc2dsstats.razorlib/images/zerg-min.png");
        background-repeat: no-repeat;
        height: 30px;
        width: 30px;
        background-size: cover;
    }

    .preload-abathur {
        background-image: url("/_content/sc2dsstats.razorlib/images/abathur-min.png");
        background-repeat: no-repeat;
        height: 30px;
        width: 30px;
        background-size: cover;
    }

    .preload-alarak {
        background-image: url("/_content/sc2dsstats.razorlib/images/alarak-min.png");
        background-repeat: no-repeat;
        height: 30px;
        width: 30px;
        background-size: cover;
    }

    .preload-artanis {
        background-image: url("/_content/sc2dsstats.razorlib/images/artanis-min.png");
        background-repeat: no-repeat;
        height: 30px;
        width: 30px;
        background-size: cover;
    }

    .preload-dehaka {
        background-image: url("/_content/sc2dsstats.razorlib/images/dehaka-min.png");
        background-repeat: no-repeat;
        height: 30px;
        width: 30px;
        background-size: cover;
    }

    .preload-fenix {
        background-image: url("/_content/sc2dsstats.razorlib/images/fenix-min.png");
        background-repeat: no-repeat;
        height: 30px;
        width: 30px;
        background-size: cover;
    }

    .preload-horner {
        background-image: url("/_content/sc2dsstats.razorlib/images/horner-min.png");
        background-repeat: no-repeat;
        height: 30px;
        width: 30px;
        background-size: cover;
    }

    .preload-karax {
        background-image: url("/_content/sc2dsstats.razorlib/images/karax-min.png");
        background-repeat: no-repeat;
        height: 30px;
        width: 30px;
        background-size: cover;
    }

    .preload-kerrigan {
        background-image: url("/_content/sc2dsstats.razorlib/images/kerrigan-min.png");
        background-repeat: no-repeat;
        height: 30px;
        width: 30px;
        background-size: cover;
    }

    .preload-mengsk {
        background-image: url("/_content/sc2dsstats.razorlib/images/mengsk-min.png");
        background-repeat: no-repeat;
        height: 30px;
        width: 30px;
        background-size: cover;
    }

    .preload-nova {
        background-image: url("/_content/sc2dsstats.razorlib/images/nova-min.png");
        background-repeat: no-repeat;
        height: 30px;
        width: 30px;
        background-size: cover;
    }

    .preload-raynor {
        background-image: url("/_content/sc2dsstats.razorlib/images/raynor-min.png");
        background-repeat: no-repeat;
        height: 30px;
        width: 30px;
        background-size: cover;
    }

    .preload-stetmann {
        background-image: url("/_content/sc2dsstats.razorlib/images/stetmann-min.png");
        background-repeat: no-repeat;
        height: 30px;
        width: 30px;
        background-size: cover;
    }

    .preload-stukov {
        background-image: url("/_content/sc2dsstats.razorlib/images/stukov-min.png");
        background-repeat: no-repeat;
        height: 30px;
        width: 30px;
        background-size: cover;
    }

    .preload-swann {
        background-image: url("/_content/sc2dsstats.razorlib/images/swann-min.png");
        background-repeat: no-repeat;
        height: 30px;
        width: 30px;
        background-size: cover;
    }

    .preload-tychus {
        background-image: url("/_content/sc2dsstats.razorlib/images/tychus-min.png");
        background-repeat: no-repeat;
        height: 30px;
        width: 30px;
        background-size: cover;
    }

    .preload-vorazun {
        background-image: url("/_content/sc2dsstats.razorlib/images/vorazun-min.png");
        background-repeat: no-repeat;
        height: 30px;
        width: 30px;
        background-size: cover;
    }

    .preload-zagara {
        background-image: url("/_content/sc2dsstats.razorlib/images/zagara-min.png");
        background-repeat: no-repeat;
        height: 30px;
        width: 30px;
        background-size: cover;
    }

    .preload-zeratul {
        background-image: url("/_content/sc2dsstats.razorlib/images/zeratul-min.png");
        background-repeat: no-repeat;
        height: 30px;
        width: 30px;
        background-size: cover;
    }
    .ismobile {
    display: none;
    }

    .isdesktop {
        display: block;
    }

    @@media only screen and (max-width: 1275px) {
        .ismobile {
            display: block;
        }

        .isdesktop {
            display: none;
        }
}
</style>

<div>
    <CascadingValue Value="CrossTableRequest">
        <CrosstableRequestComponent OnRequestChanged="LoadData"></CrosstableRequestComponent>
    </CascadingValue>
</div>

@if (crossTableResponse == null)
{
    <div class="spinner-border text-danger" role="status">
        <span class="visually-hidden" style="font-size: 1rem;">Loading...</span>
    </div>
}
else
{
    <div class="mt-2">
        <h4 class="bg-warning border rounded p-2 text-primary" style="max-width: 500px;">Commander Team Results for 3v3</h4>
        @if (CrossTableRequest.Mode == "Commanders")
        {
            <p class="fw-bold">
                The team commanders can be at any position
            </p>
        }
    </div>
    <div class="row">
        <div class="col-auto mb-3">
            <div class="table-responsive tableFixHead">
                <table class="table table-dark table-hover w-auto">
                    <colgroup>
                        <col class="col">
                        <col class="col">
                        <col class="col">
                        <col class="col">
                    </colgroup>
                    <thead>
                        <CascadingValue Value="Orders">
                            <tr>
                                <th scope="col" class="pointer" @onclick="e => SortList(e, nameof(TeamCrossTable.Comp))">
                                    <SortArrow Property="@nameof(TeamCrossTable.Comp)">
                                        Team
                                    </SortArrow>
                                </th>
                                <th scope="col" class="pointer" @onclick="e => SortList(e, nameof(TeamCrossTable.Count))">
                                    <SortArrow Property="@nameof(TeamCrossTable.Count)">
                                        Replays
                                    </SortArrow>
                                </th>
                                <th scope="col" class="pointer" @onclick="e => SortList(e, nameof(TeamCrossTable.Wins))">
                                    <SortArrow Property="@nameof(TeamCrossTable.Wins)">
                                        Wins
                                    </SortArrow>
                                </th>
                                <th scope="col" class="pointer" @onclick="e => SortList(e, nameof(TeamCrossTable.Winrate))">
                                    <SortArrow Property="@nameof(TeamCrossTable.Winrate)">
                                        Winrate %
                                    </SortArrow>
                                </th>
                            </tr>
                        </CascadingValue>
                    </thead>
                    <tbody>
                        @foreach (var team in GetSortedList())
                        {
                            <tr class="pointer @(Interest == team ? "table-primary" : "")" @onclick="e => ShowCompTable(team)">
                                <td>
                                    <div class="d-flex">
                                        @foreach (var cmdr in team.Comp.Cmdrs)
                                        {
                                            <div class="preload-@(cmdr.ToString().ToLower())" style="width: 30px; height: 30px;"></div>
                                        }
                                    </div>
                                </td>
                                <td>@team.Count</td>
                                <td>@team.Wins</td>
                                <td>@team.Winrate.ToString("N2")</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
        @if (isLoading)
        {
            <div class="col-auto">
                <div class="spinner-border text-danger" role="status">
                    <span class="visually-hidden" style="font-size: 1rem;">Loading...</span>
                </div>
            </div>
        }
        @if (Interest != null)
        {
            <div id="interesttable" class="col-auto">
                <CrosstableDetails TeamCrossTables="Interest" TeamRequest="DetailTeamRequest" OnCloseRequested="CloseCompTable"></CrosstableDetails>
            </div>
            <div class="col-auto isdesktop ms-4 mt-3">
                <div style="max-height: 650px; overflow: auto;">
                    <table class="table table-sm table-dark">
                        <thead>
                            <tr>
                                <th>Replays</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var brr in buildResponseReplays.OrderByDescending(o => o.Gametime))
                            {
                                <tr class="pointer" style="text-decoration: underline;" @onclick="e => ShowReplay(brr.Hash)">
                                    <td class="@(brr.Hash == replayHash ? "table-primary" : "")">@brr.Gametime.ToString("yyyy-MM-dd")</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        }
    </div>
}
<div id="teamreplay" class="mt-2">
    @if (isReplayLoading)
    {
        <div class="spinner-border spinner-border-sm text-info ms-2" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    }
    @if (ReplayInterest != null)
    {
        <sc2dsstats.razorlib.Replay.ReplayComponent @ref="replayComponent"
                                                replayDto="ReplayInterest"
                                                OnCloseRequested="ReplayClose"
                                                ReplaysRequest="ReplaysToonIdRequest" />
    }
</div>

@code {
    [Parameter, EditorRequired]
    public CrossTableRequest CrossTableRequest { get; set; } = default!;

    private ReplayComponent? replayComponent;
    private CancellationTokenSource cts = new();
    private CrossTableResponse? crossTableResponse;
    private List<BuildResponseReplay> buildResponseReplays = new();

    private List<TableOrder> Orders = new List<TableOrder>()
    {
        new TableOrder() { Property = nameof(TeamCrossTable.Winrate), Ascending = false }
    };

    private bool isLoading;
    private bool isReplayLoading;
    private TeamCrossTable? Interest;
    private string? replayHash;
    private ReplayDto? ReplayInterest;

    protected override void OnInitialized()
    {
        _ = LoadData();
        base.OnInitialized();
    }

    private async Task LoadData()
    {
        isLoading = true;
        Interest = null;
        await InvokeAsync(() => StateHasChanged());
        crossTableResponse = await dataService.GetCrossTable(CrossTableRequest, cts.Token);
        isLoading = false;
        await InvokeAsync(() => StateHasChanged());
    }

    private async void ShowCompTable(TeamCrossTable interest)
    {
        Interest = interest;
        StateHasChanged();
        buildResponseReplays = await dataService.GetTeamReplays(new CrossTableReplaysRequest()
        {
            Mode = CrossTableRequest.Mode,
            TimePeriod = CrossTableRequest.TimePeriod,
            TeMaps = CrossTableRequest.TeMaps,
            TeamCmdrs = Interest.Comp
        }, cts.Token);
        await jsRuntime.InvokeVoidAsync("scrollToId", "interesttable");
        await InvokeAsync(() => StateHasChanged());
    }

    private async Task DetailTeamRequest(TeamCmdrs teamComp)
    {
        if (Interest == null)
        {
            return;
        }
        buildResponseReplays = await dataService.GetTeamReplays(new CrossTableReplaysRequest()
            {
                Mode = CrossTableRequest.Mode,
                TimePeriod = CrossTableRequest.TimePeriod,
                TeMaps = CrossTableRequest.TeMaps,
                TeamCmdrs = Interest.Comp,
                TeamCmdrsVs = teamComp
            }, cts.Token);
        await InvokeAsync(() => StateHasChanged());
    }

    private void CloseCompTable()
    {
        Interest = null;
        buildResponseReplays.Clear();
        StateHasChanged();
    }

    private async Task ShowReplay(string hash)
    {
        if (isReplayLoading)
            return;
        isReplayLoading = true;
        replayHash = hash;
        ReplayInterest = await dataService.GetReplay(hash);
        if (ReplayInterest != null)
        {
            replayComponent?.Init(ReplayInterest);
        }
        isReplayLoading = false;
        await InvokeAsync(() => StateHasChanged());
        await jsRuntime.InvokeVoidAsync("scrollToId", "teamreplay");
    }

    private void ReplayClose()
    {
        ReplayInterest = null;
        StateHasChanged();
    }

    private void ReplaysToonIdRequest(ReplaysToonIdRequest request)
    {
        NavigationManager.NavigateTo(
            NavigationManager.GetUriWithQueryParameters("replays",
                new Dictionary<string, object?>()
                {
                    { "Players", request.Name },
                    { "ToonId", request.ToonId },
                    { "ToonIdWith", request.ToonIdWith == 0 ? null : request.ToonIdWith },
                    { "ToonIdVs", request.ToonIdVs == 0 ? null : request.ToonIdVs },
                    { "ToonIdName", request.ToonIdName },
                }
            )
        );
    }

    private void SortList(MouseEventArgs e, string property)
    {
        var exOrder = Orders.FirstOrDefault(f => f.Property == property);
        if (e.ShiftKey)
        {
            if (exOrder == null)
            {
                Orders.Add(new TableOrder()
                    {
                        Property = property
                    });
            }
            else
            {
                exOrder.Ascending = !exOrder.Ascending;
            }
        }
        else
        {
            Orders.Clear();
            Orders.Add(new TableOrder()
                {
                    Property = property,
                    Ascending = exOrder == null ? false : !exOrder.Ascending
                });
        }
        StateHasChanged();
    }

    private List<TeamCrossTable> GetSortedList()
    {
        List<TeamCrossTable> items = new();

        if (crossTableResponse?.TeamCrossTables.Any() ?? false)
        {
            var itemsQ = crossTableResponse.TeamCrossTables.AsQueryable();

            foreach (var order in Orders)
            {
                if (order.Property == nameof(TeamCrossTable.Comp))
                {
                    if (order.Ascending)
                    {
                        itemsQ = itemsQ.OrderBy(o => String.Concat(o.Comp.Cmdrs));
                    }
                    else
                    {
                        itemsQ = itemsQ.OrderByDescending(o => String.Concat(o.Comp.Cmdrs));
                    }
                }
                else
                {
                    if (order.Ascending)
                    {
                        itemsQ = itemsQ.AppendOrderBy(order.Property);
                    }
                    else
                    {
                        itemsQ = itemsQ.AppendOrderByDescending(order.Property);
                    }
                }
            }

            items = itemsQ.ToList();
        }

        return items;
    }

    public void Dispose()
    {
        cts.Cancel();
        cts.Dispose();
    }
}
