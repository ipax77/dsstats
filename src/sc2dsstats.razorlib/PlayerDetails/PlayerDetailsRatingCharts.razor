@using System.Globalization;
@using pax.BlazorChartJs;
@using pax.dsstats.shared;

<div class="row">
    @foreach (var chartJsConfig in chartJsConfigs)
    {
        <div class="col-auto" style="min-width: 500px; width: 35vw;">
            <ChartComponent ChartJsConfig="chartJsConfig" OnEventTriggered="EventTriggered"></ChartComponent>
        </div>
    }
</div>
@code {
    List<ChartJsConfig> chartJsConfigs = new();
    private int chartSetups;
    private bool chartsSetup;
    private bool chartDataUp;

    [Parameter, EditorRequired]
    public List<PlayerRatingDetailDto> PlayerRatings { get; set; } = new();

    [Parameter]
    public EventCallback ChartsUp { get; set; }

    protected override void OnInitialized()
    {
        PlayerRatings
            .ForEach(f => chartJsConfigs.Add(GetLineChartConfig(f.RatingType)));
        chartDataUp = true;
        base.OnInitialized();
    }

    private void EventTriggered(ChartJsEvent e)
    {
        if (e is ChartJsInitEvent initEvent)
        {
            Interlocked.Increment(ref chartSetups);
            if (chartSetups >= PlayerRatings.Count)
            {
                chartsSetup = true;
            }
            if (chartsSetup && chartDataUp)
            {
                SetupCharts();
            }
        }
    }

    public void UpdateCharts(List<PlayerRatingDetailDto> playerRatings)
    {
        PlayerRatings = playerRatings;
        SetupCharts();
    }

    private void SetupCharts()
    {
        for (int i = 0; i < PlayerRatings.Count; i++)
        {
            var rating = PlayerRatings[i];

            if (String.IsNullOrEmpty(rating.MmrOverTime))
            {
                continue;
            }

            var chartJsConfig = chartJsConfigs[i];

            List<string> labels = new();
            List<double> ratings = new();
            List<int> counts = new();

            var ents = rating.MmrOverTime.Split('|');
            for (int j = 0; j < ents.Length; j++)
            {
                var entData = ents[j].Split(',');
                if (double.TryParse(entData[0], NumberStyles.AllowDecimalPoint, CultureInfo.InvariantCulture, out double mmr))
                {
                    ratings.Add(Math.Round(mmr, 1));
                    labels.Add(GetNiceLabel(entData[1]));
                    if (entData.Length == 3)
                    {
                        counts.Add(int.Parse(entData[2]));
                    }
                }
            }

            if (chartJsConfig.Data.Datasets.Any())
            {
                foreach (var dataset in chartJsConfig.Data.Datasets.ToArray())
                {
                    chartJsConfig.RemoveDataset(dataset);
                }
            }
            chartJsConfig.SetLabels(labels);
            chartJsConfig.AddDataset(GetLineDataset(ratings, rating.Player.Name, rating.RatingType));
            if (counts.Any())
            {
                chartJsConfig.AddDataset(GetCountDataset(counts));
            }
        }
    }

    private string GetNiceLabel(string dbLabel)
    {
        if (dbLabel.Length == 4)
        {
            var yearStr = dbLabel[..2];
            var monthStr = dbLabel[2..];

            if (int.TryParse(yearStr, out int year))
            {
                year += 2000;
                if (int.TryParse(monthStr, out int month))
                {
                    DateTime t = new DateTime(year, month, 1);
                    return t.ToString(@"yyyy-MM");
                }
            }
        }
        return dbLabel;
    }

    private LineDataset GetLineDataset(List<double> ratings, string name, RatingType ratingType)
    {
        return new()
            {
                Label = "Rating",
                Data = new List<object>(ratings.Cast<object>()),
                BackgroundColor = "#4E58A0",
                BorderColor = "#4E58A0",
                BorderWidth = 4,
                Fill = false,
                PointBackgroundColor = new IndexableOption<string>("blue"),
                PointBorderColor = new IndexableOption<string>("blue"),
                PointRadius = new IndexableOption<double>(1),
                PointBorderWidth = new IndexableOption<double>(1),
                PointHitRadius = new IndexableOption<double>(1),
                Tension = 0.4,
                YAxisID = "y"
            };
    }

    private LineDataset GetCountDataset(List<int> counts)
    {
        return new()
            {
                Label = "Games",
                Data = new List<object>(counts.Select(s => (object)s)),
                BackgroundColor = "grey",
                BorderColor = "grey",
                BorderWidth = 2,
                Fill = false,
                PointBackgroundColor = new IndexableOption<string>("grey"),
                PointBorderColor = new IndexableOption<string>("grey"),
                PointRadius = new IndexableOption<double>(1),
                PointBorderWidth = new IndexableOption<double>(1),
                PointHitRadius = new IndexableOption<double>(1),
                BorderDash = new List<double>() { 10, 5 },
                Tension = 0.2,
                YAxisID = "r"
            };
    }

    private ChartJsConfig GetLineChartConfig(RatingType ratingType)
    {
        return new()
            {
                Type = ChartType.line,
                Data = new ChartJsData()
                {
                    Labels = new List<string>()
                    {
                    },
                    Datasets = new List<ChartJsDataset>()
                    {
                    }
                },
                Options = new ChartJsOptions()
                {
                    Responsive = true,
                    Plugins = new Plugins()
                    {
                        ArbitraryLines = new List<ArbitraryLineConfig>(),
                        Title = new Title()
                        {
                            Display = true,
                            Text = new IndexableOption<string>($"{ratingType} development"),
                            Color = "#4E58A0",
                            Font = new Font()
                            {
                                Size = 16,
                            }
                        }
                    },
                    Interaction = new Interactions()
                    {
                        Intersect = false,
                        Mode = "index"
                    },
                    Scales = new ChartJsOptionsScales()
                    {
                        X = new LinearAxis()
                        {
                            Display = true,
                            Position = "bottom",
                            Ticks = new LinearAxisTick()
                            {
                                Color = "lightgrey",
                                Padding = 3,
                                AutoSkipPadding = 3,
                                BackdropColor = "rgba(255, 255, 255, 0.75)",
                                Align = "center",
                                CrossAlign = "near",
                                ShowLabelBackdrop = false,
                                BackdropPadding = new Padding(2)
                            },
                            Grid = new ChartJsGrid()
                            {
                                Display = true,
                                Color = "#6B6B6B",
                                LineWidth = 1,
                                DrawBorder = true,
                                DrawOnChartArea = true,
                                TickLength = 8,
                                TickWidth = 1,
                                TickColor = "#4E58A0",
                                Offset = false,
                                BorderWidth = 1,
                                BorderColor = "#6B6B6B"
                            }
                        },
                        Y = new LinearAxis()
                        {
                            Display = true,
                            Type = "linear",
                            Position = "left",
                            //Title = new Title()
                            //{
                            //    Display = true,
                            //    Text = new IndexableOption<string>("Rating"),
                            //    Color = "#4E58A0"
                            //},
                            Ticks = new LinearAxisTick()
                            {
                                Color = "#4E58A0",
                                Padding = 3,
                                AutoSkipPadding = 3,
                                BackdropColor = "rgba(255, 255, 255, 0.75)",
                                Align = "center",
                                CrossAlign = "near",
                                ShowLabelBackdrop = false,
                                BackdropPadding = new Padding(2)
                            },
                            Grid = new ChartJsGrid()
                            {
                                Display = true,
                                Color = "#6B6B6B",
                                LineWidth = 1,
                                DrawBorder = true,
                                DrawOnChartArea = true,
                                TickLength = 8,
                                TickWidth = 1,
                                TickColor = "#4E58A0",
                                Offset = false,
                                BorderWidth = 1,
                                BorderColor = "#6B6B6B",
                            }
                        },
                        R = new LinearAxis()
                        {
                            Display = true,
                            Type = "linear",
                            Position = "right",
                            //Title = new Title()
                            //{
                            //    Display = true,
                            //    Text = new IndexableOption<string>("Games"),
                            //    Color = "grey"
                            //},
                            Ticks = new LinearAxisTick()
                            {
                                Color = "grey",
                                Padding = 3,
                                Precision = 0,
                                AutoSkipPadding = 3,
                                BackdropColor = "rgba(255, 255, 255, 0.75)",
                                Align = "center",
                                CrossAlign = "near",
                                ShowLabelBackdrop = false,
                                BackdropPadding = new Padding(2)
                            },
                            Grid = new ChartJsGrid()
                            {
                                DrawOnChartArea = false
                            }
                        }
                    }
                }
            };
    }
}
