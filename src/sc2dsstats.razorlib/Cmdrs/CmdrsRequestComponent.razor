@using Blazored.Toast.Services;
@using Microsoft.AspNetCore.Components.Forms;
@using Microsoft.Extensions.Logging
@using Microsoft.JSInterop;
@using pax.dsstats.shared;
@using sc2dsstats.razorlib.Builds;
@inject IJSRuntime IJSRuntime
@inject IToastService toastService
@implements IDisposable

<EditForm EditContext="editContext">
    <div class="row">
        <div class="col-auto">
            <label class="form-label">
                Time Period
                <InputSelect class="form-select" @bind-Value="CmdrRequest.TimeSpan">
                    @foreach (TimePeriod time in Data.GetTimePeriods(Data.TimePeriodGet.NoNone))
                    {
                        <option value="@time">@Data.GetTimePeriodLongName(time)</option>
                    }
                </InputSelect>
            </label>
        </div>
        <div class="col-auto">
            <label class="form-label">
                Commander
                <InputSelect class="form-select" @bind-Value="CmdrRequest.Cmdr">
                    @foreach (Commander cmdr in Data.GetCommanders(Data.CmdrGet.NoNone))
                    {
                        <option value="@cmdr">@cmdr</option>
                    }
                </InputSelect>
            </label>
        </div>
        <div class="col-auto">
            <div class="form-check form-switch">
                <label class="form-check-label">
                    @(
                        IsMaui ? "Players" : "Uploaders"
                        )
                    <InputCheckbox class="form-check-input" @bind-Value="CmdrRequest.Uploaders">
                    </InputCheckbox>
                </label>
            </div>

        </div>
    </div>
</EditForm>

@code {
    [CascadingParameter]
    [EditorRequired]
    public CmdrRequest CmdrRequest { get; set; } = default!;

    [Parameter]
    public EventCallback OnRequestChanged { get; set; }

    [Parameter]
    public bool IsMaui { get; set; }

    EditContext editContext = null!;

    protected override void OnInitialized()
    {
        editContext = new EditContext(CmdrRequest);
        editContext.OnFieldChanged += FieldChanged;
        base.OnInitialized();
    }

    private void FieldChanged(object? sender, FieldChangedEventArgs e)
    {
        OnRequestChanged.InvokeAsync();
    }

    public void Dispose()
    {
        editContext.OnFieldChanged -= FieldChanged;
    }
}
