@using System.Globalization;
@using pax.dsstats.shared;
@using sc2dsstats.razorlib.Services;
@inject IDataService dataService
@implements IDisposable

<div>
    <CascadingValue Value="CmdrRequest">
        <CmdrsRequestComponent IsMaui="IsMaui" OnRequestChanged="LoadData"></CmdrsRequestComponent>
    </CascadingValue>
</div>
@if (cmdrResult == null)
{
    <div>
        <div class="spinner-border spinner-border-sm text-info ms-2" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else
{
    <div>
        <div class="d-flex bg-secondary p-2">
            @if (isLoading)
            {
                <div class="align-self-center me-2">
                    <div class="spinner-border spinner-border-sm text-info ms-2" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            }
            else
            {
                <div class="align-self-center me-4">
                </div>
            }
            <div class="align-self-center me-2 border p-1">
                <img src="@HelperService.GetImageSrc(cmdrResult.Cmdr)" alt="@cmdrResult.Cmdr" width="45" height="45" />
            </div>
            <div class="align-self-center">
                <h3 class="text-warning fw-bold">@cmdrResult.Cmdr Details</h3>
            </div>
            <div class="align-self-center">
                <span class="badge bg-primary ms-3" style="font-size: 1.2rem;"><span class="small">∅ Winrate</span><br /><span class="text-warning">@cmdrResult.Winrate</span></span>
            </div>
            <div class="align-self-center">
                <span class="badge bg-primary ms-3" style="font-size: 1.2rem;"><span class="small">Played</span><br /><span class="text-warning">@cmdrResult.Played.Per % (@HelperService.GetBigNumberString(cmdrResult.Played.Matchups))</span></span>
            </div>
            <div class="align-self-center">
                <span class="badge bg-primary ms-3" style="font-size: 1.2rem;"><span class="small">∅ Duration</span><br /><span class="text-warning">@TimeSpan.FromSeconds(cmdrResult.AvgDuration).ToString(@"mm\:ss")</span></span>
            </div>
        </div>

        <div class="mt-3" style="font-size: 1.3rem;">
            <p>
                @CmdrRequest.TimeSpan @cmdrResult.Cmdr plays best against
                <img src="@HelperService.GetImageSrc(cmdrResult.BestMatchup?.Cmdr ?? Commander.None)" alt="@cmdrResult.BestMatchup?.Cmdr" width="35" height="35" />
                @cmdrResult.BestMatchup?.Cmdr and they enjoy playing alongside
                <img src="@HelperService.GetImageSrc(cmdrResult.BestSynergy?.Cmdr ?? Commander.None)" alt="@cmdrResult.BestSynergy?.Cmdr" width="35" height="35" />
                @cmdrResult.BestSynergy?.Cmdr - their most successful playing time is at @cmdrResult.BestDuration.Dur
            </p>
            <p>
                What they don't like to see is
                <img src="@HelperService.GetImageSrc(cmdrResult.WorstMatchup?.Cmdr ?? Commander.None)" alt="@cmdrResult.WorstMatchup?.Cmdr" width="35" height="35" />
                @cmdrResult.WorstMatchup?.Cmdr on the opposing side as well as @(cmdrResult.WorstSynergy?.Cmdr == cmdrResult.Cmdr ? "another" : "")
                <img src="@HelperService.GetImageSrc(cmdrResult.WorstSynergy?.Cmdr ?? Commander.None)" alt="@cmdrResult.WorstSynergy?.Cmdr" width="35" height="35" />
                @cmdrResult.WorstSynergy?.Cmdr in their own ranks.
            </p>
            <p>

            </p>
        </div>

        <div class="row">
            <div class="col-auto mt-2">
                <CmdrsCard Cmdr="cmdrResult.BestMatchup?.Cmdr" Desc="Best Matchup">
                    WR @Math.Round(cmdrResult.BestMatchup?.Winrate ?? 0, 2) % (@HelperService.GetBigNumberString(cmdrResult.BestMatchup?.Matchups ?? 0))
                </CmdrsCard>
            </div>
            <div class="col-auto mt-2">
                <CmdrsCard Cmdr="cmdrResult.WorstMatchup?.Cmdr" Desc="Worst Matchup">
                    WR @Math.Round(cmdrResult.WorstMatchup?.Winrate ?? 0, 2) % (@HelperService.GetBigNumberString(cmdrResult.WorstMatchup?.Matchups ?? 0))
                </CmdrsCard>
            </div>
            <div class="col-auto mt-2">
                <CmdrsCard Cmdr="cmdrResult.BestSynergy?.Cmdr" Desc="Best Synergy">
                    WR @Math.Round(cmdrResult.BestSynergy?.Wr ?? 0, 2) %
                </CmdrsCard>
            </div>
            <div class="col-auto mt-2">
                <CmdrsCard Cmdr="cmdrResult.WorstSynergy?.Cmdr" Desc="Worst Synergy">
                    WR @Math.Round(cmdrResult.WorstSynergy?.Wr ?? 0, 2) %
                </CmdrsCard>
            </div>
            <div class="col-auto mt-2">
                <CmdrsCard Cmdr="@cmdrResult.Cmdr" Desc="Best Duration">
                    @cmdrResult.BestDuration.Dur (@cmdrResult.BestDuration.Wr %)
                </CmdrsCard>
            </div>
        </div>

        @if (cmdrResult.TopPlayers.Any())
        {
            <div class="col-auto mt-2" style="max-width: 400px;">
                <h4><span class="text-warning">@cmdrResult.Cmdr</span> Best Players</h4>
                <table class="table table-sm table-dark table-hover w-auto">
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Games</th>
                            <th>Winrate</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var player in cmdrResult.TopPlayers.OrderByDescending(o => o.Wins * 100.0f / o.Count))
                        {
                            <tr>
                                <td><a href="@($"/builds?Interest={cmdrResult.Cmdr}&PlayerNames={player.ToonId}|{player.Name}")">@player.Name</a></td>
                                <td>@player.Count</td>
                                <td>@Math.Round(player.Wins * 100.0 / player.Count, 2) %</td>
                            </tr>
                        }
                    </tbody>
                </table>

            </div>
        }
    </div>
}


@code {
    [Parameter, EditorRequired]
    public CmdrRequest CmdrRequest { get; set; } = default!;

    [Parameter]
    public bool IsMaui { get; set; }

    private CmdrResult? cmdrResult;
    private CancellationTokenSource cts = new();
    private bool isLoading;

    protected override void OnInitialized()
    {
        _ = LoadData();
        base.OnInitialized();
    }

    private async Task LoadData()
    {
        if (isLoading)
        {
            return;
        }
        isLoading = true;
        await InvokeAsync(() => StateHasChanged());
        cmdrResult = await dataService.GetCmdrInfo(CmdrRequest);
        isLoading = false;
        await InvokeAsync(() => StateHasChanged());
    }

    public void Dispose()
    {
        cts.Cancel();
        cts.Dispose();
    }
}
