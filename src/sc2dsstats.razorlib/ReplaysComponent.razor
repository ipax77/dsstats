@using Microsoft.AspNetCore.Components.Web.Virtualization
@using Microsoft.Extensions.Logging
@using Microsoft.JSInterop
@using System.Globalization;
@using pax.dsstats.shared
@using sc2dsstats.razorlib.Services
@inject IDataService dataService
@inject IJSRuntime JSRuntime
@inject ILogger<ReplaysComponent> logger
@implements IDisposable

<div class="@(replayDto == null ? "" : "visually-hidden")">
    <CascadingValue Value="replaysRequest">
        <ReplaysRequestComponent OnFieldChanged="Reload" WithMmrChange="true"></ReplaysRequestComponent>
    </CascadingValue>
    <div class="d-flex" style="max-width: 850px;">
        <p class="ms-auto">#@ReplaysCount</p>
        <span class="oi oi-reload text-primary pointer ms-2" style="font-size: 1rem;" @onclick="Reload"></span>
        @if (replayLoading)
        {
            <div class="spinner-border spinner-border-sm text-info ms-2" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        }
    </div>
    <div class="table-responsive tableFixHead">
        <table id="replaylist" class="table table-dark table-hover w-auto">
            <colgroup>
                <col class="col">
                <col class="col">
                <col class="col">
                <col class="col">
                <col class="col">
                <col class="col">
                @if (replaysRequest.WithMmrChange)
                {
                    <col class="col">
                }
            </colgroup>
            <thead class="user-select-none">
                <CascadingValue Value="replaysRequest.Orders">
                    <tr>
                        @if (replaysRequest.WithMmrChange)
                        {
                            <th scope="col" style="z-index: 1;">Mmr</th>
                        }
                        <th scope="col" class="pointer" @onclick="@(e => SortList(e, "GameTime"))">
                            <SortArrow Property="GameTime">
                                GameTime
                            </SortArrow>
                        </th>
                        <th scope="col" class="pointer" @onclick="@(e => SortList(e, "Duration"))">
                            <SortArrow Property="Duration">
                                Duration
                            </SortArrow>
                        </th>
                        <th scope="col" class="pointer" @onclick="@(e => SortList(e, "CommandersTeam1"))">
                            <SortArrow Property="CommandersTeam1">
                                Team1
                            </SortArrow>
                        </th>
                        <th scope="col" class="pointer" @onclick="@(e => SortList(e, "CommandersTeam2"))">
                            <SortArrow Property="CommandersTeam2">
                                Team2
                            </SortArrow>
                        </th>
                        <th scope="col" class="pointer" @onclick="@(e => SortList(e, "WinnerTeam"))">
                            <SortArrow Property="WinnerTeam">
                                Winner
                            </SortArrow>
                        </th>
                        <th scope="col" class="pointer" @onclick="@(e => SortList(e, "MaxLeaver"))">
                            <SortArrow Property="MaxLeaver">
                                MaxLeaver
                            </SortArrow>
                        </th>
                        <th scope="col" class="pointer" @onclick="@(e => SortList(e, "GameMode"))">
                            <SortArrow Property="GameMode">
                                GameMode
                            </SortArrow>
                        </th>
                    </tr>
                </CascadingValue>
            </thead>
            <tbody>
                @if (ReplaysCount > 0)
                {
                    <Virtualize @ref="virtualizeComponent" Context="replay" ItemsProvider="LoadReplays" ItemSize="47">
                        <ItemContent>
                            <tr height="47px" class="pointer @GetRowCssColorClass(replay)" @onclick="e => ShowReplay(replay.ReplayHash)">
                                @if (replaysRequest.WithMmrChange)
                                {
                                    <td>
                                        @if (replay.MmrChange != 0)
                                        {
                                            <div class="d-flex justify-content-between" style="width: 75px;">
                                                <div><span class="oi @(replay.MmrChange < 0 ? "oi-arrow-bottom text-danger" : "oi-arrow-top text-success") d-block">@replay.MmrChange.ToString("N1", CultureInfo.InvariantCulture)</span></div>
                                                <div class="preload-@(replay.Commander.ToString().ToLower())" style="width: 30px; height: 30px;"></div>
                                            </div>
                                        }
                                    </td>
                                }
                                <td>@replay.GameTime.ToString(@"yyyy-MM-dd")</td>
                                <td>@TimeSpan.FromSeconds(replay.Duration).ToString(@"hh\:mm\:ss")</td>
                                <td>
                                    <div class="d-flex">
                                        @foreach (var cmdr in replay.Cmdrs1)
                                        {
                                            <div class="preload-@(cmdr.ToString().ToLower())" style="width: 30px; height: 30px;"></div>
                                        }
                                    </div>
                                </td>
                                <td>

                                    <div class="d-flex">
                                        @foreach (var cmdr in replay.Cmdrs2)
                                        {
                                            <div class="preload-@(cmdr.ToString().ToLower())" style="width: 30px; height: 30px;"></div>
                                        }
                                    </div>
                                </td>
                                <td>@replay.WinnerTeam</td>
                                <td>@TimeSpan.FromSeconds(replay.MaxLeaver).ToString(@"mm\:ss")</td>
                                <td><span style="display:block; width: 200px;">@replay.GameMode</span></td>
                            </tr>
                        </ItemContent>
                        <Placeholder>
                            <tr height="47px"><td colspan="5">Loading ...</td></tr>
                        </Placeholder>
                    </Virtualize>
                }
            </tbody>
        </table>
    </div>
</div>

@if (replayDto != null)
{
    @*<ReplayComponent @ref="replayComponent" replayDto="replayDto" OnCloseRequested="OnReplayClose"></ReplayComponent>*@
    <sc2dsstats.razorlib.Replay.ReplayComponent 
        @ref="replayComponent"
        replayDto="replayDto"
        OnCloseRequested="OnReplayClose" 
        ReplaysRequest="ReplaysToonIdRequest" />
}

@code {

    private int ReplaysCount = 0;

    [Parameter]
    [EditorRequired]
    public ReplaysRequest replaysRequest { get; set; } = default!;

    [Parameter]
    public bool ShowImages { get; set; } = true;

    [Parameter]
    public EventCallback<ReplaysRequest> OnRequestChanged { get; set; }

    private ReplayDto? replayDto = null;

    private Virtualize<ReplayListDto>? virtualizeComponent;
    SemaphoreSlim semaphoreSlim = new SemaphoreSlim(1, 1);
    CancellationTokenSource cts = new();
    Replay.ReplayComponent? replayComponent;

    private bool replayLoading;
    private string? lastVisitHash;
    private bool fromServer;

    private bool withMmrChange;

    protected override async Task OnInitializedAsync()
    {
        dataService.SetFromServer(false);
        await SetCount(replaysRequest);

        withMmrChange = replaysRequest.WithMmrChange;
        if (replaysRequest.ReplayHash != null)
        {
            await ShowReplay(replaysRequest.ReplayHash);
        }
    }

    public async Task ReInit(ReplaysRequest reRequest)
    {
        logger.LogInformation($"reinit");
        replaysRequest = reRequest;
        if (replaysRequest.ReplayHash != null)
        {
            replayLoading = true;
            await InvokeAsync(() => StateHasChanged());

            replayDto = await dataService.GetReplay(replaysRequest.ReplayHash);
            lastVisitHash = replayDto?.ReplayHash;
            if (replayDto != null)
            {
                replayComponent?.Init(replayDto);
            }
            replayLoading = false;
            await InvokeAsync(() => StateHasChanged());
        }
        else
        {
            replayDto = null;
            await semaphoreSlim.WaitAsync();
            try
            {
                fromServer = dataService.GetFromServer();
                await SetCount(replaysRequest);
                if (virtualizeComponent != null)
                {
                    await InvokeAsync(async () =>
                   {
                       await virtualizeComponent.RefreshDataAsync();
                       StateHasChanged();
                   });
                }
            }
            finally
            {
                semaphoreSlim.Release();
            }
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            JSRuntime.InvokeVoidAsync("enableTooltips");
        }
        base.OnAfterRender(firstRender);
    }

    private async Task Reload()
    {
        await semaphoreSlim.WaitAsync();
        try
        {
            fromServer = dataService.GetFromServer();
            await OnRequestChanged.InvokeAsync(replaysRequest);
            await SetCount(replaysRequest);
            if (virtualizeComponent != null)
            {
                await InvokeAsync(async () =>
               {
                   await virtualizeComponent.RefreshDataAsync();
                   StateHasChanged();
               });
            }
        }
        finally
        {
            semaphoreSlim.Release();
        }
    }

    private async Task SetCount(ReplaysRequest request)
    {
        replayLoading = true;
        await InvokeAsync(() => StateHasChanged());
        ReplaysCount = await dataService.GetReplaysCount(request, cts.Token);
        replayLoading = false;
        await InvokeAsync(() => StateHasChanged());
    }

    private async ValueTask<ItemsProviderResult<ReplayListDto>> LoadReplays(ItemsProviderRequest prRequest)
    {
        replaysRequest.Skip = prRequest.StartIndex;
        replaysRequest.Take = Math.Min(prRequest.Count, ReplaysCount - prRequest.StartIndex);

        var replays = await dataService.GetReplays(replaysRequest, prRequest.CancellationToken);

        return new ItemsProviderResult<ReplayListDto>(replays ?? new List<ReplayListDto>(), ReplaysCount);
    }

    private async Task SortList(MouseEventArgs e, string property)
    {
        var exOrder = replaysRequest.Orders.FirstOrDefault(f => f.Property == property);
        if (e.ShiftKey)
        {
            if (exOrder == null)
            {
                replaysRequest.Orders.Add(new TableOrder()
                    {
                        Property = property
                    });
            }
            else
            {
                exOrder.Ascending = !exOrder.Ascending;
            }
        }
        else
        {
            replaysRequest.Orders.Clear();
            replaysRequest.Orders.Add(new TableOrder()
                {
                    Property = property,
                    Ascending = exOrder == null ? false : !exOrder.Ascending
                });
        }
        await Reload();
    }

    public async Task ShowReplay(string replayHash)
    {
        replayLoading = true;
        await InvokeAsync(() => StateHasChanged());
        replaysRequest.ReplayHash = replayHash;
        await OnRequestChanged.InvokeAsync(replaysRequest);

        replayDto = await dataService.GetReplay(replayHash);
        lastVisitHash = replayDto?.ReplayHash;
        if (replayDto != null)
        {
            replayComponent?.Init(replayDto);
        }
        replayLoading = false;
        await InvokeAsync(() => StateHasChanged());
    }

    private async void OnReplayClose()
    {
        dataService.SetFromServer(fromServer);
        replaysRequest.ReplayHash = null;
        await OnRequestChanged.InvokeAsync(replaysRequest);

        replayDto = null;
        await InvokeAsync(() => StateHasChanged());
    }

    private void ReplaysToonIdRequest(ReplaysToonIdRequest request)
    {
        OnReplayClose();
        replaysRequest.SearchPlayers = request.Name;
        replaysRequest.ToonId = request.ToonId;
        replaysRequest.ToonIdWith = request.ToonIdWith;
        replaysRequest.ToonIdVs = request.ToonIdVs;
        replaysRequest.ToonIdName = request.ToonIdName;
        _ = Reload();
    }

    private string GetRowCssColorClass(ReplayListDto replay)
    {
        if (lastVisitHash == replay.ReplayHash)
        {
            return "table-primary";
        }
        else if (replay.PlayerResult == PlayerResult.None)
        {
            return "";
        }
        else if (replay.PlayerResult == PlayerResult.Win)
        {
            return "text-success";
        }
        else if (replay.PlayerResult == PlayerResult.Los)
        {
            return "text-danger";
        }
        return "";
    }

    public void Dispose()
    {
        cts.Dispose();
        semaphoreSlim.Dispose();
    }
}
