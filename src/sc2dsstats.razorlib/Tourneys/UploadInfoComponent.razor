@using Microsoft.AspNetCore.Components.Forms
@using pax.dsstats.shared
@inject IDataService dataService

@if (!tournaments.Any() || !tournaments.Any(a => a.WinnerTeam == null))
{
    <div>
        Currently there are no open tournaments to upload replays to.
    </div>
}
else
{
    <div>
        <EditForm EditContext="editContext" OnInvalidSubmit="InvalidSubmit" OnValidSubmit="ValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group col-2">
                <label for="groupSelect" class="form-label mt-4">Event</label>
                <InputSelect class="form-select" id="groupSelect" @bind-Value="uploadInfo.Event">
                    <option value="">Event select ..</option>
                    @foreach (var tournament in tournaments.Where(x => x.WinnerTeam == null))
                    {
                        <option value="@tournament.Name">@tournament.Name</option>
                    }
                </InputSelect>
            </div>

            <div class="form-group col-2">
                <label for="groupSelect" class="form-label mt-4">Round</label>
                <InputSelect class="form-select" id="groupSelect" @bind-Value="uploadInfo.Round">
                    <option value="">Round select ..</option>
                    <option value="None">None</option>
                    <option value="GroupA">GroupA</option>
                    <option value="GroupB">GroupB</option>
                    <option value="GroupC">GroupC</option>
                    <option value="GroupD">GroupD</option>
                    <option value="Ro32">Ro32</option>
                    <option value="Ro16">Ro16</option>
                    <option value="Ro8">Ro8</option>
                    <option value="Ro4">Ro4</option>
                    <option value="Ro2">Finals</option>
                </InputSelect>
            </div>

            <div class="d-flex justifly-content-start">
                <div class="form-group col-4">
                    <label class="form-label w-100">
                        WinnerTeam:
                        <InputText class="form-control" @bind-Value="uploadInfo.Team1" />

                    </label>
                </div>
                <div class="form-group col-4">
                    <label class="form-label w-100">
                        RunnerTeam:
                        <InputText class="form-control" @bind-Value="uploadInfo.Team2" />
                    </label>
                </div>
            </div>

            <div class="d-flex">
                <div class="form-group">
                    <label class="form-label">
                        Ban1:
                        <InputSelect class="form-select" @bind-Value="uploadInfo.Ban1">
                            <option value="">Ban1 ...</option>
                            @foreach (string cmdr in Enum.GetNames(typeof(Commander)))
                            {
                                <option value="@cmdr">@cmdr</option>
                            }
                        </InputSelect>
                    </label>
                </div>
                <div class="form-group">
                    <label class="form-label">
                        Ban2:
                        <InputSelect class="form-select" @bind-Value="uploadInfo.Ban2">
                            <option value="">Ban2 ...</option>
                            @foreach (string cmdr in Enum.GetNames(typeof(Commander)))
                            {
                                <option value="@cmdr">@cmdr</option>
                            }
                        </InputSelect>
                    </label>
                </div>
            </div>

            <div>
                <button type="submit" class="btn btn-primary">Send</button>
            </div>
        </EditForm>
    </div>
}

@code {

    [Parameter]
    public EventCallback<UploadInfo> OnValidInfoSubmit { get; set; }

    UploadInfo uploadInfo = new UploadInfo();
    EditContext editContext = null!;

    private List<EventListDto> tournaments = new();

    protected override async Task OnInitializedAsync()
    {
        editContext = new EditContext(uploadInfo);
        tournaments = await dataService.GetTournaments();
        base.OnInitialized();
    }

    private void ValidSubmit()
    {
        OnValidInfoSubmit.InvokeAsync(uploadInfo);
    }

    private void InvalidSubmit()
    {

    }
}
