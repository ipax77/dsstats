@using Microsoft.AspNetCore.Components.Web.Virtualization;
@using Microsoft.AspNetCore.Components.Forms
@using System.Globalization;
@using pax.dsstats.shared
@using sc2dsstats.razorlib.Services
@inject IDataService dataService
@inject NavigationManager NavigationManager
@implements IDisposable

<style>
    .tableFixHead {
        overflow-y: auto;
        overflow-x: auto;
        height: 800px;
    }

        .tableFixHead thead th {
            position: sticky;
            top: 0;
        }

    table {
        border-collapse: collapse;
        width: 100%;
    }

    th, td {
        padding: 8px 16px;
        white-space: nowrap;
    }

    th {
        background: purple;
    }

    .tablebackground {
        position: absolute;
        z-index: -1;
        opacity: 0.15;
    }
</style>

<div class="@(Interest == null ? "" : "visually-hidden")">
    <div class="d-flex">
        <EditForm EditContext="editContext">
            <div class="row">
                <div class="col-auto">
                    <label class="form-label">
                        Search:
                        <InputText class="form-control" @bind-Value="RatingsRequest.Search"></InputText>
                    </label>
                </div>
                <div class="col-auto">
                    <label class="form-label">
                        Rating Type
                        <span class="oi oi-info pointer ms-2" onclick="window.location.href='https://github.com/ipax77/dsstats/wiki/Mmr-calculation#rating-types'"></span>
                        <InputSelect class="form-select" @bind-Value="RatingsRequest.Type">
                            @foreach (RatingType ratingType in Enum.GetValues(typeof(RatingType)))
                            {
                                @if (ratingType == RatingType.None)
                                {
                                    continue;
                                }
                                <option value="@ratingType">@Data.GetRatingTypeLongName(ratingType)</option>
                            }
                        </InputSelect>
                    </label>
                </div>
                <div class="col-auto">
                    <label class="form-label">
                        Change
                        <InputSelect class="form-select" @bind-Value="RatingsRequest.TimePeriod">
                            <option value="@RatingChangeTimePeriod.Past24h">@RatingChangeTimePeriod.Past24h</option>
                            <option value="@RatingChangeTimePeriod.Past10Days">@RatingChangeTimePeriod.Past10Days</option>
                            <option value="@RatingChangeTimePeriod.Past30Days">@RatingChangeTimePeriod.Past30Days</option>
                        </InputSelect>
                    </label>
                </div>
                @if (Data.IsMaui)
                {
                    <div class="col-auto form-check form-switch align-self-center me-2">
                        <label class="form-check-label">
                            Online Ratings
                            <input type="checkbox" class="form-check-input" @onchange="FromServerChange">
                            </input>
                        </label>
                    </div>
                }
                else
                {
                    <div class="col-auto form-check form-switch align-self-center me-2">
                        <label class="form-check-label">
                            Uploaders
                            <InputCheckbox class="form-check-input" @bind-Value="RatingsRequest.Uploaders"></InputCheckbox>
                        </label>
                    </div>
                }
            </div>
        </EditForm>
        <div class="align-self-center ms-2">
            <span class="oi oi-x text-danger pointer" @onclick="ResetSearch"></span>
        </div>
        <div class="ms-3 align-self-center">
            <a href="https://github.com/ipax77/dsstats/wiki/Mmr-calculation"><span class="oi oi-info me-1"></span>Calculation</a>
        </div>
    </div>
    <div class="row">
        <div class="col-auto">
            <div class="d-flex" style="max-width: 750px;">
                <p class="ms-auto p-0 m-0"><small class="text-primary">min 20 games</small> #@ratingsCount</p>
            </div>
            <div class="tableFixHead">
                <table class="table table-dark table-hover table-striped">
                    <colgroup>
                        <col class="col">
                        <col class="col">
                        <col class="col">
                        <col class="col">
                        <col class="col">
                        <col class="col">
                        <col class="col">
                        <col class="col">
                        <col class="col">
                        <col class="col">
                    </colgroup>
                    <thead style="user-select: none;">
                        <CascadingValue Value="RatingsRequest.Orders">
                            <tr>
                                <th scope="col" class="pointer" @onclick="@(e => SortList(e, "Pos"))">
                                    <SortArrow Property="Pos">
                                        #
                                    </SortArrow>
                                </th>
                                <th scope="col" class="pointer" @onclick="@(e => SortList(e, "Player.RegionId"))">
                                    <SortArrow Property="Player.RegionId">
                                        <div class="text-center">
                                            <span class="oi oi-globe rounded-circle bg-primary p-1"></span>
                                        </div>
                                    </SortArrow>
                                </th>
                                <th scope="col" class="pointer text-info" @onclick="@(e => SortList(e, "Player.Name"))">
                                    <SortArrow Property="Player.Name">
                                        Name
                                    </SortArrow>
                                </th>
                                <th scope="col" class="pointer text-info" style="width: 90px;" @onclick="@(e => SortList(e, "Main"))">
                                    <SortArrow Property="Main">
                                        Main
                                    </SortArrow>
                                </th>
                                <th scope="col" class="pointer text-info" @onclick="@(e => SortList(e, "MainCount"))">
                                    <SortArrow Property="MainCount">
                                        Main %
                                    </SortArrow>
                                </th>
                                <th scope="col" class="pointer" @onclick="@(e => SortList(e, "Games"))">
                                    <SortArrow Property="Games">
                                        Games
                                    </SortArrow>
                                </th>
                                <th scope="col" class="pointer text-warning" @onclick="@(e => SortList(e, "Rating"))">
                                    <SortArrow Property="Rating">
                                        Rating
                                    </SortArrow>
                                </th>
                                <th scope="col" class="pointer" style="z-index: 1;" @onclick="@(e => SortList(e, ratingChangeSort))">
                                    <SortArrow Property="@ratingChangeSort">
                                        Change
                                    </SortArrow>
                                </th>
                                <th scope="col" class="pointer" @onclick="@(e => SortList(e, "Wins"))">
                                    <SortArrow Property="Wins">
                                        Winrate
                                    </SortArrow>
                                </th>
                                <th scope="col" class="pointer" @onclick="@(e => SortList(e, "Mvp"))">
                                    <SortArrow Property="Mvp">
                                        Mvp
                                    </SortArrow>
                                </th>
                            </tr>
                        </CascadingValue>
                    </thead>
                    <tbody>
                        @if (ratingsCount > 0)
                        {
                            <Virtualize @ref="virtualize" Context="rating" ItemsProvider="LoadRatings" OverscanCount="10" ItemSize="41">
                                <ItemContent>
                                    <tr height="41px;" class="pointer" @onclick="e => LoadPlayerChart(rating.Player)">
                                        <td>
                                            <span class="text-truncate text-warning" style="display: block; width: 40px;">@rating.Pos</span>
                                        </td>
                                        <td>
                                            <span>@Data.GetRegionString(rating.Player.RegionId)</span>
                                        </td>
                                        <td><span class="text-truncate text-info" style="display: block; width: 130px;">@rating.Player.Name</span></td>
                                        <td>@(rating.Games == 0 || rating.MainCount * 100.0 / rating.Games < 10.5 ? "Random" : rating.Main.ToString())</td>
                                        <td>@HelperService.GetPercentageString(rating.MainCount, rating.Games)</td>
                                        <td class="border-start">@rating.Games</td>
                                        <td class="text-warning">@rating.Rating.ToString("N2", CultureInfo.InvariantCulture)</td>
                                        <td>
                                            @if (rating.PlayerRatingChange != null)
                                            {
                                                var ratingChange = RatingsRequest.TimePeriod switch
                                                {
                                                    RatingChangeTimePeriod.Past24h => rating.PlayerRatingChange.Change24h,
                                                    RatingChangeTimePeriod.Past10Days => rating.PlayerRatingChange.Change10d,
                                                    _ => rating.PlayerRatingChange.Change30d
                                                };
                                                <span class="@(ratingChange >= 0 ? "oi oi-arrow-top text-success" : "oi oi-arrow-bottom text-danger")">
                                                    @ratingChange.ToString("N2", CultureInfo.InvariantCulture)
                                                </span>
                                            }
                                        </td>
                                        <td>@HelperService.GetPercentageString(rating.Wins, rating.Games)</td>
                                        <td>@HelperService.GetPercentageString(rating.Mvp, rating.Games)</td>
                                    </tr>
                                </ItemContent>
                                <Placeholder>
                                    <tr height="41px"><td colspan="12">Loading ...</td></tr>
                                </Placeholder>
                            </Virtualize>
                        }
                    </tbody>
                </table>
            </div>
        </div>
        <div class="col-auto" style="min-width: 600px; width: 32vw; min-height: 500px; height: calc(32vw * 0.5);">
            <div class="mt-2">
                <button class="btn btn-sm btn-outline-light"
                        type="button"
                        data-bs-toggle="collapse"
                        data-bs-target="#Distribution"
                        aria-expanded="false"
                        aria-controls="Distribution"
                        @onclick="e => showDistribution = !showDistribution">
                    <span class="oi @(showDistribution ? "oi-caret-bottom" : "oi-caret-top")"></span>
                    Distribution
                </button>
            </div>
            <div class="collapse mt-2 w-100 h-100" id="Distribution">
                @if (showDistribution)
                {
                    <sc2dsstats.razorlib.Distribution.DistributionComponent Request="distributionRequest" />
                }
            </div>
        </div>
    </div>
</div>

@if (Interest != null)
{
    <sc2dsstats.razorlib.PlayerDetailsNg.PlayerDetailsSummary RequestNames="Interest"
                                                            OnCloseRequested="DetailsClose"
                                                            RatingType="RatingsRequest.Type"
                                                            ReplaysRequest="ReplaysToonIdRequest" />
}


@code {
    [Parameter]
    [EditorRequired]
    public RatingsRequest RatingsRequest { get; set; } = default!;

    [Parameter]
    public EventCallback OnRatingsChanged { get; set; }

    private int ratingsCount;
    private Virtualize<PlayerRatingDto>? virtualize;
    private CancellationTokenSource cts = new();

    private EditContext editContext = null!;

    private RequestNames? Interest;

    private bool showDistribution;
    private DistributionRequest distributionRequest = new()
        {
            RatingType = RatingType.Cmdr
        };

    private string ratingChangeSort => RatingsRequest.TimePeriod switch
    {
        RatingChangeTimePeriod.Past24h => "PlayerRatingChange.Change24h",
        RatingChangeTimePeriod.Past10Days => "PlayerRatingChange.Change10d",
        _ => "PlayerRatingChange.Change30d"
    };

    protected override void OnInitialized()
    {
        dataService.SetFromServer(false);
        _ = SetRatingsCount();
        editContext = new EditContext(RatingsRequest);
        editContext.OnFieldChanged += FieldChanged;
        _ = LoadInitialPlayerInfo();

        base.OnInitialized();
    }

    private void FieldChanged(object? sender, FieldChangedEventArgs e)
    {
        if (e.FieldIdentifier.FieldName == "TimePeriod")
        {
            if (RatingsRequest.Orders.Any(a => a.Property.StartsWith("PlayerRatingChange.")))
            {
                RatingsRequest.Orders
                    .Where(x => x.Property.StartsWith("PlayerRatingChange."))
                    .ToList()
                    .ForEach(f => f.Property = ratingChangeSort);
                _ = Reload();
            }
        }
        else
        {
            _ = Reload();
        }
        OnRatingsChanged.InvokeAsync();
    }

    private void FromServerChange(ChangeEventArgs e)
    {
        if (e.Value is bool value)
        {
            dataService.SetFromServer(value);
            _ = Reload();
        }
    }

    private async Task SetRatingsCount()
    {
        ratingsCount = await dataService.GetRatingsCount(RatingsRequest, cts.Token);
        await InvokeAsync(() => StateHasChanged());
    }

    public async Task Reload()
    {
        await SetRatingsCount();
        if (virtualize != null)
        {
            await virtualize.RefreshDataAsync();
        }
        await InvokeAsync(() => StateHasChanged());
    }

    private async Task SortList(MouseEventArgs e, string property)
    {
        var exOrder = RatingsRequest.Orders.FirstOrDefault(f => f.Property == property);
        if (e.ShiftKey)
        {
            if (exOrder == null)
            {
                RatingsRequest.Orders.Add(new TableOrder()
                    {
                        Property = property
                    });
            }
            else
            {
                exOrder.Ascending = !exOrder.Ascending;
            }
        }
        else
        {
            RatingsRequest.Orders.Clear();
            RatingsRequest.Orders.Add(new TableOrder()
                {
                    Property = property,
                    Ascending = exOrder == null ? false : !exOrder.Ascending
                });
        }
        await Reload();
    }

    private async ValueTask<ItemsProviderResult<PlayerRatingDto>> LoadRatings(ItemsProviderRequest request)
    {
        var numRatings = Math.Min(request.Count, ratingsCount - request.StartIndex);
        RatingsRequest.Skip = request.StartIndex;
        RatingsRequest.Take = numRatings;

        if (RatingsRequest.Skip < 0 || RatingsRequest.Take < 0)
        {
            return new ItemsProviderResult<PlayerRatingDto>();
        }
        var result = await dataService.GetRatings(RatingsRequest, request.CancellationToken);
        return new ItemsProviderResult<PlayerRatingDto>(result.Players, ratingsCount);
    }

    private void DetailsClose()
    {
        Interest = null;
        RatingsRequest.ToonId = null;
        OnRatingsChanged.InvokeAsync();
        StateHasChanged();
    }

    private void ReplaysToonIdRequest(ReplaysToonIdRequest request)
    {
        NavigationManager.NavigateTo(
            NavigationManager.GetUriWithQueryParameters("replays",
                new Dictionary<string, object?>()
                            {
                    { "Players", request.Name },
                    { "ToonId", request.ToonId },
                    { "ToonIdWith", request.ToonIdWith == 0 ? null : request.ToonIdWith },
                    { "ToonIdVs", request.ToonIdVs == 0 ? null : request.ToonIdVs },
                    { "ToonIdName", request.ToonIdName },
                            }
            )
        );
    }

    private async Task LoadInitialPlayerInfo()
    {
        if (RatingsRequest.ToonId != null && RatingsRequest.ToonId > 0)
        {
            Interest = new("", RatingsRequest.ToonId.Value, RatingsRequest.RegionId, RatingsRequest.RealmId);
            await InvokeAsync(() => StateHasChanged());
        }
    }

    private void LoadPlayerChart(PlayerRatingPlayerDto playerDto)
    {
        Interest = new(playerDto.Name, playerDto.ToonId, playerDto.RegionId, playerDto.RealmId);
        RatingsRequest.ToonId = playerDto.ToonId;
        StateHasChanged();
        OnRatingsChanged.InvokeAsync();
    }

    public enum DistributionRequestEnum
    {
        None = 0,
        Std = 1,
        Cmdr = 2
    }

    private void ResetSearch()
    {
        RatingsRequest.Search = null;
        _ = Reload();
    }

    public void Dispose()
    {
        cts.Cancel();
        cts.Dispose();
        editContext.OnFieldChanged -= FieldChanged;
    }
}
