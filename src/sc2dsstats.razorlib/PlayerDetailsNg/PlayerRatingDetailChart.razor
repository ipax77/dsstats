@using Microsoft.JSInterop;
@using pax.BlazorChartJs
@using pax.dsstats.shared.Arcade;
@using pax.dsstats.shared;
@inject IDataService dataService
@inject IJSRuntime JSRuntime
@implements IDisposable

<div style="width: 800px;">
    <ChartComponent ChartJsConfig="chartConfig" OnEventTriggered="EventTriggered" />
</div>

@code {
    [Parameter, EditorRequired]
    public PlayerId PlayerId { get; set; } = default!;

    [Parameter, EditorRequired]
    public RatingType RatingType { get; set; }

    List<ReplayPlayerChartDto> rpChartDtos = new();

    bool dataReady;
    bool chartReady;

    ChartJsConfig chartConfig = null!;
    ChartComponent? chartComponent;

    private Lazy<Task<IJSObjectReference>> moduleTask = null!;
    bool isRegistered;

    protected override void OnInitialized()
    {
        chartConfig = GetLineChartConfig();
        moduleTask = new(() => JSRuntime.InvokeAsync<IJSObjectReference>(
                        "import", "./_content/sc2dsstats.razorlib/js/timeChart.js").AsTask());
        _ = LoadData();
    }

    private async Task LoadData()
    {
        rpChartDtos = await dataService.GetPlayerRatingChartData(PlayerId, RatingType);
        dataReady = true;
        SetupChart();
    }

    private async void EventTriggered(ChartJsEvent chartEvent)
    {
        if (chartEvent is ChartJsInitEvent initEvent)
        {
            var success = await RegisterPlugin();
            chartReady = !success;
            SetupChart();
        }
    }

    private void SetupChart()
    {
        if (!chartReady || !dataReady)
        {
            return;
        }

        if (chartConfig.Data.Datasets.Any())
        {
            chartConfig.RemoveDatasets(chartConfig.Data.Datasets);
        }

        if (!rpChartDtos.Any())
        {
            return;
        }

        var orderdData = rpChartDtos.OrderBy(o => o.Replay.GameTime).ToList();

        chartConfig.SetLabels(orderdData
            .Select(s => s.Replay.GameTime
                .ToString("yyyy-MM-dd"))
            .ToList());

        var lineDataset = GetLineDataset(orderdData);
        var countDataset = GetCountDataset(orderdData);

        chartConfig.AddDatasets(new List<ChartJsDataset>()
        {
            lineDataset,
            countDataset,
        });
    }

    private LineDataset GetLineDataset(List<ReplayPlayerChartDto> data)
    {
        return new()
            {
                Label = "Rating",
                Data = data.Select(s => (object)new { X = s.Replay.GameTime.ToString("yyyy-MM-dd"), Y = s.ReplayPlayerRatingInfo?.Rating }).ToList(),
                BackgroundColor = "#4E58A0",
                BorderColor = "#4E58A0",
                BorderWidth = 4,
                Fill = false,
                PointBackgroundColor = new IndexableOption<string>("blue"),
                PointBorderColor = new IndexableOption<string>("blue"),
                PointRadius = new IndexableOption<double>(1),
                PointBorderWidth = new IndexableOption<double>(1),
                PointHitRadius = new IndexableOption<double>(1),
                Tension = 0,
                YAxisID = "y"
            };
    }

    private LineDataset GetCountDataset(List<ReplayPlayerChartDto> data)
    {
        return new()
            {
                Label = "Games",
                Data = data.Select(s => (object)new { X = s.Replay.GameTime.ToString("yyyy-MM-dd"), Y = s.ReplayPlayerRatingInfo?.Games }).ToList(),
                BackgroundColor = "grey",
                BorderColor = "grey",
                BorderWidth = 2,
                Fill = false,
                PointBackgroundColor = new IndexableOption<string>("grey"),
                PointBorderColor = new IndexableOption<string>("grey"),
                PointRadius = new IndexableOption<double>(1),
                PointBorderWidth = new IndexableOption<double>(1),
                PointHitRadius = new IndexableOption<double>(1),
                BorderDash = new List<double>() { 10, 5 },
                Tension = 0,
                YAxisID = "y1"
            };
    }

    private async Task<bool> RegisterPlugin()
    {
        if (!isRegistered)
        {
            var module = await moduleTask.Value.ConfigureAwait(false);
            await module.InvokeVoidAsync("registerPlugin")
                .ConfigureAwait(false);

            isRegistered = true;

            if (chartConfig.Options?.Scales?.X != null)
            {
                chartConfig.Options.Scales.X = new TimeCartesianAxis()
                    {
                        Display = true,
                        Position = "bottom",
                        Type = "time",
                        Time = new TimeCartesianAxisTime()
                        {
                            Unit = "month",
                            DisplayFormats = new { Month = "yyyy-MM" }
                        },
                        Ticks = new TimeCartesianAxisTicks()
                        {
                            Color = "lightgrey",
                            Padding = 3,
                            AutoSkipPadding = 3,
                            BackdropColor = "rgba(255, 255, 255, 0.75)",
                            ShowLabelBackdrop = false,
                            BackdropPadding = new Padding(2)
                        },
                        Grid = new ChartJsGrid()
                        {
                            Display = true,
                            Color = "#6B6B6B",
                            LineWidth = 1,
                            DrawBorder = true,
                            DrawOnChartArea = true,
                            TickLength = 8,
                            TickWidth = 1,
                            TickColor = "#4E58A0",
                            Offset = false,
                            BorderWidth = 1,
                            BorderColor = "#6B6B6B"
                        }
                    };
            }
            chartConfig.ReinitializeChart();
            return true;
        }
        return false;
    }

    private ChartJsConfig GetLineChartConfig()
    {
        return new()
            {
                Type = ChartType.line,
                Data = new ChartJsData()
                {
                    Labels = new List<string>()
                    {
                    },
                    Datasets = new List<ChartJsDataset>()
                    {
                    }
                },
                Options = new ChartJsOptions()
                {
                    Responsive = true,
                    Plugins = new Plugins()
                    {
                        ArbitraryLines = new List<ArbitraryLineConfig>(),
                        Title = new Title()
                        {
                            Display = true,
                            Text = new IndexableOption<string>($"Rating"),
                            Color = "#4E58A0",
                            Font = new Font()
                            {
                                Size = 16,
                            }
                        }
                    },
                    Interaction = new Interactions()
                    {
                        Intersect = false,
                        Mode = "index"
                    },
                    Scales = new ChartJsOptionsScales()
                    {
                        X = new LinearAxis()
                        {
                            Display = true,
                            Position = "bottom",
                            //Type = "time",
                            //Time = new TimeCartesianAxisTime()
                            //{
                            //    Unit = "day"
                            //},
                            Ticks = new LinearAxisTick()
                            {
                                Color = "lightgrey",
                                Padding = 3,
                                AutoSkipPadding = 3,
                                BackdropColor = "rgba(255, 255, 255, 0.75)",
                                Align = "center",
                                CrossAlign = "near",
                                ShowLabelBackdrop = false,
                                BackdropPadding = new Padding(2)
                            },
                            Grid = new ChartJsGrid()
                            {
                                Display = true,
                                Color = "#6B6B6B",
                                LineWidth = 1,
                                DrawBorder = true,
                                DrawOnChartArea = true,
                                TickLength = 8,
                                TickWidth = 1,
                                TickColor = "#4E58A0",
                                Offset = false,
                                BorderWidth = 1,
                                BorderColor = "#6B6B6B"
                            }
                        },
                        Y = new LinearAxis()
                        {
                            Display = true,
                            Type = "linear",
                            Position = "left",
                            //Title = new Title()
                            //{
                            //    Display = true,
                            //    Text = new IndexableOption<string>("Rating"),
                            //    Color = "#4E58A0"
                            //},
                            Ticks = new LinearAxisTick()
                            {
                                Color = "#4E58A0",
                                Padding = 3,
                                AutoSkipPadding = 3,
                                BackdropColor = "rgba(255, 255, 255, 0.75)",
                                Align = "center",
                                CrossAlign = "near",
                                ShowLabelBackdrop = false,
                                BackdropPadding = new Padding(2)
                            },
                            Grid = new ChartJsGrid()
                            {
                                Display = true,
                                Color = "#6B6B6B",
                                LineWidth = 1,
                                DrawBorder = true,
                                DrawOnChartArea = true,
                                TickLength = 8,
                                TickWidth = 1,
                                TickColor = "#4E58A0",
                                Offset = false,
                                BorderWidth = 1,
                                BorderColor = "#6B6B6B",
                            }
                        },
                        Y1 = new LinearAxis()
                        {
                            Display = true,
                            Type = "linear",
                            Position = "right",
                            //Title = new Title()
                            //{
                            //    Display = true,
                            //    Text = new IndexableOption<string>("Games"),
                            //    Color = "grey"
                            //},
                            Ticks = new LinearAxisTick()
                            {
                                Color = "grey",
                                Padding = 3,
                                Precision = 0,
                                AutoSkipPadding = 3,
                                BackdropColor = "rgba(255, 255, 255, 0.75)",
                                Align = "center",
                                CrossAlign = "near",
                                ShowLabelBackdrop = false,
                                BackdropPadding = new Padding(2)
                            },
                            Grid = new ChartJsGrid()
                            {
                                DrawOnChartArea = false
                            }
                        }
                    }
                }
            };
    }

    public void Dispose()
    {
        if (moduleTask.IsValueCreated)
        {
            var module = moduleTask.Value.GetAwaiter().GetResult();
            module.DisposeAsync();
        }
    }
}
