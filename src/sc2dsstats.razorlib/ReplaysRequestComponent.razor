@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.JSInterop
@using pax.dsstats.shared
@inject IDataService dataService
@inject IJSRuntime IJSRuntime

<div>
    <EditForm EditContext="editContext">
        <div class="row">
            <div class="col-auto">
                <label class="form-label">
                    Search:
                    <InputText class="form-control" placeholder="Zagara Kerrigan" @bind-Value="replaysRequest.SearchString"></InputText>
                </label>
            </div>
            <div class="col-auto align-self-center p-0">
                <span class="oi @(replaysRequest.LinkSearch ? "oi-link-intact" : "oi-link-broken") text-light"
                      style="font-size: 1rem;"
                      data-bs-toggle="tooltip" data-bs-placement="top" data-bs-title="Link cmdr and player"
                      @onclick="SetLink">
                </span>
            </div>
            <div class="col-auto">
                <div>
                    <label class="form-label">
                        Players:
                        <InputText class="form-control" placeholder="PAX Feralan" @bind-Value="replaysRequest.SearchPlayers"></InputText>
                    </label>
                </div>
                @if (!String.IsNullOrEmpty(replaysRequest.ToonIdName))
                {
                    <span class="small text-warning">@(replaysRequest.ToonIdWith > 0 ? "with" : "vs") @replaysRequest.ToonIdName</span>
                }
                <div>

                </div>
            </div>
@*            <div class="col-auto">
                <label class="form-label">
                    Start:
                    <InputDate class="form-control" @bind-Value="replaysRequest.StartTime"></InputDate>
                </label>
            </div>
            <div class="col-auto">
                <label class="form-label">
                    End:
                    <InputDate class="form-control" @bind-Value="replaysRequest.EndTime"></InputDate>
                </label>
            </div>*@
            <div class="col-auto">
                <select id="gamemodeselect" class="form-select" multiple aria-label="multiple" @onchange="GameModeChange">
                    <option>All GameModes</option>
                    @foreach (GameMode gameMode in Enum.GetValues(typeof(GameMode)))
                    {
                        @if (gameMode != GameMode.None)
                        {
                            <option value="@gameMode">@gameMode</option>
                        }
                    }
                </select>
            </div>
            <div class="col-auto">
                <div class="form-check form-switch">
                    <label class="form-check-label">
                        DefaultFilter
                        <InputCheckbox class="form-check-input" @bind-Value="replaysRequest.DefaultFilter">
                        </InputCheckbox>
                    </label>
                </div>
                @if (WithMmrChange)
                {
                    <div class="form-check form-switch">
                        <label class="form-check-label">
                            MmrChange
                            <InputCheckbox class="form-check-input" @bind-Value="replaysRequest.WithMmrChange">
                            </InputCheckbox>
                        </label>
                    </div>
                }
                @if (!Data.IsMaui)
                {
                    <div class="d-flex">
                        <div class="form-check form-switch">
                            <label class="form-check-label">
                                Adjusted
                                <InputCheckbox class="form-check-input" @bind-Value="replaysRequest.ResultAdjusted">
                                </InputCheckbox>
                            </label>
                        </div>
                        <div class="ms-2">
                            <span class="oi oi-info pointer" onclick="window.location.href='https://github.com/ipax77/dsstats/wiki/CheatDetection'"></span>
                        </div>
                    </div>
                } else
                {
                    <div class="form-check form-switch">
                        <label class="form-check-label">
                            From Server
                            <input type="checkbox" class="form-check-input" @onchange="FromServerChange">
                            </input>
                        </label>
                    </div>
                }
            </div>
            <div class="col-auto">
                <div style="max-width: 150px;">
                    <label for="playercountrange" class="form-label">PlayerCount @(replaysRequest.PlayerCount == 0 ? "All" : replaysRequest.PlayerCount)</label>
                    <input type="range" class="form-range" min="0" max="6" step="2" value="0" id="playercountrange" @onchange="PlayerCountChange">
                </div>
            </div>
            <div class="col-auto mt-3">
                <button type="button" class="btn btn-outline-primary" @onclick="Reset">Reset</button>
            </div>
        </div>
    </EditForm>
</div>

@code {
    [CascadingParameter]
    [EditorRequired]
    public ReplaysRequest replaysRequest { get; set; } = default!;

    [Parameter]
    public EventCallback OnFieldChanged { get; set; }

    [Parameter]
    public bool WithMmrChange { get; set; }

    private List<string> tournaments = new();
    private EditContext editContext = null!;

    protected override async Task OnInitializedAsync()
    {
        editContext = new EditContext(replaysRequest);
        editContext.OnFieldChanged += FieldChanged;

        //tournaments = await dataService.GetTournaments();

        await base.OnInitializedAsync();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            IJSRuntime.InvokeVoidAsync("setMultiSelect", "gamemodeselect", replaysRequest.GameModes.Any() ? replaysRequest.GameModes.Select(s => s.ToString()).ToArray() : new string[1] { "All GameModes" });
        }
        base.OnAfterRender(firstRender);
    }

    private void FieldChanged(object? sender, FieldChangedEventArgs e)
    {
        OnFieldChanged.InvokeAsync();
    }

    private void FromServerChange(ChangeEventArgs e)
    {
        if (e.Value is bool value)
        {
            dataService.SetFromServer(value);
            OnFieldChanged.InvokeAsync();
        }
    }

    private void GameModeChange(ChangeEventArgs e)
    {
        if (e.Value is string[] values)
        {
            List<GameMode> gameModes = new();
            for (int i = 0; i < values.Length; i++)
            {
                if (Enum.TryParse(values[i], out GameMode gameMode))
                {
                    gameModes.Add(gameMode);
                }
            }
            replaysRequest.GameModes = gameModes;
            OnFieldChanged.InvokeAsync();
        }
    }

    private void PlayerCountChange(ChangeEventArgs e)
    {
        if (e.Value is string stringValue)
        {
            if (int.TryParse(stringValue, out int intValue))
            {
                replaysRequest.PlayerCount = intValue;
                OnFieldChanged.InvokeAsync();
            }
        }
    }

    private void SetLink()
    {
        replaysRequest.LinkSearch = !replaysRequest.LinkSearch;
        OnFieldChanged.InvokeAsync();
    }

    private void Reset()
    {
        var defaultRequest = new ReplaysRequest();
        replaysRequest.Tournament = defaultRequest.Tournament;
        replaysRequest.SearchString = defaultRequest.SearchString;
        replaysRequest.SearchPlayers = defaultRequest.SearchPlayers;
        replaysRequest.LinkSearch = defaultRequest.LinkSearch;
        replaysRequest.GameModes = defaultRequest.GameModes;
        replaysRequest.DefaultFilter = defaultRequest.DefaultFilter;
        replaysRequest.PlayerCount = defaultRequest.PlayerCount;
        replaysRequest.ToonId = 0;
        replaysRequest.ToonIdWith = 0;
        replaysRequest.ToonIdVs = 0;
        replaysRequest.ToonIdName = null;
        StateHasChanged();
        OnFieldChanged.InvokeAsync();
    }
}
