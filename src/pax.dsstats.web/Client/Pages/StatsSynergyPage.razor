@page "/stats/synergy"
@layout StatsLayout
@using pax.dsstats.shared
@inject NavigationManager NavigationManager

<PageTitle>Stats</PageTitle>
<title>Direct Strike - Commander stats</title>

<sc2dsstats.razorlib.Stats.Synergy.SynergyComponent Request="Request" OnRequestChanged="RequestChanged" Interests="Int"></sc2dsstats.razorlib.Stats.Synergy.SynergyComponent>

@code {
    [Parameter]
    [SupplyParameterFromQuery]
    public string? TimePeriod { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public string? RatingType { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public int[]? Int { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public bool? WithLeavers { get; set; }

    private SynergyRequest Request = new()
        {
            TimePeriod = shared.TimePeriod.Patch2_71,
            RatingType = shared.RatingType.Cmdr,
            WithLeavers = false
        };

    protected override void OnInitialized()
    {
        SetRequest();
        base.OnInitialized();
    }

    private void SetRequest()
    {
        if (!String.IsNullOrEmpty(TimePeriod) 
            && Enum.TryParse(typeof(TimePeriod), TimePeriod, out var timePeriodObj) 
            && timePeriodObj is TimePeriod timePeriod)
        {
            Request.TimePeriod = timePeriod;
        }

        if (Enum.TryParse(typeof(RatingType), RatingType, out var ratingTypeObj)
            && ratingTypeObj is shared.RatingType ratingType)
        {
            Request.RatingType = ratingType;
        }

        if (WithLeavers != null)
        {
            Request.WithLeavers = WithLeavers.Value;
        }
    }

    private void RequestChanged(KeyValuePair<SynergyRequest, Dictionary<Commander, bool>> options)
    {
        Dictionary<string, object?> queryDic = new();

        if (options.Key.TimePeriod != shared.TimePeriod.Patch2_71)
        {
            queryDic.Add("TimePeriod", options.Key.TimePeriod.ToString());
        }
        else
        {
            queryDic.Add("TimePeriod", null);
        }

        if (options.Key.RatingType != shared.RatingType.Cmdr)
        {
            queryDic.Add("RatingType", options.Key.RatingType.ToString());
        }
        else
        {
            queryDic.Add("RatingType", null);
        }

        if (options.Key.WithLeavers)
        {
            queryDic.Add("WithLeavers", true);
        }
        else
        {
            queryDic.Add("WithLeavers", null);
        }

        var interests = options.Value.Where(x => x.Value == true).Select(s => (int)s.Key).ToArray();

        if (interests.Any())
        {
            queryDic.Add("Int", interests);
        }
        else
        {
            queryDic.Add("Int", null);
        }

        NavigationManager.NavigateTo(
            NavigationManager.GetUriWithQueryParameters(
                new Dictionary<string, object?>(queryDic)
            )
        );
    }

    private void InterestsChanged(Dictionary<Commander, bool> cmdrSelects)
    {
        var interests = cmdrSelects.Where(x => x.Value == true).Select(s => (int)s.Key).ToArray();

    }
}
