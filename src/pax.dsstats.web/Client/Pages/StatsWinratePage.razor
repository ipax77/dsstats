@page "/stats/winrate"
@layout StatsLayout
@using pax.dsstats.shared
@inject NavigationManager NavigationManager

<PageTitle>Stats</PageTitle>

<sc2dsstats.razorlib.Stats.Winrate.WinrateComponent Request="WinrateRequest" OnRequestChanged="RequestChanged"></sc2dsstats.razorlib.Stats.Winrate.WinrateComponent>

@code {
    [Parameter, SupplyParameterFromQuery]
    public string? TimePeriod { get; set; }

    [Parameter, SupplyParameterFromQuery]
    public string? RType { get; set; }

    [Parameter, SupplyParameterFromQuery]
    public string? Interest { get; set; }

    [Parameter, SupplyParameterFromQuery]
    public string? WType { get; set; }

    [Parameter, SupplyParameterFromQuery]
    public string? From { get; set; }

    [Parameter, SupplyParameterFromQuery]
    public string? To { get; set; }

    private WinrateRequest WinrateRequest = new()
    {
        TimePeriod = shared.TimePeriod.Past90Days,
        RatingType = RatingType.Cmdr,
        Interest = Commander.None
    };

    protected override void OnInitialized()
    {
        SetRequest();
        base.OnInitialized();
    }

    private void SetRequest()
    {
        if (!String.IsNullOrEmpty(TimePeriod) 
            && Enum.TryParse(typeof(TimePeriod), TimePeriod, out var timePeriodObj) 
            && timePeriodObj is TimePeriod timePeriod)
        {
            WinrateRequest.TimePeriod = timePeriod;
        }

        if (!String.IsNullOrEmpty(RType)
            && Enum.TryParse(typeof(RatingType), RType, out var ratingTypeObj)
            && ratingTypeObj is RatingType ratingType)
        {
            WinrateRequest.RatingType = ratingType;
        }

        if (Enum.TryParse(typeof(Commander), Interest, out object? interestObj))
        {
            if (interestObj is Commander interest)
            {
                WinrateRequest.Interest = interest;
            }
        }

        if (Enum.TryParse(typeof(WinrateType), WType, out object? winrateTypeObj)
            && winrateTypeObj is WinrateType winrateType)
        {
            WinrateRequest.WinrateType = winrateType;
        }

        if (!String.IsNullOrEmpty(From)
            && int.TryParse(From, out int from)
            && from % 50 == 0)
        {
            WinrateRequest.FromRating = from;
        }

        if (!String.IsNullOrEmpty(To)
            && int.TryParse(To, out int to)
            && to % 50 == 0)
        {
            WinrateRequest.ToRating = to;
        }
    }

    private void RequestChanged(WinrateRequest winrateRequest)
    {
        Dictionary<string, object?> queryDic = new();

        if (winrateRequest.TimePeriod != shared.TimePeriod.Past90Days)
        {
            queryDic.Add("TimePeriod", winrateRequest.TimePeriod.ToString());
        } else
        {
            queryDic.Add("TimePeriod", null);
        }

        if (winrateRequest.RatingType != RatingType.Cmdr)
        {
            queryDic.Add("RType", winrateRequest.RatingType.ToString());
        }
        else
        {
            queryDic.Add("RType", null);
        }

        if (winrateRequest.Interest != Commander.None)
        {
            queryDic.Add("Interest", winrateRequest.Interest.ToString());
        }
        else
        {
            queryDic.Add("Interest", null);
        }

        if (winrateRequest.WinrateType != WinrateType.AvgGain)
        {
            queryDic.Add("WType", winrateRequest.WinrateType.ToString());
        }
        else
        {
            queryDic.Add("WType", null);
        }

        if (winrateRequest.FromRating != 0)
        {
            queryDic.Add("From", winrateRequest.FromRating.ToString());
        }
        else
        {
            queryDic.Add("From", null);
        }

        if (winrateRequest.ToRating != 0)
        {
            queryDic.Add("To", winrateRequest.ToRating.ToString());
        } 
        else
        {
            queryDic.Add("To", null);
        }

        NavigationManager.NavigateTo(
            NavigationManager.GetUriWithQueryParameters(
                new Dictionary<string, object?>(queryDic)
            )
        );
    }
}
