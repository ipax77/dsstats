@page "/replays"
@using System.Collections.ObjectModel
@using pax.dsstats.shared
@using sc2dsstats.razorlib
@inject NavigationManager NavigationManager
@inject ILogger<ReplaysPage> logger

<PageTitle>Replays</PageTitle>
<title>Direct Strike - Replays</title>

<ReplaysComponent @ref="replaysComponent" replaysRequest="replaysRequest"
                  OnRequestChanged="SetUrl">
</ReplaysComponent>

@code {
    [Parameter]
    [SupplyParameterFromQuery]
    public string? SearchString { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public string? Players { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public string? ReplayHash { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public int? ToonId { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public int? ToonIdWith { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public int? ToonIdVs { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public string? ToonIdName { get; set; }


    private ReplaysRequest replaysRequest = new();
    private ReplaysComponent? replaysComponent;
    private object lockobject = new();
    private bool jobDone = true;

    protected override void OnInitialized()
    {
        SetRequest();
        base.OnInitialized();
    }

    protected override void OnParametersSet()
    {
        lock (lockobject)
        {
            if (jobDone)
            {
                jobDone = false;
            }
            else
            {
                SetRequest();
                replaysComponent?.ReInit(replaysRequest);
            }
        }
        base.OnParametersSet();
    }

    private void SetRequest()
    {
        replaysRequest = new()
            {
                SearchString = SearchString,
                SearchPlayers = Players,
                ReplayHash = ReplayHash,
                ToonId = ToonId ?? 0,
                ToonIdVs = ToonIdVs ?? 0,
                ToonIdWith = ToonIdWith ?? 0,
                ToonIdName = ToonIdName
            };
    }

    private void SetUrl(ReplaysRequest request)
    {
        Dictionary<string, object?> queryDic = new();

        if (!String.IsNullOrEmpty(request.Tournament))
        {
            queryDic.Add("Tournament", request.Tournament);
        }
        else
        {
            queryDic.Add("Tournament", null);
        }

        if (!String.IsNullOrEmpty(request.SearchString))
        {
            queryDic.Add("SearchString", request.SearchString);
        }
        else
        {
            queryDic.Add("SearchString", null);
        }

        if (!String.IsNullOrEmpty(request.SearchPlayers))
        {
            queryDic.Add("Players", request.SearchPlayers);
        }
        else
        {
            queryDic.Add("Players", null);
        }

        if (!String.IsNullOrEmpty(request.ReplayHash))
        {
            queryDic.Add("ReplayHash", request.ReplayHash);
        }
        else
        {
            queryDic.Add("ReplayHash", null);
        }

        if (request.ToonId > 0)
        {
            queryDic.Add("ToonId", request.ToonId);
        }
        else
        {
            queryDic.Add("ToonId", null);
        }

        if (request.ToonIdVs > 0)
        {
            queryDic.Add("ToonIdVs", request.ToonIdVs);
        }
        else
        {
            queryDic.Add("ToonIdVs", null);
        }

        if (request.ToonIdWith > 0)
        {
            queryDic.Add("ToonIdWith", request.ToonIdWith);
        }
        else
        {
            queryDic.Add("ToonIdWith", null);
        }

        if (!String.IsNullOrEmpty(request.ToonIdName))
        {
            queryDic.Add("ToonIdName", request.ToonIdName);
        }
        else
        {
            queryDic.Add("ToonIdName", null);
        }

        lock (lockobject)
        {
            jobDone = true;
            NavigationManager.NavigateTo(
                NavigationManager.GetUriWithQueryParameters(
                    new Dictionary<string, object?>(queryDic)
                )
            );
        }
    }
}