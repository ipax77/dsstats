@page "/armyvalues"
@using pax.dsstats.shared
@inject NavigationManager NavigationManager

<PageTitle>ArmyValues</PageTitle>

@*<sc2dsstats.razorlib.BuildsComponent BuildRequest="buildRequest" Players="players" OnRequestChanged="RequestChanged"></sc2dsstats.razorlib.BuildsComponent>*@

<sc2dsstats.razorlib.StatsUpgrades.StatsUpgradesComponent BuildRequest="buildRequest" OnRequestChanged="SetRequest"></sc2dsstats.razorlib.StatsUpgrades.StatsUpgradesComponent>
@code {
    [Parameter]
    [SupplyParameterFromQuery]
    public string? Timespan { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public string? Interest { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public string? Versus { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public string? PlayerNames { get; set; }


    private BuildRequest buildRequest = new()
        {
            PlayerNames = Data.GetDefaultRequestNames(),
            Interest = Commander.Abathur,
        };

    protected override void OnInitialized()
    {
        SetRequest();
        base.OnInitialized();
    }

    private void SetRequest()
    {
        if (!String.IsNullOrEmpty(Timespan))
        {
            (buildRequest.StartTime, buildRequest.EndTime) = Data.TimeperiodSelected(Timespan);
            buildRequest.Timespan = Timespan;
        }

        if (Enum.TryParse(typeof(Commander), Interest, out object? interestObj))
        {
            if (interestObj is Commander interest)
            {
                buildRequest.Interest = interest;
            }
        }

        if (Enum.TryParse(typeof(Commander), Versus, out object? versusObj))
        {
            if (versusObj is Commander versus)
            {
                buildRequest.Versus = versus;
            }
        }

        if (!string.IsNullOrEmpty(PlayerNames))
        {
            var toonIdStrs = PlayerNames.Split('x', StringSplitOptions.RemoveEmptyEntries).ToList();
            List<KeyValuePair<int, string>> toonIds = new();
            foreach (var toonIdstr in toonIdStrs)
            {
                var ent = toonIdstr.Split('|', StringSplitOptions.RemoveEmptyEntries);
                if (ent.Length == 2)
                {
                    if (int.TryParse(ent[0], out int toonId))
                    {
                        toonIds.Add(new KeyValuePair<int, string>(toonId, ent[1]));
                        if (toonIds.Count >= 10)
                        {
                            break;
                        }
                    }
                }
            }
            buildRequest.PlayerNames = toonIds.Select(s => new RequestNames() { Name = s.Value, ToonId = s.Key }).ToList();
        }
    }

    private void RequestChanged()
    {
        Dictionary<string, object?> queryDic = new();

        queryDic.Add("Timespan", buildRequest.Timespan);
        queryDic.Add("Interest", buildRequest.Interest.ToString());
        queryDic.Add("Versus", buildRequest.Versus.ToString());
        queryDic.Add("PlayerNames", string.Join('x', buildRequest.PlayerNames.Select(s => $"{s.ToonId}|{s.Name}")));

        NavigationManager.NavigateTo(
            NavigationManager.GetUriWithQueryParameters(
                new Dictionary<string, object?>(queryDic)
            )
        );
    }
}
