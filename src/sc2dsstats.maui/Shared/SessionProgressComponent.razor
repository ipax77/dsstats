@using System.Globalization;
@using pax.dsstats.shared;
@using sc2dsstats.maui.Services;
@inject DecodeService decodeService
@inject NavigationManager NavigationManager

<div>
    <div class="d-flex" style="max-width: 1200px; min-width: 600px;">
        @if (isLoading)
        {
            <div class="spinner-border spinner-border-sm text-info ms-2 me-2" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        }
        <div class="flex-grow-1">
            <h3 class="text-warning p-2 bg-secondary">Session Progress</h3>
        </div>

    </div>
    @if (sessionProgress != null)
    {
        <div class="row">
            <div class="col-auto table-responsive" style="max-height: 400px; overflow-y: auto;">
                <table class="table table-dark table-striped table-hover">
                    <thead>
                        <tr>
                            <th>Cmdr</th>
                            <th>Gain</th>
                            <th>Mode</th>
                            <th>Duration</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var info in sessionProgress.SessionGames.OrderByDescending(o => o.GameTime))
                        {
                            <tr class="pointer" @onclick="e => ShowReplay(info.ReplayHash)">
                                <td>
                                    <img src="@($"_content/sc2dsstats.razorlib/images/{info.Commander.ToString().ToLower()}-min.png")" alt="@info.Commander" height="30" width="30" />
                                </td>
                                <td class="table-dark">
                                    <span class="oi @(info.RatingGain < 0 ? "oi-arrow-bottom text-danger" : "oi-arrow-top text-success")">@info.RatingGain.ToString("N1", CultureInfo.InvariantCulture)</span>
                                </td>
                                <td>@info.GameMode</td>
                                <td>
                                    @TimeSpan.FromSeconds(info.Duration).ToString(@"hh\:mm\:ss")
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
            <div class="col-auto" style="max-height: 400px; overflow-y: auto;">
                <table class="table table-dark table-striped">
                    <thead>
                        <tr>
                            <th>Player</th>
                            <th>AvgGain</th>
                            <th>Mode</th>
                            <th>Games</th>
                            <th>Winrate</th>
                            <th>Playtime</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var sum in summaries.OrderByDescending(o => o.RatingType))
                        {
                            var avgGain = Math.Round(sum.Gains.Average(), 2);
                            <tr>
                                <td>@sum.RequestNames?.Name <small>@Data.GetRegionString(sum.RequestNames?.RegionId)</small></td>
                                <td>
                                    @if (sum.RatingType != RatingType.None)
                                    {
                                        <span class="oi @(avgGain < 0 ? "oi-arrow-bottom text-danger" : "oi-arrow-top text-success")">
                                            @avgGain.ToString("N1", CultureInfo.InvariantCulture)
                                        </span>
                                    }
                                </td>
                                <td>@(sum.RatingType == RatingType.None ? sum.GameMode.ToString() : Data.GetRatingTypeLongName(sum.RatingType))</td>
                                <td class="text-center">@sum.Games</td>
                                <td>@(sum.Games == 0 ? "" : Math.Round(sum.Wins * 100.0 / (double)sum.Games, 2).ToString("N2", CultureInfo.InvariantCulture))</td>
                                <td>@TimeSpan.FromSeconds(sum.Duration).ToString(@"hh\:mm\:ss")</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    }
</div>

@code {
    SessionProgress? sessionProgress;
    bool isLoading;

    List<SessionSummary> summaries = new();

    protected override void OnInitialized()
    {
        _ = LoadData();
        base.OnInitialized();
    }

    public async Task LoadData()
    {
        isLoading = true;
        await InvokeAsync(() => StateHasChanged());
        sessionProgress = await decodeService.GetSessionProgress();
        isLoading = false;
        SetSummary();
        await InvokeAsync(() => StateHasChanged());
    }

    private void SetSummary()
    {
        if (sessionProgress == null || !sessionProgress.SessionGames.Any())
        {
            return;
        }

        summaries.Clear();

        foreach (var info in sessionProgress.SessionGames)
        {
            var summary = summaries.FirstOrDefault(f => f.RatingType == info.RatingType
                && f.RequestNames == info.RequestNames
                && f.GameMode == info.GameMode);
            if (summary == null)
            {
                summary = new()
                    {
                        RatingType = info.RatingType,
                        RequestNames = info.RequestNames,
                        GameMode = info.GameMode
                    };
                summaries.Add(summary);
            }
            summary.Games++;
            summary.Duration += info.Duration;
            summary.Wins += info.PlayerResult == PlayerResult.Win ? 1 : 0;
            summary.Gains.Add(info.RatingGain);
        }
    }

    private void ShowReplay(string replayHash)
    {
        NavigationManager.NavigateTo(
            NavigationManager.GetUriWithQueryParameters("replays",
                new Dictionary<string, object?>()
                        {
                            { "ReplayHash", replayHash }
                        }
            )
        );
    }
}
