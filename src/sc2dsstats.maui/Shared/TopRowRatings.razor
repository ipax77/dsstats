@using System.Globalization;
@using pax.dsstats.shared
@using sc2dsstats.maui.Services
@inject IDataService dataService
@inject IRatingRepository ratingRepository
@implements IDisposable

@if (serverRatings.Any())
{
    <div class="top-row bg-secondary px-2" style="overflow: hidden;">
        <div class="row ms-1">
            @foreach (var rating in serverRatings)
            {
                <div class="col-auto d-flex border rounded">
                    <div class="align-self-center">
                        <span class="badge text-warning ps-0" style="font-size: 1.0rem;">
                            @rating.Player.Name
                            <span class="border rounded p-1" style="font-size: 0.7rem;">
                                @Data.GetRegionString(rating.Player.RegionId)
                            </span>
                        </span>
                    </div>
                    <div>
                        <span class="badge bg-primary" style="font-size: 1.0rem;">
                            <span class="small">
                                @rating.RatingType
                            </span>
                            <br />
                            <span class="text-warning">@((rating.Rating + rating.MmrChange).ToString("N2", CultureInfo.InvariantCulture))</span>
                        </span>
                    </div>
                    @if (rating.MmrChange != 0)
                    {
                        <div class="align-self-center">
                            <span class="oi @(rating.MmrChange < 0 ? "oi-arrow-bottom text-danger" : "oi-arrow-top text-success")">
                                @rating.MmrChange.ToString("N1", CultureInfo.InvariantCulture)
                            </span>
                        </div>
                    }
                </div>
            }
        </div>
    </div>
}

@code {
    private CancellationTokenSource cts = new();

    List<PlayerRatingDetailDto> serverRatings = new();
    List<PlayerRatingDetailDto> localRatings = new();

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            _ = LoadData();
        }
        base.OnAfterRender(firstRender);
    }

    private async Task LoadData()
    {
        var toonIds = UserSettingsService.UserSettings.BattleNetInfos
            .SelectMany(s => s.ToonIds)
            .Select(s => s.ToonId)
            .Distinct()
            .ToList();

        var toonIdRatingResponse = await dataService.GetToonIdRatings(new ToonIdRatingRequest()
            {
                RatingType = pax.dsstats.shared.RatingType.None,
                ToonIds = toonIds
            }, cts.Token);

        serverRatings = toonIdRatingResponse.Ratings;

        var response = await ratingRepository.GetToonIdRatings(new ToonIdRatingRequest()
            {
                RatingType = pax.dsstats.shared.RatingType.None,
                ToonIds = toonIds
            }, cts.Token);

        localRatings = response.Ratings;

        await InvokeAsync(() => StateHasChanged());
    }

    public async Task UpdateFakeData(List<int> toonIds)
    {
        var response = await ratingRepository.GetToonIdRatings(new ToonIdRatingRequest()
            {
                RatingType = pax.dsstats.shared.RatingType.None,
                ToonIds = toonIds
            }, cts.Token);

        foreach (var currentRating in response.Ratings)
        {
            var serverRating = serverRatings
                .FirstOrDefault(f => f.Player.ToonId == currentRating.Player.ToonId
                    && f.RatingType == currentRating.RatingType);

            if (serverRating == null)
            {
                continue;
            }

            var localRating = localRatings
                .FirstOrDefault(f => f.Player.ToonId == currentRating.Player.ToonId
                    && f.RatingType == currentRating.RatingType);

            if (localRating == null)
            {
                continue;
            }

            serverRating.MmrChange = currentRating.Rating - localRating.Rating;
        }
        await InvokeAsync(() => StateHasChanged());
    }

    public void Dispose()
    {
        cts.Cancel();
        cts.Dispose();
    }
}
