@using pax.dsstats.dbng.Repositories;
@using sc2dsstats.maui.Services;
@inject DecodeService DecodeService
@inject IReplayRepository ReplayRepository
@inject IToastService ToastService
@inject IJSRuntime jsRuntime
@implements IDisposable

<div id="decodeErrorModal" class="modal" tabindex="-1">
    <div class="modal-dialog modal-xl modal-dialog-centered modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header bgchart2">
                <h5 class="modal-title">Replays failed decoding</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body bgchart">
                <div>
                    <button type="button" class="btn btn-sm btn-danger" @onclick="SkipAll">Exclude All</button>
                </div>
                <div class="tableFixHead">
                    <table class="tptable table table-sm">
                        <thead>
                            <tr>
                                <th></th>
                                <th></th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var ent in DecodeService.errorReplays.Where(x => !excludeList.Contains(x.Key)))
                            {
                                <tr class="border-top">
                                    <td>@Path.GetFileName(ent.Key)</td>
                                    <td><span class="fw-bold">@ent.Key</span></td>
                                    <td>
                                        <button type="button" class="btn btn-sm btn-danger" @onclick="e => AddSkipReplay(ent.Key)">Exclude permanently</button>
                                    </td>
                                </tr>
                                <tr class="border-bottom">
                                    <td>Error</td>
                                    <td colspan="2">@ent.Value</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
            <div class="modal-footer bgchart2">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

@code {
    private List<string> excludeList = new();
    SemaphoreSlim ss = new(1, 1);

    protected override void OnInitialized()
    {
        DecodeService.ErrorRaised += DecodeService_ErrorRaised;
        base.OnInitialized();
    }

    private void DecodeService_ErrorRaised(object? sender, EventArgs e)
    {
        InvokeAsync(() => StateHasChanged());
    }

    private async Task AddSkipReplay(string replayPath)
    {
        await ss.WaitAsync();
        try
        {
            await ReplayRepository.AddSkipReplay(replayPath);
            excludeList.Add(replayPath);
        }
        finally
        {
            ss.Release();
        }
        await InvokeAsync(() => StateHasChanged());
        ToastService.ShowSuccess("Replay sucessfully added to skip list");

    }

    private async void SkipAll()
    {
        await ss.WaitAsync();
        try
        {
            foreach (var ent in DecodeService.errorReplays)
            {
                await ReplayRepository.AddSkipReplay(ent.Key);
                excludeList.Add(ent.Key);
            }
        }
        finally
        {
            ss.Release();
        }
        await InvokeAsync(() => StateHasChanged());
    }

    public void Show()
    {
        jsRuntime.InvokeVoidAsync("ReplayModalOpen", "decodeErrorModal");
    }

    public void Dispose()
    {
        ss.Dispose();
        DecodeService.ErrorRaised -= DecodeService_ErrorRaised;
    }
}
