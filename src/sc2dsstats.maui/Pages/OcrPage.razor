@page "/ocr"
@using System;
@using System.Text;
@using System.Drawing;
@using System.Drawing.Imaging;
@using pax.dsstats.shared;
@using sc2dsstats.maui.Services;
@inject IJSRuntime JSRuntime
@inject IDataService dataService
@implements IAsyncDisposable

<style>
    .drop-zone {
        padding: 20px;
        width: 50%;
        min-height: 100px;
        border: 2px dashed #0087F7;
        border-radius: 5px;
    }

        .drop-zone.hov er {
            border-style: solid;
        }
</style>

<h3>GameInfo</h3>

<div @ref="dropZoneElement" class="drop-zone">
    <p>
        Drop a file or paste an image from the clipboard or select a file using the input or use the 'Make Screenshot' button
        <br />
        <span class="fw-bold text-warning">The image should show the Direct Strike loading screen</span>
        <br />
        <small>The image is neither saved nor transmitted. Text recognition takes place locally. After loading another image or closing the app the image is gone.</small>
    </p>
    <InputFile OnChange="@OnChange" @ref="inputFile" />
</div>

<div class="btn-group mt-2 mb-2">
    <button type="button" class="btn btn-outline-warning" @onclick="MakeScreenShot">Make Screenshot</button>
</div>

<div>
    <img src="@src" width="900" />
</div>

<EditForm EditContext="editContext">
    <div class="row">
        <div class="col-auto me-2">
            <label class="form-label">
                Rating Type
                <InputSelect class="form-select" @bind-Value="gameInfoRequest.RatingType">
                    <option value="@RatingType.Cmdr" selected>@Data.GetRatingTypeLongName(RatingType.Cmdr)</option>
                    <option value="@RatingType.Std">@Data.GetRatingTypeLongName(RatingType.Std)</option>
                </InputSelect>
            </label>
        </div>
        <div class="col-auto me-2">
            <label class="form-label">
                Region
                <InputSelect class="form-select" @bind-Value="gameInfoRequest.RegionId">
                    <option value="1">@Data.GetRegionString(1)</option>
                    <option value="2">@Data.GetRegionString(2)</option>
                    <option value="3">@Data.GetRegionString(3)</option>
                </InputSelect>
            </label>
        </div>
        @if (UserSettingsService.UserSettings.AllowUploads)
        {
            <div class="col-auto form-check form-switch align-self-center me-2">
                <label class="form-check-label">
                    Online Ratings
                    <input type="checkbox" checked="@UserSettingsService.UserSettings.AllowUploads" class="form-check-input" @onchange="FromServerChange">
                    </input>
                </label>
            </div>
        }
        else
        {
            <div class="col-auto ms-2">
                <small class="text-primary">Server Info available for Uploaders only.</small>
            </div>
        }
    </div>
</EditForm>

<CascadingValue Value="gameInfoRequest.RatingType">
    @if (gameInfoResult != null)
    {
        <sc2dsstats.razorlib.GameInfo.GameInfoComponent GameInfoResult="gameInfoResult" />
    }
</CascadingValue>

@code {
    ElementReference dropZoneElement;
    InputFile? inputFile;

    IJSObjectReference? _module;
    IJSObjectReference? _dropZoneInstance;

    string? src;

    CancellationTokenSource cts = new();

    GameInfoResult? gameInfoResult;

    private GameInfoRequest gameInfoRequest = null!;
    EditContext editContext = null!;

    protected override void OnInitialized()
    {
        gameInfoRequest = new() { RegionId = Data.MauiRegionId };
        editContext = new EditContext(gameInfoRequest);
        editContext.OnFieldChanged += FieldChanged;

        var fromServer = UserSettingsService.UserSettings.AllowUploads;
        dataService.SetFromServer(fromServer);
        base.OnInitialized();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Load the JS file
            _module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/dropZone.js");

            // Initialize the drop zone
            _dropZoneInstance = await _module.InvokeAsync<IJSObjectReference>("initializeFileDropZone", dropZoneElement, inputFile?.Element);
        }
    }

    private async void FieldChanged(object? sender, FieldChangedEventArgs e)
    {
        gameInfoResult = await dataService.GetGameInfo(gameInfoRequest, cts.Token);
        await InvokeAsync(() => StateHasChanged());
    }

    // Called when a new file is uploaded
    private async Task OnChange(InputFileChangeEventArgs e)
    {
        using var stream = e.File.OpenReadStream(maxAllowedSize: 512000 * 20);
        using var ms = new MemoryStream();
        await stream.CopyToAsync(ms);
        await GetResult(ms);
        src = "data:" + e.File.ContentType + ";base64," + Convert.ToBase64String(ms.ToArray());
    }

    private async Task GetResult(MemoryStream memoryStream)
    {
        OcrService ocrService = new();
        gameInfoRequest.PlayerNames = await ocrService.GetImagePlayerNames(memoryStream);
        gameInfoResult = await dataService.GetGameInfo(gameInfoRequest, cts.Token);
        await InvokeAsync(() => StateHasChanged());
    }

    private async void MakeScreenShot()
    {
        using var bitmap = new System.Drawing.Bitmap(Data.MauiWidth, Data.MauiHeight);
        using (var g = Graphics.FromImage(bitmap))
        {
            g.CopyFromScreen(0, 0, 0, 0, bitmap.Size, CopyPixelOperation.SourceCopy);
        }

        using var memoryStream = new MemoryStream();
        bitmap.Save(memoryStream, ImageFormat.Png);

        await GetResult(memoryStream);

        byte[] byteImage = memoryStream.ToArray();

        src = "data:image/png;base64, " + Convert.ToBase64String(byteImage);
        await InvokeAsync(() => StateHasChanged());
    }

    private async void FromServerChange(ChangeEventArgs e)
    {
        if (e.Value is bool value)
        {
            dataService.SetFromServer(value);
            gameInfoResult = await dataService.GetGameInfo(gameInfoRequest, cts.Token);
            await InvokeAsync(() => StateHasChanged());
        }
    }

    // Unregister the drop zone events
    public async ValueTask DisposeAsync()
    {
        cts.Cancel();
        cts.Dispose();

        if (_dropZoneInstance != null)
        {
            await _dropZoneInstance.InvokeVoidAsync("dispose");
            await _dropZoneInstance.DisposeAsync();
        }

        if (_module != null)
        {
            await _module.DisposeAsync();
        }
    }
}