@page "/settings"
@using Microsoft.EntityFrameworkCore;
@using pax.dsstats.dbng.Repositories;
@using pax.dsstats.dbng;
@using sc2dsstats.maui.Services
@inject UserSettingsService UserSettingsService
@inject IToastService toastService
@inject IReplayRepository ReplayRepository
@inject ReplayContext context
@inject UploadService UploadService
@implements IDisposable

<h1 class="display-5 fw-bold">Settings</h1>

@*@if (UserSettingsService.UserSettings.DbGuid != new Guid())
{
    <p>
        Dataset name: <strong>@UserSettingsService.UserSettings.DbGuid.ToString().Substring(0, 8)</strong>@UserSettingsService.UserSettings.DbGuid.ToString().Substring(8)
    </p>
}
else
{
    <p>
        Your Dataset name will be shown after the first successful upload
    </p>

}*@

<EditForm EditContext="editContext" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="btn-group mt-3 mb-5">
        <button type="submit" class="btn btn-primary btn-lg">Save</button>
        <button type="button" class="btn btn-danger btn-lg" @onclick="Reset">Reset</button>
    </div>

    <div class="container-fluid py-5 bg-primary">
        <div class="row">
            <div class="col-2">
                <div class="form-check">
                    <label class="form-check-label">
                        <InputCheckbox class="form-check-input bg-warning" @bind-Value="UserSettingsService.UserSettings.AllowCleanUploads" disabled="@(UserSettingsService.UserSettings.AllowCleanUploads)"></InputCheckbox>
                        Allow Ratings
                    </label>
                </div>
            </div>
            <div class="col-md-8 fs-4">
                <p>To get global ratings you allow uploading the full replay information - including playernames. For details check the <a class="text-warning" href="https://dsstats.pax77.org">dsstats website</a></p>
                <div class="btn-group">
                    <button type="button" class="btn btn-sm btn-outline-warning" @onclick="DisableCleanUploads">Disable</button>
                    <button type="button" class="btn btn-sm btn-outline-danger" @onclick="DeleteMe">Delete my data</button>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-2">
                <div class="form-check">
                    <label class="form-check-label">
                        <InputCheckbox class="form-check-input bg-warning" @bind-Value="UserSettingsService.UserSettings.AutoScanForNewReplays" disabled="@(UserSettingsService.UserSettings.AllowCleanUploads)"></InputCheckbox>
                        OnTheFlyScan
                    </label>
                </div>
            </div>
            <div class="col-md-8 fs-4">
                Automatically detects new Direct Strike replays.
            </div>
        </div>
        <div class="row">
            <div class="col-2">
                <div class="form-check">
                    <label class="form-check-label">
                        <InputCheckbox class="form-check-input bg-warning" @bind-Value="UserSettingsService.UserSettings.CheckForUpdates"></InputCheckbox>
                        Check for updates
                    </label>
                </div>
            </div>
            <div class="col-md-8 fs-4">
                Automatically check for Updates when the App starts
            </div>
        </div>
        <div class="row">
            <div class="col-2">
                <label class="col-form-label">
                    <InputNumber @bind-Value="UserSettingsService.UserSettings.CpuCoresUsedForDecoding" style="max-width: 150px;"></InputNumber>
                    CPU Cores
                </label>
            </div>
            <div class="col-md-8 fs-4">
                CPU Cores used for decoding new replays (available CPU-Cores: @Environment.ProcessorCount)
            </div>
        </div>

    </div>

    <div class="container-fluid py-5 bg-primary mt-3">
        <h4 class="fw-bold">Playernames - your ingame Starcraft 2 Player name(s) e.g. shown in the loading screen of Direct Strike</h4>
        @foreach (var ent in playerNames)
        {
            <div class="col-6 m-2 p-2">
                <label class="col-form-label d-flex w-100">
                    Name:
                    <InputText class="w-75 ms-2" @bind-Value="ent.Name"></InputText>
                    <span class="oi oi-x pointer text-danger ms-1 align-self-center" @onclick="e => RemovePlayerName(ent)"></span>
                </label>
            </div>
        }
        <button type="button" class="btn btn-secondary btm-sm" @onclick="AddPlayerName">Add Player Name</button>
    </div>
    <div class="container-fluid py-5 bg-primary mt-3">
        <h4 class="fw-bold">Replay directories - location of the Direct Strike replays</h4>
        <small>Something like: C:\Users\username\Documents\StarCraft II\Accounts\107095123\2-S2-1-226321\Replays\Multiplayer</small>
        @foreach (var ent in replayPaths)
        {

            <div class="col-10 m-2 p-2">
                <label class="col-form-label d-flex w-100">
                    Path:
                    <InputText class="w-75 ms-2" @bind-Value="ent.Name"></InputText>
                    <span class="oi oi-x pointer text-danger" @onclick="e => RemoveReplayPath(ent)"></span>
                </label>
            </div>
        }
        <button type="button" class="btn btn-secondary btm-sm" @onclick="AddReplayPath">Add Path</button>
    </div>
    <div class="container-fluid py-5 bg-primary mt-3">
        <h4 class="fw-bold">Replay name <span class="text-danger">- Restart Required!</span></h4>
        <small>The beginning of the filename of the Direct Strike replays - The default value is "Direct Strike" but might be different depending on your language</small>
        <div class="col-10 m-2 p-2">
            <label class="col-form-label d-flex w-100">
                <InputText class="w-75 ms-2" @bind-Value="UserSettingsService.UserSettings.ReplayStartName"></InputText>
            </label>
        </div>
    </div>

    <div class="container-fluid py-5 bg-primary mt-3">
        <h3 class="fw-bold">AppDataDir</h3>
        <small>@FileSystem.Current.AppDataDirectory</small>
    </div>

    @if (skipReplays.Any())
    {
        <div class="container-fluid py-5 bg-primary mt-3" style="max-height: 400px; overflow: auto;">
            <h3>Replays excluded from decoding</h3>
            <div>
                <table class="table table-sm table-dark w-auto">
                    <thead>
                        <tr>
                            <th></th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var path in skipReplays)
                        {
                            <tr>
                                <td>@path</td>
                                <td>
                                    <button type="button" class="btn btn-sm btn-warning" @onclick="e => RemoveSkipReplay(path)">Remove</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    }

    <div class="btn-group mt-3 mb-5">
        <button type="submit" class="btn btn-primary btn-lg">Save</button>
        <button type="button" class="btn btn-danger btn-lg" @onclick="Reset">Reset</button>
    </div>

    <div class="btn-group mt-3 mb-5">
        <button type="button" class="btn btn-outline-info btn-lg" @onclick="Backup">Backup your database</button>
        <button type="button" class="btn btn-outline-danger btn-lg" @onclick="Restore">Restore from Backup</button>
    </div>

</EditForm>


@code {
    private EditContext editContext = null!;
    private List<ListEnt> playerNames = new();
    private List<ListEnt> replayPaths = new();
    private List<string> skipReplays = new();
    private SemaphoreSlim ss = new(1, 1);

    protected override void OnInitialized()
    {
        Init();
        base.OnInitialized();
    }

    private void Init()
    {
        editContext = new(UserSettingsService.UserSettings);
        editContext.OnFieldChanged += EditContext_OnFieldChanged;

        playerNames = UserSettingsService.UserSettings.PlayerNames.Select(s => new ListEnt() { Name = s }).ToList();
        replayPaths = UserSettingsService.UserSettings.ReplayPaths.Select(s => new ListEnt() { Name = s }).ToList();
        _ = LoadSkipReplays();
    }

    private async Task LoadSkipReplays()
    {
        skipReplays = await ReplayRepository.GetSkipReplays();
        await InvokeAsync(() => StateHasChanged());
    }

    private async Task RemoveSkipReplay(string replayPath)
    {
        await ss.WaitAsync();
        try
        {
            await ReplayRepository.RemoveSkipReplay(replayPath);
        }
        finally
        {
            ss.Release();
        }
        skipReplays.Remove(replayPath);
        toastService.ShowSuccess("Replay sucessfully removed from SkipList");
        await InvokeAsync(() => StateHasChanged());
    }

    private void EditContext_OnFieldChanged(object? sender, FieldChangedEventArgs e)
    {
        if (e.FieldIdentifier.FieldName == "AllowCleanUploads" && UserSettingsService.UserSettings.AllowCleanUploads)
        {
            UserSettingsService.UserSettings.AllowUploads = true;
            UserSettingsService.UserSettings.AutoScanForNewReplays = true;
        }
    }

    private void OnValidSubmit()
    {
        UserSettingsService.UserSettings.PlayerNames.Clear();
        UserSettingsService.UserSettings.ReplayPaths.Clear();

        UserSettingsService.UserSettings.PlayerNames.AddRange(playerNames
            .Where(x => !String.IsNullOrEmpty(x.Name))
            .Select(s => s.Name.Trim()));

        UserSettingsService.UserSettings.ReplayPaths.AddRange(replayPaths
            .Where(x => !String.IsNullOrEmpty(x.Name) && Directory.Exists(x.Name))
            .Select(s => s.Name));

        if (UserSettingsService.UserSettings.CpuCoresUsedForDecoding < 1)
        {
            UserSettingsService.UserSettings.CpuCoresUsedForDecoding = 1;
        }
        else if (UserSettingsService.UserSettings.CpuCoresUsedForDecoding > Math.Max(Environment.ProcessorCount, 2))
        {
            UserSettingsService.UserSettings.CpuCoresUsedForDecoding = Math.Max(Environment.ProcessorCount, 2);
        }

        _ = UserSettingsService.Save();
        toastService.ShowSuccess("Settings saved.");
        playerNames = UserSettingsService.UserSettings.PlayerNames.Select(s => new ListEnt() { Name = s }).ToList();
        replayPaths = UserSettingsService.UserSettings.ReplayPaths.Select(s => new ListEnt() { Name = s }).ToList();
    }

    private void Reset()
    {
        UserSettingsService.SetInitialNamesAndFolders();

        editContext = new(UserSettingsService.UserSettings);

        playerNames = UserSettingsService.UserSettings.PlayerNames.Select(s => new ListEnt() { Name = s }).ToList();
        replayPaths = UserSettingsService.UserSettings.ReplayPaths.Select(s => new ListEnt() { Name = s }).ToList();

        StateHasChanged();
    }

    private void AddPlayerName()
    {
        playerNames.Add(new ListEnt());
    }

    private void RemovePlayerName(ListEnt listEnt)
    {
        playerNames.Remove(listEnt);
    }

    private void AddReplayPath()
    {
        replayPaths.Add(new ListEnt());
    }

    private void RemoveReplayPath(ListEnt listEnt)
    {
        replayPaths.Remove(listEnt);
    }

    private async Task Backup()
    {
        string backupFile = BackupService.Backup();
        if (Application.Current?.MainPage != null)
        {
            await Application.Current.MainPage.DisplayAlert("Backup successful", backupFile, "OK");
        }
    }

    public async Task Restore()
    {
        if (Application.Current?.MainPage == null)
        {
            return;
        }
        bool doit = await Application.Current.MainPage.DisplayAlert("Restore Database", "All current data will be overwritten!", "Yes", "No");
        if (doit)
        {
            try
            {
                var result = await FilePicker.Default.PickAsync();
                if (result != null)
                {
                    context.Database.EnsureDeleted();
                    var backupResult = BackupService.Restore(result.FullPath);
                    if (backupResult)
                    {
                        context.Database.EnsureCreated();
                        context.Database.Migrate();
                        UserSettingsService.ReloadConfig();
                        Init();
                        await InvokeAsync(() => StateHasChanged());
                        await Application.Current.MainPage.DisplayAlert("Restore successful", "The database has been restored", "OK");
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
                return;
            }
        }
    }

    public async Task DisableCleanUploads()
    {
        if (Application.Current?.MainPage == null)
        {
            return;
        }
        bool disable = await Application.Current.MainPage
            .DisplayAlert("Disable Allow Ratings", "In order to enable fair competition, you can only reactivate this function after a certain period of time after deactivation. Are you sure you want to disable this feature?", "Yes", "Cancel");

        if (disable)
        {
            DateTime reactivationTime = await UploadService.DisableUploads();
            UserSettingsService.UserSettings.AllowCleanUploads = false;
            UserSettingsService.UserSettings.AllowUploads = false;
            await UserSettingsService.Save();
            await Application.Current.MainPage.DisplayAlert("Allow Ratings disabled", $"You will be able to reactive this function at {reactivationTime.ToString(@"yyyy-MM-dd")}", "OK");
        }
    }

    public async Task DeleteMe()
    {
        if (Application.Current?.MainPage == null)
        {
            return;
        }
        bool disable = await Application.Current.MainPage
            .DisplayAlert("Delete my data", "In order to enable fair competition, you can only reactivate this function after a certain period of time after deleting your data. Are you sure you want to continue?", "Yes", "Cancel");

        if (disable)
        {
            bool result = await UploadService.DeleteMe();
            UserSettingsService.UserSettings.AllowCleanUploads = false;
            UserSettingsService.UserSettings.AllowUploads = false;
            await UserSettingsService.Save();
            await Application.Current.MainPage.DisplayAlert("Data deleted", "", "OK");
        }
    }

    internal class ListEnt
    {
        public string Name { get; set; } = "";
    }

    public void Dispose()
    {
        ss.Dispose();
    }
}
