@page "/stats"
@inject DecodeService DecodeService
@inject IToastService toastService
@inject IRatingRepository ratingRepository
@implements IDisposable

@using pax.dsstats.dbng.Services;
@using pax.dsstats.shared;
@using sc2dsstats.maui.Services;
@using sc2dsstats.razorlib.Stats;

<PageTitle>Stats</PageTitle>

<sc2dsstats.razorlib.Stats.StatsComponent @ref="statsComponent"
    StatsRequest="statsRequest"
    DefaultPlayers="defaultPlayers">
</sc2dsstats.razorlib.Stats.StatsComponent>

@code {
    StatsRequest statsRequest = new()
    {
        StatsMode = StatsMode.Winrate,
        Uploaders = true,
        DefaultFilter = true,
        GameModes = new List<GameMode>() { GameMode.Commanders, GameMode.CommandersHeroic }
    };
    private StatsComponent? statsComponent;

    List<RequestNames> defaultPlayers = new();

    protected override async Task OnInitializedAsync()
    {
        (statsRequest.StartTime, statsRequest.EndTime) = Data.TimeperiodSelected("This Year");
        statsRequest.TimePeriod = "This Year";

        DecodeService.DecodeStateChanged += DecodeStateChanged;

        defaultPlayers = await GetDefaultPlayers();

        await base.OnInitializedAsync();
    }

    private void DecodeStateChanged(object? sender, DecodeEventArgs e)
    {
        if (e.Done)
        {
            _ = statsComponent?.LoadData();
        }
    }

    private async Task<List<RequestNames>> GetDefaultPlayers()
    {
        HashSet<RequestNames> requestNames = new();

        foreach (var name in UserSettingsService.UserSettings.PlayerNames)
        {
            requestNames.UnionWith(await ratingRepository.GetRequestNames(name));
        }

        return requestNames.ToList();
    }

    public void Dispose()
    {
        DecodeService.DecodeStateChanged += DecodeStateChanged;
    }
}
